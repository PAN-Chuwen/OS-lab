{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6d59\u6c5f\u5927\u5b6622\u5e74\u79cb\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u9a8c \u672c \u4ed3\u5e93 \u662f\u6d59\u6c5f\u5927\u5b6622\u5e74\u79cb \u64cd\u4f5c\u7cfb\u7edf \u8bfe\u7a0b\u7684\u6559\u5b66\u4ed3\u5e93\uff0c\u5305\u542b\u5728\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u4e0a\u6240\u6709\u7684\u5b9e\u9a8c\u6587\u6863\u548c\u516c\u5f00\u4ee3\u7801\u3002\u4ed3\u5e93\u76ee\u5f55\u7ed3\u6784\uff1a 1 2 3 4 \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs/ # \u5b9e\u9a8c\u6587\u6863 \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 src/ # \u516c\u5f00\u4ee3\u7801 \u5b9e\u9a8c\u6587\u6863\u5df2\u7ecf\u90e8\u7f72\u5728\u4e86 GitHub Pages \u4e0a\uff0c\u65b9\u4fbf\u5927\u5bb6\u9605\u8bfb\u3002 \u672c\u5730\u6e32\u67d3\u6587\u6863 \u6587\u6863\u91c7\u7528\u4e86 mkdocs-material \u5de5\u5177\u6784\u5efa\u548c\u90e8\u7f72\u3002\u5982\u679c\u60f3\u5728\u672c\u5730\u6e32\u67d3\uff1a 1 2 3 4 5 6 7 $ pip3 install mkdocs-material # \u5b89\u88c5 mkdocs-material $ git clone https://github.com/ZJU-SEC/os22fall-stu # clone \u672c repo $ mkdocs serve # \u672c\u5730\u6e32\u67d3 INFO - Building documentation... INFO - Cleaning site directory ... INFO - [ 11 :00:57 ] Serving on http://127.0.0.1:8000/os22fall-stu/ \u81f4\u8c22 \u611f\u8c22\u4ee5\u4e0b\u5404\u4f4d\u8001\u5e08\u548c\u52a9\u6559\u7684\u8f9b\u52e4\u4ed8\u51fa\uff01 \u7533\u6587\u535a \u3001 \u5468\u4e9a\u91d1 \u3001\u5f90\u91d1\u7131\u3001\u5468\u4fa0\u3001\u7ba1\u7ae0\u8f89\u3001\u5f20\u6587\u9f99\u3001\u5218\u5f3a\u3001\u5b59\u5bb6\u680b\u3001\u5468\u5929\u6631\u3001\u5e84\u963f\u5f97\u3001\u738b\u7428\u3001\u6c88\u97ec\u7acb\u3001\u738b\u661f\u5b87\u3001\u6731\u749f\u68ee\u3001\u8c22\u6d35\u3001 \u6f58\u5b50\u66f0 \u3001\u6731\u82e5\u51e1\u3001\u5b63\u9ad8\u5f3a\u3001\u90ed\u82e5\u5bb9\u3001\u675c\u4e91\u6f47","title":"\u6d59\u6c5f\u5927\u5b6622\u5e74\u79cb\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u9a8c"},{"location":"#22","text":"\u672c \u4ed3\u5e93 \u662f\u6d59\u6c5f\u5927\u5b6622\u5e74\u79cb \u64cd\u4f5c\u7cfb\u7edf \u8bfe\u7a0b\u7684\u6559\u5b66\u4ed3\u5e93\uff0c\u5305\u542b\u5728\u64cd\u4f5c\u7cfb\u7edf\u8bfe\u7a0b\u4e0a\u6240\u6709\u7684\u5b9e\u9a8c\u6587\u6863\u548c\u516c\u5f00\u4ee3\u7801\u3002\u4ed3\u5e93\u76ee\u5f55\u7ed3\u6784\uff1a 1 2 3 4 \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs/ # \u5b9e\u9a8c\u6587\u6863 \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 src/ # \u516c\u5f00\u4ee3\u7801 \u5b9e\u9a8c\u6587\u6863\u5df2\u7ecf\u90e8\u7f72\u5728\u4e86 GitHub Pages \u4e0a\uff0c\u65b9\u4fbf\u5927\u5bb6\u9605\u8bfb\u3002","title":"\u6d59\u6c5f\u5927\u5b6622\u5e74\u79cb\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u9a8c"},{"location":"#_1","text":"\u6587\u6863\u91c7\u7528\u4e86 mkdocs-material \u5de5\u5177\u6784\u5efa\u548c\u90e8\u7f72\u3002\u5982\u679c\u60f3\u5728\u672c\u5730\u6e32\u67d3\uff1a 1 2 3 4 5 6 7 $ pip3 install mkdocs-material # \u5b89\u88c5 mkdocs-material $ git clone https://github.com/ZJU-SEC/os22fall-stu # clone \u672c repo $ mkdocs serve # \u672c\u5730\u6e32\u67d3 INFO - Building documentation... INFO - Cleaning site directory ... INFO - [ 11 :00:57 ] Serving on http://127.0.0.1:8000/os22fall-stu/","title":"\u672c\u5730\u6e32\u67d3\u6587\u6863"},{"location":"#_2","text":"\u611f\u8c22\u4ee5\u4e0b\u5404\u4f4d\u8001\u5e08\u548c\u52a9\u6559\u7684\u8f9b\u52e4\u4ed8\u51fa\uff01 \u7533\u6587\u535a \u3001 \u5468\u4e9a\u91d1 \u3001\u5f90\u91d1\u7131\u3001\u5468\u4fa0\u3001\u7ba1\u7ae0\u8f89\u3001\u5f20\u6587\u9f99\u3001\u5218\u5f3a\u3001\u5b59\u5bb6\u680b\u3001\u5468\u5929\u6631\u3001\u5e84\u963f\u5f97\u3001\u738b\u7428\u3001\u6c88\u97ec\u7acb\u3001\u738b\u661f\u5b87\u3001\u6731\u749f\u68ee\u3001\u8c22\u6d35\u3001 \u6f58\u5b50\u66f0 \u3001\u6731\u82e5\u51e1\u3001\u5b63\u9ad8\u5f3a\u3001\u90ed\u82e5\u5bb9\u3001\u675c\u4e91\u6f47","title":"\u81f4\u8c22"},{"location":"faq/","text":"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u7b54 \u9996\u5148\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u672c\u6b21\u5b9e\u9a8c\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u4e0d\u5e94\u8be5\u7ecf\u7531 Windows \u4e2d\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u8bf7\u76f4\u63a5\u5728 \u865a\u62df\u673a\u6216 Linux \u7269\u7406\u673a \u4e2d\u76f4\u63a5\u5b8c\u6210\u3002 1 \u4e3a\u4ec0\u4e48\u6211\u628a Linux \u6e90\u7801\u653e\u5728\u5171\u4eab\u6587\u4ef6\u5939\u6216 wsl2 \u7684 /mnt \u4e0b\u7f16\u8bd1\u4e0d\u51fa\u6765\uff1f \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cLinux \u5728\u4f7f\u7528 Windows \u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u8bf7\u4f7f\u7528 wget \u7b49\u5de5\u5177\u5c06 Linux \u6e90\u7801\u4e0b\u8f7d\u81f3\u5bb9\u5668\u5185\u76ee\u5f55 \u800c\u975e\u5171\u4eab\u76ee\u5f55\u6216 /mnt \u76ee\u5f55\u4e0b\u7684\u4efb\u4f55\u4f4d\u7f6e \uff0c\u7136\u540e\u6267\u884c\u7f16\u8bd1\u3002 2 \u4e3a\u4ec0\u4e48 QEMU & GDB \u4f7f\u7528 si \u5355\u6307\u4ee4\u8c03\u8bd5\u9047\u5230\u6a21\u5f0f\u5207\u6362\u65f6\u65e0\u6cd5\u6b63\u5e38\u6267\u884c\uff1f \u5728\u9047\u5230\u8bf8\u5982 mret , sret \u7b49\u6307\u4ee4\u9020\u6210\u7684\u6a21\u5f0f\u5207\u6362\u65f6\uff0c si \u6307\u4ee4\u4f1a\u5931\u6548\uff0c\u53ef\u80fd\u8868\u73b0\u4e3a\u7a0b\u5e8f\u5f00\u59cb\u4e0d\u505c\u8dd1\uff0c\u5f71\u54cd\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u884c\u4e3a\u7684\u5224\u65ad\u3002 \u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u7a0b\u5e8f \u9884\u671f\u8df3\u8f6c \u7684\u4f4d\u7f6e\u6253\u4e0a\u65ad\u70b9\uff0c\u65ad\u70b9\u4e0d\u4f1a\u53d7\u5230\u6a21\u5f0f\u5207\u6362\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 ( gdb ) i r sepc sepc 0x8000babe ( gdb ) b * 0x8000babe Breakpoint 1 at 0x8000babe ( gdb ) si # \u6216\u8005\u4f7f\u7528 c Breakpoint 1 , 0x000000008000babe in _never_gonna_give_you_up () ... \u8fd9\u6837\u5c31\u53ef\u4ee5\u770b\u5230\u65ad\u70b9\u88ab\u89e6\u53d1\uff0c\u53ef\u4ee5\u7ee7\u7eed\u8c03\u8bd5\u4e86\u3002 3 \u4e3a\u4ec0\u4e48\u6211\u4e0d\u80fd\u5728 GDB \u4e2d\u4f7f\u7528 next \u6216\u8005 finish ? \u8fd9\u4e24\u6761\u547d\u4ee4\u90fd\u4f9d\u8d56\u5728\u5185\u6838\u4e2d\u6dfb\u52a0\u7684\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7 menuconfig \u8fdb\u884c\u914d\u7f6e\u6dfb\u52a0\u3002\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u6ca1\u6709\u5bf9\u8fd9\u90e8\u5206\u5185\u5bb9\u4f5c\u8981\u6c42\uff0c\u53ef\u4ee5\u81ea\u884c Google \u63a2\u7d22\u3002 4 \u4e3a\u4ec0\u4e48\u6211\u5728\u5185\u6838\u4e2d\u6dfb\u52a0\u4e86 debug \u4fe1\u606f\uff0c\u4f46\u662f\u8fd8\u662f\u6ca1\u6cd5\u4f7f\u7528 next \u6216\u8005 finish ? \u53ef\u80fd\u4f60\u5728\u914d\u7f6e\u5185\u6838\u65f6\u5df2\u7ecf\u6dfb\u52a0\u4e86\u8c03\u8bd5\u4fe1\u606f\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5728 QEMU\u8fd0\u884c\u7684\u5176\u4ed6\u90e8\u5206 \u6dfb\u52a0\u3002\u4f8b\u5982 SRAM \u4e2d\u5bf9 march \u8fdb\u884c\u914d\u7f6e\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca opensbi \u4e2d\u7684\u6240\u6709\u90e8\u5206\uff0c\u90fd\u7f3a\u5c11\u8c03\u8bd5\u4fe1\u606f\u3002\u6240\u4ee5\u624d\u65e0\u6cd5\u6309\u7167\u51fd\u6570\u7684\u5c42\u7ea7\u8fdb\u884c\u8c03\u8bd5\u3002\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u6ca1\u6709\u5bf9\u8fd9\u90e8\u5206\u5185\u5bb9\u4f5c\u8981\u6c42\uff0c\u53ef\u4ee5\u81ea\u884c Google \u63a2\u7d22\u3002 5 \u4e3a\u4ec0\u4e48\u6211\u5728 start_kernel \u5904\u4e0d\u80fd\u6b63\u5e38\u4f7f\u7528\u65ad\u70b9\uff1f \u5728\u4ee5\u4e0b\u7248\u672c\u4e2d\uff0c\u8fd9\u4e2a\u65ad\u70b9\u80fd\u591f\u6b63\u5e38\u88ab\u6253\u4e0a\u5e76\u89e6\u53d1 1 2 3 4 GNU gdb (Ubuntu 12.0.90-0ubuntu1) 12.0.90 QEMU emulator version 6.2.0 (Debian 1:6.2+dfsg-2ubuntu6.3) RISC-V GNU Toolchain (Ubuntu 11.2.0-16ubuntu1) 11.2.0 linux-6.0-rc5/linux-5.19.9 6 \u4e3a\u4ec0\u4e48 Lab1 \u4e2d\u63d0\u793a riscv64-elf-unknown-gcc: No such file or directory ? \u6211\u4eec\u66f4\u65b0\u4e86\u5de5\u5177\u94fe\uff0c\u8bf7\u4f7f\u7528 git pull \u6765\u66f4\u65b0\u4ed3\u5e93\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 make clean \u6e05\u9664\u539f\u5148\u7684\u7f16\u8bd1\u4ea7\u7269\u3002 7 \u4e3a\u4ec0\u4e48 Lab1 \u4e2d\u6211\u7684 C \u8bed\u8a00\u51fd\u6570\u7684\u53c2\u6570\u65e0\u6cd5\u6b63\u786e\u4f20\u5165\uff1f \u786e\u8ba4\u81ea\u5df1\u662f\u5426\u5728 head.S \u91cc\u7684 _start \u51fd\u6570\u4e2d\u6b63\u786e\u8bbe\u7f6e\u4e86 sp \uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u5b83\u7684\u503c\u5e94\u8be5\u662f 0x8020XXXX \u3002\u672a\u8bbe\u7f6e sp \u4f1a\u4f7f\u6808\u4e0a\u7684\u503c\u4e0d\u6b63\u786e\u4e14\u65e0\u6cd5\u5199\u5165\u3002 8 \u4e3a\u4ec0\u4e48\u6211\u628a puti \u7684\u53c2\u6570\u7c7b\u578b\u66ff\u6362\u6210 uint64 \u8fd8\u662f\u53ea\u80fd\u6253\u5370\u51fa 32bits \u7684\u503c\uff1f \u5f3a\u70c8\u5efa\u8bae \u628a uint64 \u7684\u5b9a\u4e49\u66ff\u6362\u4e3a unsigned long long \u800c\u4e0d\u662f\u73b0\u5728\u4f7f\u7528\u7684 unsigned long \uff0c\u56e0\u4e3a\u524d\u8005\u572832\u4f4d\u548c64\u4f4d\u7684\u5e73\u53f0\u4e0a\u7684\u957f\u5ea6\u90fd\u662f64\u4f4d\uff0c\u800c\u540e\u8005\u572832\u4f4d\u7684\u5e73\u53f0\u4e0a\u662f32\u4f4d\u7684\u3002 9 \u4e3a\u4ec0\u4e48\u6211\u7684 QEMU \u4f1a \u201c\u5361\u4f4f\u201d\uff1f qemu-system \u672c\u8eab\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u62df\u5668\uff0c\u662f\u4e0d\u4f1a\u76f4\u63a5\u5361\u6b7b\u7684\uff0c\u5982\u679c\u4f60\u5728 si \u6216\u8005 c \u540e\uff0cQEMU \u770b\u8d77\u6765\u5931\u53bb\u4e86\u54cd\u5e94\uff0c\u90a3\u4e48\u6781\u6709\u53ef\u80fd\u662f\u7a0b\u5e8f\u8fd0\u884c\u5230\u4e86\u610f\u60f3\u4e0d\u5230\u7684\u5730\u65b9\u3002\u4f8b\u5982\u5728\u5199\u5165 satp \u540e\uff0c\u5982\u679c\u90e8\u5206 bit \u6ca1\u6709\u6210\u529f\u8bbe\u7f6e\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u76f4\u63a5\u8df3\u8fdb trap \u3002\u800c\u4e14\u5728\u524d\u9762\u7684\u5b9e\u9a8c\u4e2d\u6211\u4eec\u4e5f\u53d1\u73b0\u4e86\uff0c\u5728\u53d1\u751f\u7279\u6743\u7ea7\u5207\u6362\u6216\u8005\u53d1\u751f\u9677\u5165\u65f6\uff0c si \u662f\u6709\u53ef\u80fd\u65e0\u6cd5\u89e6\u53d1\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u9700\u8981\u4f60\u5728\u7a0b\u5e8f\u53ef\u80fd\u5230\u8fbe\u7684\u5730\u65b9\u90fd\u6253\u4e0a\u65ad\u70b9\u6765\u6682\u505c QEMU \u7684\u6267\u884c\u4e86\u3002 10 \u4e3a\u4ec0\u4e48\u6211\u5728\u8bbe\u7f6e satp \u540e\u5bfc\u81f4\u4e86 gdb-multiarch \u7684 segmentation fault ? \u56e0\u4e3a satp \u6216\u8005\u5404\u7ea7\u9875\u8868\u9879\u8bbe\u7f6e\u6709\u95ee\u9898\u3002 11 \u4e3a\u4ec0\u4e48\u5728 vmlinux.lds.S \u4e2d\u4f1a #include \"types.h\" ? \u56e0\u4e3a\u6211\u4eec\u5b9e\u9a8c\u4ee3\u7801\u5b58\u5728\u4e00\u4e9b\u5386\u53f2\u9650\u5236\u6ca1\u6765\u5f97\u53ca\u4fee\u6539\uff0c\u5728 vmlinux.lds.S \u4e2d\u6709 #include \"defs.h\" \uff0c\u7136\u540e\u4e4b\u524d\u53c8\u6ca1\u6709\u63d0\u9192\u540c\u5b66\u4e0d\u8981\u5728 defs.h \u91cc\u9762\u6dfb\u52a0\u4e1c\u897f\uff0c\u5bfc\u81f4\u5728 defs.h \u4e2d\u6dfb\u52a0\u7684\u5185\u5bb9\u963b\u788d\u4e86 vmlinux.lds \u7684\u6b63\u786e\u751f\u6210\u3002\u4e00\u4e2a\u53ef\u884c\u7684\u505a\u6cd5\u662f\u5c06 defs.h \u4e2d\u9664\u4e86\u5b8f\u5b9a\u4e49\u4ee5\u5916\u7684\u90e8\u5206\u5168\u90e8\u53bb\u9664\uff08\u5305\u62ec\u5b8finclude\uff09\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u53bb\u6389\u7684\u90e8\u5206\u6dfb\u52a0\u5230\u5176\u4ed6\u7684\u5934\u6587\u4ef6\u91cc\u4ee5\u4f9b\u4f7f\u7528\u3002 12 uapp \u660e\u660e\u5df2\u7ecf\u5728\u5185\u5b58\u91cc\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u88ab\u62f7\u8d1d\u4e00\u6b21\u624d\u80fd\u8fd0\u884c\uff1f \u56e0\u4e3a\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u4e0d\u51c6\u5907\u5f15\u5165\u78c1\u76d8\u9a71\u52a8\uff0c\u6240\u4ee5\u5c06\u5185\u5b58\u7684\u4e00\u90e8\u5206\u4f5c\u4e3a ramdisk , \u4e5f\u5c31\u662f\u8bf4\u6709\u4e00\u6bb5\u5185\u5b58\u88ab\u6211\u4eec\u5f53\u6210\u4e86\u786c\u76d8\u3002\u8fd9\u6bb5\u5185\u5b58\u5c31\u662f\u4ece uapp_start \u5230 uapp_end \u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u50cf\u64cd\u4f5c\u78c1\u76d8\u4e00\u6837\u64cd\u4f5c\u8fd9\u6bb5\u5185\u5b58\u3002\u5728\u8fd0\u884c\u78c1\u76d8\u4e0a\u7684\u7a0b\u5e8f\u524d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u62f7\u8d1d\u5230\u6211\u4eec\u4e3a\u7a0b\u5e8f\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4f9d\u7167 Elf Header \u7684\u8981\u6c42\u6620\u5c04\u5230\u7528\u6237\u80fd\u8bbf\u95ee\u7684\u5730\u5740\u7a7a\u95f4\u3002\u8fd9\u65f6\u5019\u7528\u6237\u5c31\u80fd\u8bbf\u95ee\u6211\u4eec\u4ece\u78c1\u76d8\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d\u7684\u6570\u636e\u548c\u4ee3\u7801\u4e86\u3002","title":"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u7b54"},{"location":"faq/#_1","text":"\u9996\u5148\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u672c\u6b21\u5b9e\u9a8c\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u4e0d\u5e94\u8be5\u7ecf\u7531 Windows \u4e2d\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u8bf7\u76f4\u63a5\u5728 \u865a\u62df\u673a\u6216 Linux \u7269\u7406\u673a \u4e2d\u76f4\u63a5\u5b8c\u6210\u3002","title":"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u7b54"},{"location":"faq/#1-linux-wsl2-mnt","text":"\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cLinux \u5728\u4f7f\u7528 Windows \u4e0a\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u8bf7\u4f7f\u7528 wget \u7b49\u5de5\u5177\u5c06 Linux \u6e90\u7801\u4e0b\u8f7d\u81f3\u5bb9\u5668\u5185\u76ee\u5f55 \u800c\u975e\u5171\u4eab\u76ee\u5f55\u6216 /mnt \u76ee\u5f55\u4e0b\u7684\u4efb\u4f55\u4f4d\u7f6e \uff0c\u7136\u540e\u6267\u884c\u7f16\u8bd1\u3002","title":"1 \u4e3a\u4ec0\u4e48\u6211\u628a Linux \u6e90\u7801\u653e\u5728\u5171\u4eab\u6587\u4ef6\u5939\u6216 wsl2 \u7684 /mnt \u4e0b\u7f16\u8bd1\u4e0d\u51fa\u6765\uff1f"},{"location":"faq/#2-qemu-gdb-si","text":"\u5728\u9047\u5230\u8bf8\u5982 mret , sret \u7b49\u6307\u4ee4\u9020\u6210\u7684\u6a21\u5f0f\u5207\u6362\u65f6\uff0c si \u6307\u4ee4\u4f1a\u5931\u6548\uff0c\u53ef\u80fd\u8868\u73b0\u4e3a\u7a0b\u5e8f\u5f00\u59cb\u4e0d\u505c\u8dd1\uff0c\u5f71\u54cd\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u884c\u4e3a\u7684\u5224\u65ad\u3002 \u4e00\u4e2a\u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u7a0b\u5e8f \u9884\u671f\u8df3\u8f6c \u7684\u4f4d\u7f6e\u6253\u4e0a\u65ad\u70b9\uff0c\u65ad\u70b9\u4e0d\u4f1a\u53d7\u5230\u6a21\u5f0f\u5207\u6362\u7684\u5f71\u54cd\uff0c\u6bd4\u5982\uff1a 1 2 3 4 5 6 7 ( gdb ) i r sepc sepc 0x8000babe ( gdb ) b * 0x8000babe Breakpoint 1 at 0x8000babe ( gdb ) si # \u6216\u8005\u4f7f\u7528 c Breakpoint 1 , 0x000000008000babe in _never_gonna_give_you_up () ... \u8fd9\u6837\u5c31\u53ef\u4ee5\u770b\u5230\u65ad\u70b9\u88ab\u89e6\u53d1\uff0c\u53ef\u4ee5\u7ee7\u7eed\u8c03\u8bd5\u4e86\u3002","title":"2 \u4e3a\u4ec0\u4e48 QEMU &amp; GDB \u4f7f\u7528 si \u5355\u6307\u4ee4\u8c03\u8bd5\u9047\u5230\u6a21\u5f0f\u5207\u6362\u65f6\u65e0\u6cd5\u6b63\u5e38\u6267\u884c\uff1f"},{"location":"faq/#3-gdb-next-finish","text":"\u8fd9\u4e24\u6761\u547d\u4ee4\u90fd\u4f9d\u8d56\u5728\u5185\u6838\u4e2d\u6dfb\u52a0\u7684\u8c03\u8bd5\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7 menuconfig \u8fdb\u884c\u914d\u7f6e\u6dfb\u52a0\u3002\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u6ca1\u6709\u5bf9\u8fd9\u90e8\u5206\u5185\u5bb9\u4f5c\u8981\u6c42\uff0c\u53ef\u4ee5\u81ea\u884c Google \u63a2\u7d22\u3002","title":"3 \u4e3a\u4ec0\u4e48\u6211\u4e0d\u80fd\u5728 GDB \u4e2d\u4f7f\u7528 next \u6216\u8005 finish ?"},{"location":"faq/#4-debug-next-finish","text":"\u53ef\u80fd\u4f60\u5728\u914d\u7f6e\u5185\u6838\u65f6\u5df2\u7ecf\u6dfb\u52a0\u4e86\u8c03\u8bd5\u4fe1\u606f\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5728 QEMU\u8fd0\u884c\u7684\u5176\u4ed6\u90e8\u5206 \u6dfb\u52a0\u3002\u4f8b\u5982 SRAM \u4e2d\u5bf9 march \u8fdb\u884c\u914d\u7f6e\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca opensbi \u4e2d\u7684\u6240\u6709\u90e8\u5206\uff0c\u90fd\u7f3a\u5c11\u8c03\u8bd5\u4fe1\u606f\u3002\u6240\u4ee5\u624d\u65e0\u6cd5\u6309\u7167\u51fd\u6570\u7684\u5c42\u7ea7\u8fdb\u884c\u8c03\u8bd5\u3002\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u6ca1\u6709\u5bf9\u8fd9\u90e8\u5206\u5185\u5bb9\u4f5c\u8981\u6c42\uff0c\u53ef\u4ee5\u81ea\u884c Google \u63a2\u7d22\u3002","title":"4 \u4e3a\u4ec0\u4e48\u6211\u5728\u5185\u6838\u4e2d\u6dfb\u52a0\u4e86 debug \u4fe1\u606f\uff0c\u4f46\u662f\u8fd8\u662f\u6ca1\u6cd5\u4f7f\u7528 next \u6216\u8005 finish ?"},{"location":"faq/#5-start_kernel","text":"\u5728\u4ee5\u4e0b\u7248\u672c\u4e2d\uff0c\u8fd9\u4e2a\u65ad\u70b9\u80fd\u591f\u6b63\u5e38\u88ab\u6253\u4e0a\u5e76\u89e6\u53d1 1 2 3 4 GNU gdb (Ubuntu 12.0.90-0ubuntu1) 12.0.90 QEMU emulator version 6.2.0 (Debian 1:6.2+dfsg-2ubuntu6.3) RISC-V GNU Toolchain (Ubuntu 11.2.0-16ubuntu1) 11.2.0 linux-6.0-rc5/linux-5.19.9","title":"5  \u4e3a\u4ec0\u4e48\u6211\u5728 start_kernel \u5904\u4e0d\u80fd\u6b63\u5e38\u4f7f\u7528\u65ad\u70b9\uff1f"},{"location":"faq/#6-lab1-riscv64-elf-unknown-gcc-no-such-file-or-directory","text":"\u6211\u4eec\u66f4\u65b0\u4e86\u5de5\u5177\u94fe\uff0c\u8bf7\u4f7f\u7528 git pull \u6765\u66f4\u65b0\u4ed3\u5e93\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 make clean \u6e05\u9664\u539f\u5148\u7684\u7f16\u8bd1\u4ea7\u7269\u3002","title":"6 \u4e3a\u4ec0\u4e48 Lab1 \u4e2d\u63d0\u793a riscv64-elf-unknown-gcc: No such file or directory ?"},{"location":"faq/#7-lab1-c","text":"\u786e\u8ba4\u81ea\u5df1\u662f\u5426\u5728 head.S \u91cc\u7684 _start \u51fd\u6570\u4e2d\u6b63\u786e\u8bbe\u7f6e\u4e86 sp \uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u5b83\u7684\u503c\u5e94\u8be5\u662f 0x8020XXXX \u3002\u672a\u8bbe\u7f6e sp \u4f1a\u4f7f\u6808\u4e0a\u7684\u503c\u4e0d\u6b63\u786e\u4e14\u65e0\u6cd5\u5199\u5165\u3002","title":"7 \u4e3a\u4ec0\u4e48 Lab1 \u4e2d\u6211\u7684 C \u8bed\u8a00\u51fd\u6570\u7684\u53c2\u6570\u65e0\u6cd5\u6b63\u786e\u4f20\u5165\uff1f"},{"location":"faq/#8-puti-uint64-32bits","text":"\u5f3a\u70c8\u5efa\u8bae \u628a uint64 \u7684\u5b9a\u4e49\u66ff\u6362\u4e3a unsigned long long \u800c\u4e0d\u662f\u73b0\u5728\u4f7f\u7528\u7684 unsigned long \uff0c\u56e0\u4e3a\u524d\u8005\u572832\u4f4d\u548c64\u4f4d\u7684\u5e73\u53f0\u4e0a\u7684\u957f\u5ea6\u90fd\u662f64\u4f4d\uff0c\u800c\u540e\u8005\u572832\u4f4d\u7684\u5e73\u53f0\u4e0a\u662f32\u4f4d\u7684\u3002","title":"8 \u4e3a\u4ec0\u4e48\u6211\u628a puti \u7684\u53c2\u6570\u7c7b\u578b\u66ff\u6362\u6210 uint64 \u8fd8\u662f\u53ea\u80fd\u6253\u5370\u51fa 32bits \u7684\u503c\uff1f"},{"location":"faq/#9-qemu","text":"qemu-system \u672c\u8eab\u4f5c\u4e3a\u4e00\u4e2a\u6a21\u62df\u5668\uff0c\u662f\u4e0d\u4f1a\u76f4\u63a5\u5361\u6b7b\u7684\uff0c\u5982\u679c\u4f60\u5728 si \u6216\u8005 c \u540e\uff0cQEMU \u770b\u8d77\u6765\u5931\u53bb\u4e86\u54cd\u5e94\uff0c\u90a3\u4e48\u6781\u6709\u53ef\u80fd\u662f\u7a0b\u5e8f\u8fd0\u884c\u5230\u4e86\u610f\u60f3\u4e0d\u5230\u7684\u5730\u65b9\u3002\u4f8b\u5982\u5728\u5199\u5165 satp \u540e\uff0c\u5982\u679c\u90e8\u5206 bit \u6ca1\u6709\u6210\u529f\u8bbe\u7f6e\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u76f4\u63a5\u8df3\u8fdb trap \u3002\u800c\u4e14\u5728\u524d\u9762\u7684\u5b9e\u9a8c\u4e2d\u6211\u4eec\u4e5f\u53d1\u73b0\u4e86\uff0c\u5728\u53d1\u751f\u7279\u6743\u7ea7\u5207\u6362\u6216\u8005\u53d1\u751f\u9677\u5165\u65f6\uff0c si \u662f\u6709\u53ef\u80fd\u65e0\u6cd5\u89e6\u53d1\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u9700\u8981\u4f60\u5728\u7a0b\u5e8f\u53ef\u80fd\u5230\u8fbe\u7684\u5730\u65b9\u90fd\u6253\u4e0a\u65ad\u70b9\u6765\u6682\u505c QEMU \u7684\u6267\u884c\u4e86\u3002","title":"9 \u4e3a\u4ec0\u4e48\u6211\u7684 QEMU \u4f1a \u201c\u5361\u4f4f\u201d\uff1f"},{"location":"faq/#10-satp-gdb-multiarch-segmentation-fault","text":"\u56e0\u4e3a satp \u6216\u8005\u5404\u7ea7\u9875\u8868\u9879\u8bbe\u7f6e\u6709\u95ee\u9898\u3002","title":"10 \u4e3a\u4ec0\u4e48\u6211\u5728\u8bbe\u7f6e satp \u540e\u5bfc\u81f4\u4e86 gdb-multiarch \u7684 segmentation fault ?"},{"location":"faq/#11-vmlinuxldss-include-typesh","text":"\u56e0\u4e3a\u6211\u4eec\u5b9e\u9a8c\u4ee3\u7801\u5b58\u5728\u4e00\u4e9b\u5386\u53f2\u9650\u5236\u6ca1\u6765\u5f97\u53ca\u4fee\u6539\uff0c\u5728 vmlinux.lds.S \u4e2d\u6709 #include \"defs.h\" \uff0c\u7136\u540e\u4e4b\u524d\u53c8\u6ca1\u6709\u63d0\u9192\u540c\u5b66\u4e0d\u8981\u5728 defs.h \u91cc\u9762\u6dfb\u52a0\u4e1c\u897f\uff0c\u5bfc\u81f4\u5728 defs.h \u4e2d\u6dfb\u52a0\u7684\u5185\u5bb9\u963b\u788d\u4e86 vmlinux.lds \u7684\u6b63\u786e\u751f\u6210\u3002\u4e00\u4e2a\u53ef\u884c\u7684\u505a\u6cd5\u662f\u5c06 defs.h \u4e2d\u9664\u4e86\u5b8f\u5b9a\u4e49\u4ee5\u5916\u7684\u90e8\u5206\u5168\u90e8\u53bb\u9664\uff08\u5305\u62ec\u5b8finclude\uff09\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u53bb\u6389\u7684\u90e8\u5206\u6dfb\u52a0\u5230\u5176\u4ed6\u7684\u5934\u6587\u4ef6\u91cc\u4ee5\u4f9b\u4f7f\u7528\u3002","title":"11 \u4e3a\u4ec0\u4e48\u5728 vmlinux.lds.S \u4e2d\u4f1a #include \"types.h\"?"},{"location":"faq/#12-uapp","text":"\u56e0\u4e3a\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u4e0d\u51c6\u5907\u5f15\u5165\u78c1\u76d8\u9a71\u52a8\uff0c\u6240\u4ee5\u5c06\u5185\u5b58\u7684\u4e00\u90e8\u5206\u4f5c\u4e3a ramdisk , \u4e5f\u5c31\u662f\u8bf4\u6709\u4e00\u6bb5\u5185\u5b58\u88ab\u6211\u4eec\u5f53\u6210\u4e86\u786c\u76d8\u3002\u8fd9\u6bb5\u5185\u5b58\u5c31\u662f\u4ece uapp_start \u5230 uapp_end \u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u50cf\u64cd\u4f5c\u78c1\u76d8\u4e00\u6837\u64cd\u4f5c\u8fd9\u6bb5\u5185\u5b58\u3002\u5728\u8fd0\u884c\u78c1\u76d8\u4e0a\u7684\u7a0b\u5e8f\u524d\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u62f7\u8d1d\u5230\u6211\u4eec\u4e3a\u7a0b\u5e8f\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4f9d\u7167 Elf Header \u7684\u8981\u6c42\u6620\u5c04\u5230\u7528\u6237\u80fd\u8bbf\u95ee\u7684\u5730\u5740\u7a7a\u95f4\u3002\u8fd9\u65f6\u5019\u7528\u6237\u5c31\u80fd\u8bbf\u95ee\u6211\u4eec\u4ece\u78c1\u76d8\u62f7\u8d1d\u5230\u5185\u5b58\u4e2d\u7684\u6570\u636e\u548c\u4ee3\u7801\u4e86\u3002","title":"12 uapp \u660e\u660e\u5df2\u7ecf\u5728\u5185\u5b58\u91cc\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u88ab\u62f7\u8d1d\u4e00\u6b21\u624d\u80fd\u8fd0\u884c\uff1f"},{"location":"lab0/","text":"Lab 0: GDB & QEMU \u8c03\u8bd5 64 \u4f4d RISC-V LINUX 1 \u5b9e\u9a8c\u76ee\u7684 \u4f7f\u7528\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177, \u5b8c\u6210Linux\u5185\u6838\u4ee3\u7801\u7f16\u8bd1 \u4f7f\u7528QEMU\u8fd0\u884c\u5185\u6838 \u719f\u6089GDB\u548cQEMU\u8054\u5408\u8c03\u8bd5 2 \u5b9e\u9a8c\u73af\u5883 Ubuntu 22.04.1 LTS Ubuntu 22.04.1 LTS Windows Subsystem for Linux 2 Mac with Apple Silicon \u5176\u4ed6\u53ef\u884c\u7684\u5e73\u53f0\uff0c\u4f46\u6211\u4eec\u4e0d\u63d0\u4f9b\u6280\u672f\u652f\u6301 3 \u5b9e\u9a8c\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd 3.1 Linux \u4f7f\u7528\u57fa\u7840 \u5728 Linux \u73af\u5883\u4e0b\uff0c\u4eba\u4eec\u901a\u5e38\u4f7f\u7528\u547d\u4ee4\u884c\u63a5\u53e3\u6765\u5b8c\u6210\u4e0e\u8ba1\u7b97\u673a\u7684\u4ea4\u4e92\u3002\u7ec8\u7aef\uff08Terminal\uff09\u662f\u7528\u4e8e\u5904\u7406\u8be5\u8fc7\u7a0b\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u901a\u8fc7\u7ec8\u7aef\u4f60\u53ef\u4ee5\u8fd0\u884c\u5404\u79cd\u7a0b\u5e8f\u4ee5\u53ca\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u5904\u7406\u6587\u4ef6\u3002\u5728\u7c7b Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u7ec8\u7aef\u53ef\u4ee5\u4e3a\u4f60\u5b8c\u6210\u4e00\u5207\u4f60\u6240\u9700\u8981\u7684\u64cd\u4f5c\u3002\u4e0b\u9762\u6211\u4eec\u4ec5\u5bf9\u5b9e\u9a8c\u4e2d\u6d89\u53ca\u7684\u4e00\u4e9b\u6982\u5ff5\u8fdb\u884c\u4ecb\u7ecd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u94fe\u63a5\u6765\u5bf9\u547d\u4ee4\u884c\u7684\u4f7f\u7528\u8fdb\u884c\u5b66\u4e60\uff1a The Missing Semester of Your CS Education >>Video<< GNU/Linux Command-Line Tools Summary Basics of UNIX 3.2 QEMU \u4f7f\u7528\u57fa\u7840 \u4ec0\u4e48\u662fQEMU QEMU \u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u6a21\u62df\u5668\uff0c\u53ef\u4ee5\u5728 x86 \u5e73\u53f0\u4e0a\u6267\u884c\u4e0d\u540c\u67b6\u6784\u4e0b\u7684\u7a0b\u5e8f\u3002\u6211\u4eec\u5b9e\u9a8c\u4e2d\u91c7\u7528 QEMU \u6765\u5b8c\u6210 RISC-V \u67b6\u6784\u7684\u7a0b\u5e8f\u7684\u6a21\u62df\u3002 \u5982\u4f55\u4f7f\u7528 QEMU\uff08\u5e38\u89c1\u53c2\u6570\u4ecb\u7ecd\uff09 \u4ee5\u4ee5\u4e0b\u547d\u4ee4\u4e3a\u4f8b\uff0c\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd QEMU \u7684\u53c2\u6570\u6240\u4ee3\u8868\u7684\u542b\u4e49 1 2 3 4 5 6 7 8 9 $ qemu-system-riscv64 \\ -nographic \\ -machine virt \\ -kernel path/to/linux/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 \\ -append \"root=/dev/vda ro console=ttyS0\" \\ -bios default \\ -drive file = rootfs.img,format = raw,id = hd0 \\ -S -s -nographic : \u4e0d\u4f7f\u7528\u56fe\u5f62\u7a97\u53e3\uff0c\u4f7f\u7528\u547d\u4ee4\u884c -machine : \u6307\u5b9a\u8981 emulate \u7684\u673a\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 qemu-system-riscv64 -machine help \u67e5\u770b\u53ef\u9009\u62e9\u7684\u673a\u5668\u9009\u9879 -kernel : \u6307\u5b9a\u5185\u6838 image -append cmdline : \u4f7f\u7528cmdline\u4f5c\u4e3a\u5185\u6838\u7684\u547d\u4ee4\u884c -device : \u6307\u5b9a\u8981\u6a21\u62df\u7684\u8bbe\u5907\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 qemu-system-riscv64 -device help \u67e5\u770b\u53ef\u9009\u62e9\u7684\u8bbe\u5907\uff0c\u901a\u8fc7\u547d\u4ee4 qemu-system-riscv64 -device <\u5177\u4f53\u7684\u8bbe\u5907>,help \u67e5\u770b\u67d0\u4e2a\u8bbe\u5907\u7684\u547d\u4ee4\u9009\u9879 -drive, file=<file_name> : \u4f7f\u7528 file_name \u4f5c\u4e3a\u6587\u4ef6\u7cfb\u7edf -S : \u542f\u52a8\u65f6\u6682\u505cCPU\u6267\u884c -s : -gdb tcp::1234 \u7684\u7b80\u5199 -bios default : \u4f7f\u7528\u9ed8\u8ba4\u7684 OpenSBI firmware \u4f5c\u4e3a bootloader \u66f4\u591a\u53c2\u6570\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc 3.3 GDB \u4f7f\u7528\u57fa\u7840 \u4ec0\u4e48\u662f GDB GNU \u8c03\u8bd5\u5668\uff08\u82f1\u8bed\uff1aGNU Debugger\uff0c\u7f29\u5199\uff1agdb\uff09\u662f\u4e00\u4e2a\u7531 GNU \u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX \u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002\u501f\u52a9\u8c03\u8bd5\u5668\uff0c\u6211\u4eec\u80fd\u591f\u67e5\u770b\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\u5b9e\u9645\u5728\u505a\u4ec0\u4e48\uff08\u6bd4\u5982\u8bbf\u95ee\u54ea\u4e9b\u5185\u5b58\u3001\u5bc4\u5b58\u5668\uff09\uff0c\u5728\u5176\u4ed6\u7a0b\u5e8f\u5d29\u6e83\u7684\u65f6\u5019\u53ef\u4ee5\u6bd4\u8f83\u5feb\u901f\u5730\u4e86\u89e3\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u539f\u56e0\u3002 \u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f\u53ef\u4ee5\u548c GDB \u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u5e76\u7531 GDB \u63a7\u5236\uff08\u672c\u5730\u8c03\u8bd5 native debug\uff09\u3002\u4e5f\u53ef\u4ee5\u53ea\u548c gdb-server \u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u7531\u8fde\u63a5\u7740 gdb-server \u7684 GDB \u8fdb\u884c\u63a7\u5236\uff08\u8fdc\u7a0b\u8c03\u8bd5 remote debug\uff09\u3002 GDB \u7684\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0c\u6211\u4eec\u7ecf\u5e38\u5728\u8c03\u8bd5\u4e2d\u7528\u5230\u7684\u6709: \u542f\u52a8\u7a0b\u5e8f\uff0c\u5e76\u6307\u5b9a\u53ef\u80fd\u5f71\u54cd\u5176\u884c\u4e3a\u7684\u6240\u6709\u5185\u5bb9 \u4f7f\u7a0b\u5e8f\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u505c\u6b62 \u68c0\u67e5\u7a0b\u5e8f\u505c\u6b62\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48 \u66f4\u6539\u7a0b\u5e8f\u4e2d\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u7ea0\u6b63\u4e00\u4e2abug\u7684\u5f71\u54cd GDB \u57fa\u672c\u547d\u4ee4\u4ecb\u7ecd (gdb) layout asm : \u663e\u793a\u6c47\u7f16\u4ee3\u7801 (gdb) start : \u5355\u6b65\u6267\u884c\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u505c\u5728\u7b2c\u4e00\u6267\u884c\u8bed\u53e5 (gdb) continue : \u4ece\u65ad\u70b9\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u7b80\u5199 c (gdb) next : \u5355\u6b65\u8c03\u8bd5\uff08\u9010\u8fc7\u7a0b\uff0c\u51fd\u6570\u76f4\u63a5\u6267\u884c\uff09\uff0c\u7b80\u5199 n (gdb) step instruction : \u6267\u884c\u5355\u6761\u6307\u4ee4\uff0c\u7b80\u5199 si (gdb) run : \u91cd\u65b0\u5f00\u59cb\u8fd0\u884c\u6587\u4ef6\uff08run-text\uff1a\u52a0\u8f7d\u6587\u672c\u6587\u4ef6\uff0crun-bin\uff1a\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\uff09\uff0c\u7b80\u5199 r (gdb) backtrace \uff1a\u67e5\u770b\u51fd\u6570\u7684\u8c03\u7528\u7684\u6808\u5e27\u548c\u5c42\u7ea7\u5173\u7cfb\uff0c\u7b80\u5199 bt (gdb) break \u8bbe\u7f6e\u65ad\u70b9\uff0c\u7b80\u5199 b \u65ad\u5728 foo \u51fd\u6570\uff1a b foo \u65ad\u5728\u67d0\u5730\u5740: b * 0x80200000 (gdb) finish : \u7ed3\u675f\u5f53\u524d\u51fd\u6570\uff0c\u8fd4\u56de\u5230\u51fd\u6570\u8c03\u7528\u70b9 (gdb) frame : \u5207\u6362\u51fd\u6570\u7684\u6808\u5e27\uff0c\u7b80\u5199 f (gdb) print : \u6253\u5370\u503c\u53ca\u5730\u5740\uff0c\u7b80\u5199 p (gdb) info : \u67e5\u770b\u51fd\u6570\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u7684\u6570\u503c\uff0c\u7b80\u5199 i \u67e5\u770b\u5bc4\u5b58\u5668 ra \u7684\u503c: i r ra (gdb) display : \u8ffd\u8e2a\u67e5\u770b\u5177\u4f53\u53d8\u91cf\u503c (gdb) x/4x <addr> : \u4ee5 16 \u8fdb\u5236\u6253\u5370 <addr> \u5904\u5f00\u59cb\u7684 16 Bytes \u5185\u5bb9 \u66f4\u591a\u547d\u4ee4\u53ef\u4ee5\u53c2\u8003 100\u4e2agdb\u5c0f\u6280\u5de7 3.4 Linux \u5185\u6838\u7f16\u8bd1\u57fa\u7840 \u4ea4\u53c9\u7f16\u8bd1 \u4ea4\u53c9\u7f16\u8bd1\u6307\u7684\u662f\u5728\u4e00\u4e2a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u67b6\u6784\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002\u4f8b\u5982\u5728 x86 \u673a\u5668\u4e0a\u7f16\u8bd1\u53ef\u4ee5\u5728 RISC-V \u67b6\u6784\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u4ea4\u53c9\u7f16\u8bd1\u9700\u8981\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u7684\u652f\u6301\uff0c\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u4e2d\u6240\u7528\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u5c31\u662f riscv-gnu-toolchain \u3002 \u5185\u6838\u914d\u7f6e \u5185\u6838\u914d\u7f6e\u662f\u7528\u4e8e\u914d\u7f6e\u662f\u5426\u542f\u7528\u5185\u6838\u7684\u5404\u9879\u7279\u6027\uff0c\u5185\u6838\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a defconfig (\u5373default configuration) \u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u8be5\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e\u5404\u4e2a\u67b6\u6784\u76ee\u5f55\u7684 configs \u6587\u4ef6\u5939\u4e0b\uff0c\u4f8b\u5982\u5bf9\u4e8eRISC-V\u800c\u8a00\uff0c\u5176\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4e3a arch/riscv/configs/defconfig \u3002\u4f7f\u7528 make ARCH=riscv defconfig \u547d\u4ee4\u53ef\u4ee5\u5728\u5185\u6838\u6839\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u540d\u4e3a .config \u7684\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u5185\u6838\u5b8c\u6574\u7684\u914d\u7f6e\uff0c\u5185\u6838\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e .config \u8fdb\u884c\u7f16\u8bd1\u3002 \u914d\u7f6e\u4e4b\u95f4\u5b58\u5728\u76f8\u4e92\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u76f4\u63a5\u4fee\u6539defconfig\u6587\u4ef6\u6216\u8005 .config \u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u8fbe\u5230\u60f3\u8981\u7684\u6548\u679c\uff0c\u6216\u662f\u7ed9\u8fdb\u4e00\u6b65\u5185\u6838\u914d\u7f6e\u5e26\u6765\u540c\u6b65\u95ee\u9898\u3002\u56e0\u6b64\u5982\u679c\u9700\u8981\u4fee\u6539\u914d\u7f6e\u4e00\u822c\u91c7\u7528 make ARCH=riscv menuconfig \u7684\u65b9\u5f0f\u5bf9\u5185\u6838\u8fdb\u884c\u914d\u7f6e\u3002 \u7f16\u8bd1\u5de5\u5177 make \u662f\u7528\u4e8e\u7a0b\u5e8f\u6784\u5efa\u7684\u91cd\u8981\u5de5\u5177\uff0c\u5b83\u7684\u884c\u4e3a\u7531\u5f53\u524d\u76ee\u5f55\u6216 make -C \u6307\u5b9a\u76ee\u5f55\u4e0b\u7684 Makefile \u6765\u51b3\u5b9a\u3002\u66f4\u591a\u6709\u5173 Makefile \u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 Learn Makefiles With the tastiest examples \u3002\u4e0b\u9762\u7528\u672c\u6b21\u5b9e\u9a8c\u4e2d\u53ef\u80fd\u7528\u5230\u7684\u7528\u4e8e\u7f16\u8bd1 Linux \u5185\u6838\u7684\u7f16\u8bd1\u547d\u4ee4\u4f5c\u4e3a\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ make help # \u67e5\u770bmake\u547d\u4ee4\u7684\u5404\u79cd\u53c2\u6570\u89e3\u91ca $ make <target-name> # \u7f16\u8bd1\u540d\u4e3a <target-name> \u7684\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u6807\u4efb\u52a1 $ make defconfig # \u4f7f\u7528\u5f53\u524d\u5e73\u53f0\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5728x86\u673a\u5668\u4e0a\u4f1a\u4f7f\u7528x86\u7684\u9ed8\u8ba4\u914d\u7f6e $ make clean # \u6e05\u9664\u6240\u6709\u7f16\u8bd1\u597d\u7684 object \u6587\u4ef6 $ make mrproper # \u5220\u9664\u6240\u6709\u7f16\u8bd1\u4ea7\u7269\u548c\u914d\u7f6e\u6587\u4ef6 $ make -j<thread-count> # \u4f7f\u7528 <thread-count> \u4e2a\u7269\u7406\u7ebf\u7a0b\u6765\u8fdb\u884c\u591a\u7ebf\u7a0b\u7f16\u8bd1 $ make -j4 # \u7f16\u8bd1\u5f53\u524d\u5e73\u53f0\u7684\u5185\u6838\uff0c-j4 \u4e3a\u4f7f\u7528 4 \u7ebf\u7a0b\u8fdb\u884c\u591a\u7ebf\u7a0b\u7f16\u8bd1 $ make -j $( nproc ) # \u7f16\u8bd1\u5f53\u524d\u5e73\u53f0\u7684\u5185\u6838\uff0c-j$(nproc) \u4e3a\u4ee5\u5168\u90e8\u673a\u5668\u786c\u4ef6\u7ebf\u7a0b\u6570\u8fdb\u884c\u591a\u7ebf\u7a0b\u7f16\u8bd1 $ make <var-name> = <var-value> # \u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c06 <var-name> \u53d8\u91cf\u7684\u503c\u624b\u52a8\u8bbe\u7f6e\u4e3a <val-value> $ make ARCH = riscv defconfig # \u4f7f\u7528 RISC-V \u5e73\u53f0\u7684\u9ed8\u8ba4\u914d\u7f6e $ make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- # \u7f16\u8bd1 RISC-V \u5e73\u53f0\u5185\u6838 \u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u4e3a make \u6307\u5b9a\u53d8\u91cf\u7684\u503c\uff0c\u672c\u6b21\u5b9e\u9a8c\u4e2d\u7528\u5230\u7684\u5982\u4e0b\uff1a ARCH \u6307\u5b9a\u67b6\u6784\uff0c\u53ef\u9009\u7684\u503c\u5305\u62ec arch \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5939\u540d\uff0c\u5982 x86\u3001arm\u3001arm64 \u7b49\uff0c\u4e0d\u540c\u4e8e arm \u548c arm64\uff0c32 \u4f4d\u548c 64 \u4f4d\u7684RISC-V\u5171\u7528 arch/riscv \u76ee\u5f55\uff0c\u901a\u8fc7\u4f7f\u7528\u4e0d\u540c\u7684 config \u53ef\u4ee5\u7f16\u8bd1 32 \u4f4d\u6216 64 \u4f4d\u7684\u5185\u6838\u3002 CROSS_COMPILE \u6307\u5b9a\u4f7f\u7528\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\uff0c\u4f8b\u5982\u6307\u5b9a CROSS_COMPILE=riscv64-linux-gnu- \uff0c\u5219\u7f16\u8bd1\u65f6\u4f1a\u91c7\u7528 riscv64-linux-gnu-gcc \u4f5c\u4e3a\u7f16\u8bd1\u5668\uff0c\u7f16\u8bd1\u5728 RISC-V 64 \u4f4d\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684 Linux \u5185\u6838\u3002 4 \u5b9e\u9a8c\u6b65\u9aa4 \u5728\u6267\u884c\u6bcf\u4e00\u6761\u547d\u4ee4\u524d\uff0c\u8bf7\u4f60\u5bf9\u5c06\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u8fdb\u884c\u601d\u8003\uff0c\u7ed9\u51fa\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u5168\u90e8\u6267\u884c\uff0c\u5e76\u4e14\u4e0d\u662f\u6240\u6709\u7684\u547d\u4ee4\u90fd\u53ef\u4ee5\u65e0\u6761\u4ef6\u6267\u884c\uff0c\u8bf7\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u547d\u4ee4\u53bb\u6267\u884c\u3002 4.1 \u642d\u5efa\u5b9e\u9a8c\u73af\u5883\u73af\u5883 \u5982\u679c\u4f60\u5728\u4f7f\u7528 Mac with Apple Silicon, \u8bf7\u76f4\u63a5\u4f7f\u7528 Docker Desktop \u8fdb\u884c\u8bfe\u7a0b\u5b9e\u9a8c\u3002 Docker Desktop \u7684\u5b89\u88c5\u53ef\u4ee5\u53c2\u8003 Docker Desktop for Apple silicon \u3002 \u4e4b\u540e\u4f7f\u7528 docker pull ubuntu:22.04 && docker run -it --name <some-name> ubuntu:22.04 bash \u6765\u542f\u52a8\u4e00\u4e2a\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\u7684 Ubuntu for ARM \u5bb9\u5668\uff0c\u5e76\u5c06\u8fd9\u4e2a Ubuntu \u4f5c\u4e3a\u5b9e\u9a8c\u73af\u5883\u3002 \u9996\u5148\u5b89\u88c5\u7f16\u8bd1\u5185\u6838\u6240\u9700\u8981\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u548c\u7528\u4e8e\u6784\u5efa\u7a0b\u5e8f\u7684\u8f6f\u4ef6\u5305 1 2 3 4 $ sudo apt install gcc-riscv64-linux-gnu $ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \\ gawk build-essential bison flex texinfo gperf libtool patchutils bc \\ zlib1g-dev libexpat-dev git \u63a5\u7740\u662f\u7528\u4e8e\u542f\u52a8 riscv64 \u5e73\u53f0\u4e0a\u7684\u5185\u6838\u7684\u6a21\u62df\u5668 qemu 1 $ sudo apt install qemu-system-misc \u6211\u4eec\u8fd8\u9700\u8981\u7528 gdb \u6765\u5bf9\u5728 qemu \u4e0a\u8fd0\u884c\u7684 Linux \u5185\u6838\u8fdb\u884c\u8c03\u8bd5 1 $ sudo apt install gdb-multiarch 4.2 \u83b7\u53d6 Linux \u6e90\u7801\u548c\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\u7cfb\u7edf \u4ece https://www.kernel.org \u4e0b\u8f7d\u6700\u65b0\u7684 Linux \u6e90\u7801\u3002 \u622a\u81f3\u5199\u4f5c\u65f6\uff0c\u6700\u65b0\u7684 Linux \u5185\u6838\u7248\u672c\u662f 6.0rc5. \u5e76\u4e14\u4f7f\u7528 git \u5de5\u5177 clone \u672c\u4ed3\u5e93 \u3002\u5176\u4e2d\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u955c\u50cf\u3002 \u6839\u6587\u4ef6\u7cfb\u7edf\u4e3a Linux Kernel \u63d0\u4f9b\u4e86\u57fa\u7840\u7684\u6587\u4ef6\u670d\u52a1\uff0c\u5728\u542f\u52a8 Linux Kernel \u65f6\u662f\u5fc5\u8981\u7684\u3002 1 2 3 4 $ git clone https://gitee.com/zjusec/os22fall-stu $ cd os22fall-stu/src/lab0 $ ls rootfs.img # \u5df2\u7ecf\u6784\u5efa\u5b8c\u6210\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u955c\u50cf 4.3 \u7f16\u8bd1 linux \u5185\u6838 1 2 3 $ cd path/to/linux $ make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- defconfig # \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e $ make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- -j $( nproc ) # \u7f16\u8bd1 \u4f7f\u7528\u591a\u7ebf\u7a0b\u7f16\u8bd1\u4e00\u822c\u4f1a\u8017\u8d39\u5927\u91cf\u5185\u5b58\uff0c\u5982\u679c -j \u9009\u9879\u5bfc\u81f4\u5185\u5b58\u8017\u5c3d (out of memory)\uff0c\u8bf7\u5c1d\u8bd5\u8c03\u4f4e\u7ebf\u7a0b\u6570\uff0c\u6bd4\u5982 -j4 , -j8 \u7b49\u3002 4.4 \u4f7f\u7528QEMU\u8fd0\u884c\u5185\u6838 1 2 3 $ qemu-system-riscv64 -nographic -machine virt -kernel path/to/linux/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 -append \"root=/dev/vda ro console=ttyS0\" \\ -bios default -drive file = path/to/rootfs.img,format = raw,id = hd0 \u9000\u51fa QEMU \u7684\u65b9\u6cd5\u4e3a\uff1a\u4f7f\u7528 Ctrl+A\uff0c \u677e\u5f00 \u540e\u518d\u6309\u4e0b X \u952e\u5373\u53ef\u9000\u51fa QEMU\u3002 4.5 \u4f7f\u7528 GDB \u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5 \u8fd9\u4e00\u6b65\u9700\u8981\u5f00\u542f\u4e24\u4e2a Terminal Session\uff0c\u4e00\u4e2a Terminal \u4f7f\u7528 QEMU \u542f\u52a8 Linux\uff0c\u53e6\u4e00\u4e2a Terminal \u4f7f\u7528 GDB \u4e0e QEMU \u8fdc\u7a0b\u901a\u4fe1\uff08\u4f7f\u7528 tcp::1234 \u7aef\u53e3\uff09\u8fdb\u884c\u8c03\u8bd5\u3002 1 2 3 4 5 6 7 8 9 10 11 # Terminal 1 $ qemu-system-riscv64 -nographic -machine virt -kernel path/to/linux/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 -append \"root=/dev/vda ro console=ttyS0\" \\ -bios default -drive file = path/to/rootfs.img,format = raw,id = hd0 -S -s # Terminal 2 $ gdb-multiarch path/to/linux/vmlinux ( gdb ) target remote :1234 # \u8fde\u63a5 qemu ( gdb ) b start_kernel # \u8bbe\u7f6e\u65ad\u70b9 ( gdb ) continue # \u7ee7\u7eed\u6267\u884c ( gdb ) quit # \u9000\u51fa gdb 5 \u5b9e\u9a8c\u4efb\u52a1\u4e0e\u8981\u6c42 \u8bf7\u5404\u4f4d\u540c\u5b66\u72ec\u7acb\u5b8c\u6210\u4f5c\u4e1a\uff0c\u4efb\u4f55\u6284\u88ad\u884c\u4e3a\u90fd\u5c06\u4f7f\u672c\u6b21\u4f5c\u4e1a\u5224\u4e3a0\u5206\u3002 \u7f16\u8bd1\u5185\u6838\uff0c\u4f7f\u7528 QEMU \u542f\u52a8\u540e\uff0c\u8fdc\u7a0b\u8fde\u63a5 GDB \u8fdb\u884c\u8c03\u8bd5\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528 GDB \u7684\u5404\u9879\u547d\u4ee4\uff08\u5982 backtrace , finish , frame , info , break , display , next , layout \u7b49\uff09\u3002 \u5728\u5b66\u5728\u6d59\u5927\u4e2d\u63d0\u4ea4 pdf \u683c\u5f0f\u7684\u5b9e\u9a8c\u62a5\u544a\uff0c\u8bb0\u5f55\u5b9e\u9a8c\u8fc7\u7a0b\u5e76\u622a\u56fe\uff084.1-4.4\uff09\uff0c\u5bf9\u6bcf\u4e00\u6b65\u7684\u547d\u4ee4\u4ee5\u53ca\u7ed3\u679c\u8fdb\u884c\u5fc5\u8981\u7684\u89e3\u91ca\uff0c\u8bb0\u5f55\u9047\u5230\u7684\u95ee\u9898\u548c\u5fc3\u5f97\u4f53\u4f1a\u3002 \u601d\u8003\u9898 \u4f7f\u7528 riscv64-linux-gnu-gcc \u7f16\u8bd1\u5355\u4e2a .c \u6587\u4ef6 \u4f7f\u7528 riscv64-linux-gnu-objdump \u53cd\u6c47\u7f16 1 \u4e2d\u5f97\u5230\u7684\u7f16\u8bd1\u4ea7\u7269 \u8c03\u8bd5 Linux \u65f6: \u5728 GDB \u4e2d\u67e5\u770b\u6c47\u7f16\u4ee3\u7801 \u5728 0x80000000 \u5904\u4e0b\u65ad\u70b9 \u67e5\u770b\u6240\u6709\u5df2\u4e0b\u7684\u65ad\u70b9 \u5728 0x80200000 \u5904\u4e0b\u65ad\u70b9 \u6e05\u9664 0x80000000 \u5904\u7684\u65ad\u70b9 \u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u89e6\u53d1 0x80200000 \u5904\u7684\u65ad\u70b9 \u5355\u6b65\u8c03\u8bd5\u4e00\u6b21 \u9000\u51fa QEMU \u4f7f\u7528 make \u5de5\u5177\u6e05\u9664 Linux \u7684\u6784\u5efa\u4ea7\u7269 vmlinux \u548c Image \u7684\u5173\u7cfb\u548c\u533a\u522b\u662f\u4ec0\u4e48\uff1f","title":"\u5b9e\u9a8c\u6307\u5bfc\u96f6"},{"location":"lab0/#lab-0-gdb-qemu-64-risc-v-linux","text":"","title":"Lab 0: GDB &amp; QEMU \u8c03\u8bd5 64 \u4f4d RISC-V LINUX"},{"location":"lab0/#1","text":"\u4f7f\u7528\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177, \u5b8c\u6210Linux\u5185\u6838\u4ee3\u7801\u7f16\u8bd1 \u4f7f\u7528QEMU\u8fd0\u884c\u5185\u6838 \u719f\u6089GDB\u548cQEMU\u8054\u5408\u8c03\u8bd5","title":"1 \u5b9e\u9a8c\u76ee\u7684"},{"location":"lab0/#2","text":"Ubuntu 22.04.1 LTS Ubuntu 22.04.1 LTS Windows Subsystem for Linux 2 Mac with Apple Silicon \u5176\u4ed6\u53ef\u884c\u7684\u5e73\u53f0\uff0c\u4f46\u6211\u4eec\u4e0d\u63d0\u4f9b\u6280\u672f\u652f\u6301","title":"2 \u5b9e\u9a8c\u73af\u5883"},{"location":"lab0/#3","text":"","title":"3 \u5b9e\u9a8c\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd"},{"location":"lab0/#31-linux","text":"\u5728 Linux \u73af\u5883\u4e0b\uff0c\u4eba\u4eec\u901a\u5e38\u4f7f\u7528\u547d\u4ee4\u884c\u63a5\u53e3\u6765\u5b8c\u6210\u4e0e\u8ba1\u7b97\u673a\u7684\u4ea4\u4e92\u3002\u7ec8\u7aef\uff08Terminal\uff09\u662f\u7528\u4e8e\u5904\u7406\u8be5\u8fc7\u7a0b\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u901a\u8fc7\u7ec8\u7aef\u4f60\u53ef\u4ee5\u8fd0\u884c\u5404\u79cd\u7a0b\u5e8f\u4ee5\u53ca\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u5904\u7406\u6587\u4ef6\u3002\u5728\u7c7b Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u7ec8\u7aef\u53ef\u4ee5\u4e3a\u4f60\u5b8c\u6210\u4e00\u5207\u4f60\u6240\u9700\u8981\u7684\u64cd\u4f5c\u3002\u4e0b\u9762\u6211\u4eec\u4ec5\u5bf9\u5b9e\u9a8c\u4e2d\u6d89\u53ca\u7684\u4e00\u4e9b\u6982\u5ff5\u8fdb\u884c\u4ecb\u7ecd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u94fe\u63a5\u6765\u5bf9\u547d\u4ee4\u884c\u7684\u4f7f\u7528\u8fdb\u884c\u5b66\u4e60\uff1a The Missing Semester of Your CS Education >>Video<< GNU/Linux Command-Line Tools Summary Basics of UNIX","title":"3.1 Linux \u4f7f\u7528\u57fa\u7840"},{"location":"lab0/#32-qemu","text":"","title":"3.2 QEMU \u4f7f\u7528\u57fa\u7840"},{"location":"lab0/#qemu","text":"QEMU \u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u6a21\u62df\u5668\uff0c\u53ef\u4ee5\u5728 x86 \u5e73\u53f0\u4e0a\u6267\u884c\u4e0d\u540c\u67b6\u6784\u4e0b\u7684\u7a0b\u5e8f\u3002\u6211\u4eec\u5b9e\u9a8c\u4e2d\u91c7\u7528 QEMU \u6765\u5b8c\u6210 RISC-V \u67b6\u6784\u7684\u7a0b\u5e8f\u7684\u6a21\u62df\u3002","title":"\u4ec0\u4e48\u662fQEMU"},{"location":"lab0/#qemu_1","text":"\u4ee5\u4ee5\u4e0b\u547d\u4ee4\u4e3a\u4f8b\uff0c\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd QEMU \u7684\u53c2\u6570\u6240\u4ee3\u8868\u7684\u542b\u4e49 1 2 3 4 5 6 7 8 9 $ qemu-system-riscv64 \\ -nographic \\ -machine virt \\ -kernel path/to/linux/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 \\ -append \"root=/dev/vda ro console=ttyS0\" \\ -bios default \\ -drive file = rootfs.img,format = raw,id = hd0 \\ -S -s -nographic : \u4e0d\u4f7f\u7528\u56fe\u5f62\u7a97\u53e3\uff0c\u4f7f\u7528\u547d\u4ee4\u884c -machine : \u6307\u5b9a\u8981 emulate \u7684\u673a\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 qemu-system-riscv64 -machine help \u67e5\u770b\u53ef\u9009\u62e9\u7684\u673a\u5668\u9009\u9879 -kernel : \u6307\u5b9a\u5185\u6838 image -append cmdline : \u4f7f\u7528cmdline\u4f5c\u4e3a\u5185\u6838\u7684\u547d\u4ee4\u884c -device : \u6307\u5b9a\u8981\u6a21\u62df\u7684\u8bbe\u5907\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 qemu-system-riscv64 -device help \u67e5\u770b\u53ef\u9009\u62e9\u7684\u8bbe\u5907\uff0c\u901a\u8fc7\u547d\u4ee4 qemu-system-riscv64 -device <\u5177\u4f53\u7684\u8bbe\u5907>,help \u67e5\u770b\u67d0\u4e2a\u8bbe\u5907\u7684\u547d\u4ee4\u9009\u9879 -drive, file=<file_name> : \u4f7f\u7528 file_name \u4f5c\u4e3a\u6587\u4ef6\u7cfb\u7edf -S : \u542f\u52a8\u65f6\u6682\u505cCPU\u6267\u884c -s : -gdb tcp::1234 \u7684\u7b80\u5199 -bios default : \u4f7f\u7528\u9ed8\u8ba4\u7684 OpenSBI firmware \u4f5c\u4e3a bootloader \u66f4\u591a\u53c2\u6570\u4fe1\u606f\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc","title":"\u5982\u4f55\u4f7f\u7528 QEMU\uff08\u5e38\u89c1\u53c2\u6570\u4ecb\u7ecd\uff09"},{"location":"lab0/#33-gdb","text":"","title":"3.3 GDB \u4f7f\u7528\u57fa\u7840"},{"location":"lab0/#gdb","text":"GNU \u8c03\u8bd5\u5668\uff08\u82f1\u8bed\uff1aGNU Debugger\uff0c\u7f29\u5199\uff1agdb\uff09\u662f\u4e00\u4e2a\u7531 GNU \u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX \u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002\u501f\u52a9\u8c03\u8bd5\u5668\uff0c\u6211\u4eec\u80fd\u591f\u67e5\u770b\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\u5b9e\u9645\u5728\u505a\u4ec0\u4e48\uff08\u6bd4\u5982\u8bbf\u95ee\u54ea\u4e9b\u5185\u5b58\u3001\u5bc4\u5b58\u5668\uff09\uff0c\u5728\u5176\u4ed6\u7a0b\u5e8f\u5d29\u6e83\u7684\u65f6\u5019\u53ef\u4ee5\u6bd4\u8f83\u5feb\u901f\u5730\u4e86\u89e3\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u539f\u56e0\u3002 \u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f\u53ef\u4ee5\u548c GDB \u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u5e76\u7531 GDB \u63a7\u5236\uff08\u672c\u5730\u8c03\u8bd5 native debug\uff09\u3002\u4e5f\u53ef\u4ee5\u53ea\u548c gdb-server \u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u7531\u8fde\u63a5\u7740 gdb-server \u7684 GDB \u8fdb\u884c\u63a7\u5236\uff08\u8fdc\u7a0b\u8c03\u8bd5 remote debug\uff09\u3002 GDB \u7684\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0c\u6211\u4eec\u7ecf\u5e38\u5728\u8c03\u8bd5\u4e2d\u7528\u5230\u7684\u6709: \u542f\u52a8\u7a0b\u5e8f\uff0c\u5e76\u6307\u5b9a\u53ef\u80fd\u5f71\u54cd\u5176\u884c\u4e3a\u7684\u6240\u6709\u5185\u5bb9 \u4f7f\u7a0b\u5e8f\u5728\u6307\u5b9a\u6761\u4ef6\u4e0b\u505c\u6b62 \u68c0\u67e5\u7a0b\u5e8f\u505c\u6b62\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48 \u66f4\u6539\u7a0b\u5e8f\u4e2d\u7684\u5185\u5bb9\uff0c\u4ee5\u4fbf\u7ea0\u6b63\u4e00\u4e2abug\u7684\u5f71\u54cd","title":"\u4ec0\u4e48\u662f GDB"},{"location":"lab0/#gdb_1","text":"(gdb) layout asm : \u663e\u793a\u6c47\u7f16\u4ee3\u7801 (gdb) start : \u5355\u6b65\u6267\u884c\uff0c\u8fd0\u884c\u7a0b\u5e8f\uff0c\u505c\u5728\u7b2c\u4e00\u6267\u884c\u8bed\u53e5 (gdb) continue : \u4ece\u65ad\u70b9\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u7b80\u5199 c (gdb) next : \u5355\u6b65\u8c03\u8bd5\uff08\u9010\u8fc7\u7a0b\uff0c\u51fd\u6570\u76f4\u63a5\u6267\u884c\uff09\uff0c\u7b80\u5199 n (gdb) step instruction : \u6267\u884c\u5355\u6761\u6307\u4ee4\uff0c\u7b80\u5199 si (gdb) run : \u91cd\u65b0\u5f00\u59cb\u8fd0\u884c\u6587\u4ef6\uff08run-text\uff1a\u52a0\u8f7d\u6587\u672c\u6587\u4ef6\uff0crun-bin\uff1a\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\uff09\uff0c\u7b80\u5199 r (gdb) backtrace \uff1a\u67e5\u770b\u51fd\u6570\u7684\u8c03\u7528\u7684\u6808\u5e27\u548c\u5c42\u7ea7\u5173\u7cfb\uff0c\u7b80\u5199 bt (gdb) break \u8bbe\u7f6e\u65ad\u70b9\uff0c\u7b80\u5199 b \u65ad\u5728 foo \u51fd\u6570\uff1a b foo \u65ad\u5728\u67d0\u5730\u5740: b * 0x80200000 (gdb) finish : \u7ed3\u675f\u5f53\u524d\u51fd\u6570\uff0c\u8fd4\u56de\u5230\u51fd\u6570\u8c03\u7528\u70b9 (gdb) frame : \u5207\u6362\u51fd\u6570\u7684\u6808\u5e27\uff0c\u7b80\u5199 f (gdb) print : \u6253\u5370\u503c\u53ca\u5730\u5740\uff0c\u7b80\u5199 p (gdb) info : \u67e5\u770b\u51fd\u6570\u5185\u90e8\u5c40\u90e8\u53d8\u91cf\u7684\u6570\u503c\uff0c\u7b80\u5199 i \u67e5\u770b\u5bc4\u5b58\u5668 ra \u7684\u503c: i r ra (gdb) display : \u8ffd\u8e2a\u67e5\u770b\u5177\u4f53\u53d8\u91cf\u503c (gdb) x/4x <addr> : \u4ee5 16 \u8fdb\u5236\u6253\u5370 <addr> \u5904\u5f00\u59cb\u7684 16 Bytes \u5185\u5bb9 \u66f4\u591a\u547d\u4ee4\u53ef\u4ee5\u53c2\u8003 100\u4e2agdb\u5c0f\u6280\u5de7","title":"GDB \u57fa\u672c\u547d\u4ee4\u4ecb\u7ecd"},{"location":"lab0/#34-linux","text":"","title":"3.4 Linux \u5185\u6838\u7f16\u8bd1\u57fa\u7840"},{"location":"lab0/#_1","text":"\u4ea4\u53c9\u7f16\u8bd1\u6307\u7684\u662f\u5728\u4e00\u4e2a\u5e73\u53f0\u4e0a\u7f16\u8bd1\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u67b6\u6784\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002\u4f8b\u5982\u5728 x86 \u673a\u5668\u4e0a\u7f16\u8bd1\u53ef\u4ee5\u5728 RISC-V \u67b6\u6784\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u4ea4\u53c9\u7f16\u8bd1\u9700\u8981\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u7684\u652f\u6301\uff0c\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u4e2d\u6240\u7528\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u5c31\u662f riscv-gnu-toolchain \u3002","title":"\u4ea4\u53c9\u7f16\u8bd1"},{"location":"lab0/#_2","text":"\u5185\u6838\u914d\u7f6e\u662f\u7528\u4e8e\u914d\u7f6e\u662f\u5426\u542f\u7528\u5185\u6838\u7684\u5404\u9879\u7279\u6027\uff0c\u5185\u6838\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u540d\u4e3a defconfig (\u5373default configuration) \u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u8be5\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e\u5404\u4e2a\u67b6\u6784\u76ee\u5f55\u7684 configs \u6587\u4ef6\u5939\u4e0b\uff0c\u4f8b\u5982\u5bf9\u4e8eRISC-V\u800c\u8a00\uff0c\u5176\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u4e3a arch/riscv/configs/defconfig \u3002\u4f7f\u7528 make ARCH=riscv defconfig \u547d\u4ee4\u53ef\u4ee5\u5728\u5185\u6838\u6839\u76ee\u5f55\u4e0b\u751f\u6210\u4e00\u4e2a\u540d\u4e3a .config \u7684\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u5185\u6838\u5b8c\u6574\u7684\u914d\u7f6e\uff0c\u5185\u6838\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e .config \u8fdb\u884c\u7f16\u8bd1\u3002 \u914d\u7f6e\u4e4b\u95f4\u5b58\u5728\u76f8\u4e92\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u76f4\u63a5\u4fee\u6539defconfig\u6587\u4ef6\u6216\u8005 .config \u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u8fbe\u5230\u60f3\u8981\u7684\u6548\u679c\uff0c\u6216\u662f\u7ed9\u8fdb\u4e00\u6b65\u5185\u6838\u914d\u7f6e\u5e26\u6765\u540c\u6b65\u95ee\u9898\u3002\u56e0\u6b64\u5982\u679c\u9700\u8981\u4fee\u6539\u914d\u7f6e\u4e00\u822c\u91c7\u7528 make ARCH=riscv menuconfig \u7684\u65b9\u5f0f\u5bf9\u5185\u6838\u8fdb\u884c\u914d\u7f6e\u3002","title":"\u5185\u6838\u914d\u7f6e"},{"location":"lab0/#_3","text":"make \u662f\u7528\u4e8e\u7a0b\u5e8f\u6784\u5efa\u7684\u91cd\u8981\u5de5\u5177\uff0c\u5b83\u7684\u884c\u4e3a\u7531\u5f53\u524d\u76ee\u5f55\u6216 make -C \u6307\u5b9a\u76ee\u5f55\u4e0b\u7684 Makefile \u6765\u51b3\u5b9a\u3002\u66f4\u591a\u6709\u5173 Makefile \u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 Learn Makefiles With the tastiest examples \u3002\u4e0b\u9762\u7528\u672c\u6b21\u5b9e\u9a8c\u4e2d\u53ef\u80fd\u7528\u5230\u7684\u7528\u4e8e\u7f16\u8bd1 Linux \u5185\u6838\u7684\u7f16\u8bd1\u547d\u4ee4\u4f5c\u4e3a\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ make help # \u67e5\u770bmake\u547d\u4ee4\u7684\u5404\u79cd\u53c2\u6570\u89e3\u91ca $ make <target-name> # \u7f16\u8bd1\u540d\u4e3a <target-name> \u7684\u76ee\u6807\u6587\u4ef6\u6216\u76ee\u6807\u4efb\u52a1 $ make defconfig # \u4f7f\u7528\u5f53\u524d\u5e73\u53f0\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5728x86\u673a\u5668\u4e0a\u4f1a\u4f7f\u7528x86\u7684\u9ed8\u8ba4\u914d\u7f6e $ make clean # \u6e05\u9664\u6240\u6709\u7f16\u8bd1\u597d\u7684 object \u6587\u4ef6 $ make mrproper # \u5220\u9664\u6240\u6709\u7f16\u8bd1\u4ea7\u7269\u548c\u914d\u7f6e\u6587\u4ef6 $ make -j<thread-count> # \u4f7f\u7528 <thread-count> \u4e2a\u7269\u7406\u7ebf\u7a0b\u6765\u8fdb\u884c\u591a\u7ebf\u7a0b\u7f16\u8bd1 $ make -j4 # \u7f16\u8bd1\u5f53\u524d\u5e73\u53f0\u7684\u5185\u6838\uff0c-j4 \u4e3a\u4f7f\u7528 4 \u7ebf\u7a0b\u8fdb\u884c\u591a\u7ebf\u7a0b\u7f16\u8bd1 $ make -j $( nproc ) # \u7f16\u8bd1\u5f53\u524d\u5e73\u53f0\u7684\u5185\u6838\uff0c-j$(nproc) \u4e3a\u4ee5\u5168\u90e8\u673a\u5668\u786c\u4ef6\u7ebf\u7a0b\u6570\u8fdb\u884c\u591a\u7ebf\u7a0b\u7f16\u8bd1 $ make <var-name> = <var-value> # \u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c06 <var-name> \u53d8\u91cf\u7684\u503c\u624b\u52a8\u8bbe\u7f6e\u4e3a <val-value> $ make ARCH = riscv defconfig # \u4f7f\u7528 RISC-V \u5e73\u53f0\u7684\u9ed8\u8ba4\u914d\u7f6e $ make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- # \u7f16\u8bd1 RISC-V \u5e73\u53f0\u5185\u6838 \u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u4e3a make \u6307\u5b9a\u53d8\u91cf\u7684\u503c\uff0c\u672c\u6b21\u5b9e\u9a8c\u4e2d\u7528\u5230\u7684\u5982\u4e0b\uff1a ARCH \u6307\u5b9a\u67b6\u6784\uff0c\u53ef\u9009\u7684\u503c\u5305\u62ec arch \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5939\u540d\uff0c\u5982 x86\u3001arm\u3001arm64 \u7b49\uff0c\u4e0d\u540c\u4e8e arm \u548c arm64\uff0c32 \u4f4d\u548c 64 \u4f4d\u7684RISC-V\u5171\u7528 arch/riscv \u76ee\u5f55\uff0c\u901a\u8fc7\u4f7f\u7528\u4e0d\u540c\u7684 config \u53ef\u4ee5\u7f16\u8bd1 32 \u4f4d\u6216 64 \u4f4d\u7684\u5185\u6838\u3002 CROSS_COMPILE \u6307\u5b9a\u4f7f\u7528\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\uff0c\u4f8b\u5982\u6307\u5b9a CROSS_COMPILE=riscv64-linux-gnu- \uff0c\u5219\u7f16\u8bd1\u65f6\u4f1a\u91c7\u7528 riscv64-linux-gnu-gcc \u4f5c\u4e3a\u7f16\u8bd1\u5668\uff0c\u7f16\u8bd1\u5728 RISC-V 64 \u4f4d\u5e73\u53f0\u4e0a\u8fd0\u884c\u7684 Linux \u5185\u6838\u3002","title":"\u7f16\u8bd1\u5de5\u5177"},{"location":"lab0/#4","text":"\u5728\u6267\u884c\u6bcf\u4e00\u6761\u547d\u4ee4\u524d\uff0c\u8bf7\u4f60\u5bf9\u5c06\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u8fdb\u884c\u601d\u8003\uff0c\u7ed9\u51fa\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u5168\u90e8\u6267\u884c\uff0c\u5e76\u4e14\u4e0d\u662f\u6240\u6709\u7684\u547d\u4ee4\u90fd\u53ef\u4ee5\u65e0\u6761\u4ef6\u6267\u884c\uff0c\u8bf7\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u547d\u4ee4\u53bb\u6267\u884c\u3002","title":"4 \u5b9e\u9a8c\u6b65\u9aa4"},{"location":"lab0/#41","text":"\u5982\u679c\u4f60\u5728\u4f7f\u7528 Mac with Apple Silicon, \u8bf7\u76f4\u63a5\u4f7f\u7528 Docker Desktop \u8fdb\u884c\u8bfe\u7a0b\u5b9e\u9a8c\u3002 Docker Desktop \u7684\u5b89\u88c5\u53ef\u4ee5\u53c2\u8003 Docker Desktop for Apple silicon \u3002 \u4e4b\u540e\u4f7f\u7528 docker pull ubuntu:22.04 && docker run -it --name <some-name> ubuntu:22.04 bash \u6765\u542f\u52a8\u4e00\u4e2a\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\u7684 Ubuntu for ARM \u5bb9\u5668\uff0c\u5e76\u5c06\u8fd9\u4e2a Ubuntu \u4f5c\u4e3a\u5b9e\u9a8c\u73af\u5883\u3002 \u9996\u5148\u5b89\u88c5\u7f16\u8bd1\u5185\u6838\u6240\u9700\u8981\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u548c\u7528\u4e8e\u6784\u5efa\u7a0b\u5e8f\u7684\u8f6f\u4ef6\u5305 1 2 3 4 $ sudo apt install gcc-riscv64-linux-gnu $ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \\ gawk build-essential bison flex texinfo gperf libtool patchutils bc \\ zlib1g-dev libexpat-dev git \u63a5\u7740\u662f\u7528\u4e8e\u542f\u52a8 riscv64 \u5e73\u53f0\u4e0a\u7684\u5185\u6838\u7684\u6a21\u62df\u5668 qemu 1 $ sudo apt install qemu-system-misc \u6211\u4eec\u8fd8\u9700\u8981\u7528 gdb \u6765\u5bf9\u5728 qemu \u4e0a\u8fd0\u884c\u7684 Linux \u5185\u6838\u8fdb\u884c\u8c03\u8bd5 1 $ sudo apt install gdb-multiarch","title":"4.1 \u642d\u5efa\u5b9e\u9a8c\u73af\u5883\u73af\u5883"},{"location":"lab0/#42-linux","text":"\u4ece https://www.kernel.org \u4e0b\u8f7d\u6700\u65b0\u7684 Linux \u6e90\u7801\u3002 \u622a\u81f3\u5199\u4f5c\u65f6\uff0c\u6700\u65b0\u7684 Linux \u5185\u6838\u7248\u672c\u662f 6.0rc5. \u5e76\u4e14\u4f7f\u7528 git \u5de5\u5177 clone \u672c\u4ed3\u5e93 \u3002\u5176\u4e2d\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u955c\u50cf\u3002 \u6839\u6587\u4ef6\u7cfb\u7edf\u4e3a Linux Kernel \u63d0\u4f9b\u4e86\u57fa\u7840\u7684\u6587\u4ef6\u670d\u52a1\uff0c\u5728\u542f\u52a8 Linux Kernel \u65f6\u662f\u5fc5\u8981\u7684\u3002 1 2 3 4 $ git clone https://gitee.com/zjusec/os22fall-stu $ cd os22fall-stu/src/lab0 $ ls rootfs.img # \u5df2\u7ecf\u6784\u5efa\u5b8c\u6210\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\u7684\u955c\u50cf","title":"4.2 \u83b7\u53d6 Linux \u6e90\u7801\u548c\u5df2\u7ecf\u7f16\u8bd1\u597d\u7684\u6587\u4ef6\u7cfb\u7edf"},{"location":"lab0/#43-linux","text":"1 2 3 $ cd path/to/linux $ make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- defconfig # \u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e $ make ARCH = riscv CROSS_COMPILE = riscv64-linux-gnu- -j $( nproc ) # \u7f16\u8bd1 \u4f7f\u7528\u591a\u7ebf\u7a0b\u7f16\u8bd1\u4e00\u822c\u4f1a\u8017\u8d39\u5927\u91cf\u5185\u5b58\uff0c\u5982\u679c -j \u9009\u9879\u5bfc\u81f4\u5185\u5b58\u8017\u5c3d (out of memory)\uff0c\u8bf7\u5c1d\u8bd5\u8c03\u4f4e\u7ebf\u7a0b\u6570\uff0c\u6bd4\u5982 -j4 , -j8 \u7b49\u3002","title":"4.3 \u7f16\u8bd1 linux \u5185\u6838"},{"location":"lab0/#44-qemu","text":"1 2 3 $ qemu-system-riscv64 -nographic -machine virt -kernel path/to/linux/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 -append \"root=/dev/vda ro console=ttyS0\" \\ -bios default -drive file = path/to/rootfs.img,format = raw,id = hd0 \u9000\u51fa QEMU \u7684\u65b9\u6cd5\u4e3a\uff1a\u4f7f\u7528 Ctrl+A\uff0c \u677e\u5f00 \u540e\u518d\u6309\u4e0b X \u952e\u5373\u53ef\u9000\u51fa QEMU\u3002","title":"4.4 \u4f7f\u7528QEMU\u8fd0\u884c\u5185\u6838"},{"location":"lab0/#45-gdb","text":"\u8fd9\u4e00\u6b65\u9700\u8981\u5f00\u542f\u4e24\u4e2a Terminal Session\uff0c\u4e00\u4e2a Terminal \u4f7f\u7528 QEMU \u542f\u52a8 Linux\uff0c\u53e6\u4e00\u4e2a Terminal \u4f7f\u7528 GDB \u4e0e QEMU \u8fdc\u7a0b\u901a\u4fe1\uff08\u4f7f\u7528 tcp::1234 \u7aef\u53e3\uff09\u8fdb\u884c\u8c03\u8bd5\u3002 1 2 3 4 5 6 7 8 9 10 11 # Terminal 1 $ qemu-system-riscv64 -nographic -machine virt -kernel path/to/linux/arch/riscv/boot/Image \\ -device virtio-blk-device,drive = hd0 -append \"root=/dev/vda ro console=ttyS0\" \\ -bios default -drive file = path/to/rootfs.img,format = raw,id = hd0 -S -s # Terminal 2 $ gdb-multiarch path/to/linux/vmlinux ( gdb ) target remote :1234 # \u8fde\u63a5 qemu ( gdb ) b start_kernel # \u8bbe\u7f6e\u65ad\u70b9 ( gdb ) continue # \u7ee7\u7eed\u6267\u884c ( gdb ) quit # \u9000\u51fa gdb","title":"4.5 \u4f7f\u7528 GDB \u5bf9\u5185\u6838\u8fdb\u884c\u8c03\u8bd5"},{"location":"lab0/#5","text":"\u8bf7\u5404\u4f4d\u540c\u5b66\u72ec\u7acb\u5b8c\u6210\u4f5c\u4e1a\uff0c\u4efb\u4f55\u6284\u88ad\u884c\u4e3a\u90fd\u5c06\u4f7f\u672c\u6b21\u4f5c\u4e1a\u5224\u4e3a0\u5206\u3002 \u7f16\u8bd1\u5185\u6838\uff0c\u4f7f\u7528 QEMU \u542f\u52a8\u540e\uff0c\u8fdc\u7a0b\u8fde\u63a5 GDB \u8fdb\u884c\u8c03\u8bd5\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u7528 GDB \u7684\u5404\u9879\u547d\u4ee4\uff08\u5982 backtrace , finish , frame , info , break , display , next , layout \u7b49\uff09\u3002 \u5728\u5b66\u5728\u6d59\u5927\u4e2d\u63d0\u4ea4 pdf \u683c\u5f0f\u7684\u5b9e\u9a8c\u62a5\u544a\uff0c\u8bb0\u5f55\u5b9e\u9a8c\u8fc7\u7a0b\u5e76\u622a\u56fe\uff084.1-4.4\uff09\uff0c\u5bf9\u6bcf\u4e00\u6b65\u7684\u547d\u4ee4\u4ee5\u53ca\u7ed3\u679c\u8fdb\u884c\u5fc5\u8981\u7684\u89e3\u91ca\uff0c\u8bb0\u5f55\u9047\u5230\u7684\u95ee\u9898\u548c\u5fc3\u5f97\u4f53\u4f1a\u3002","title":"5 \u5b9e\u9a8c\u4efb\u52a1\u4e0e\u8981\u6c42"},{"location":"lab0/#_4","text":"\u4f7f\u7528 riscv64-linux-gnu-gcc \u7f16\u8bd1\u5355\u4e2a .c \u6587\u4ef6 \u4f7f\u7528 riscv64-linux-gnu-objdump \u53cd\u6c47\u7f16 1 \u4e2d\u5f97\u5230\u7684\u7f16\u8bd1\u4ea7\u7269 \u8c03\u8bd5 Linux \u65f6: \u5728 GDB \u4e2d\u67e5\u770b\u6c47\u7f16\u4ee3\u7801 \u5728 0x80000000 \u5904\u4e0b\u65ad\u70b9 \u67e5\u770b\u6240\u6709\u5df2\u4e0b\u7684\u65ad\u70b9 \u5728 0x80200000 \u5904\u4e0b\u65ad\u70b9 \u6e05\u9664 0x80000000 \u5904\u7684\u65ad\u70b9 \u7ee7\u7eed\u8fd0\u884c\u76f4\u5230\u89e6\u53d1 0x80200000 \u5904\u7684\u65ad\u70b9 \u5355\u6b65\u8c03\u8bd5\u4e00\u6b21 \u9000\u51fa QEMU \u4f7f\u7528 make \u5de5\u5177\u6e05\u9664 Linux \u7684\u6784\u5efa\u4ea7\u7269 vmlinux \u548c Image \u7684\u5173\u7cfb\u548c\u533a\u522b\u662f\u4ec0\u4e48\uff1f","title":"\u601d\u8003\u9898"},{"location":"lab1/","text":"Lab 1: RV64 \u5185\u6838\u5f15\u5bfc 1 \u5b9e\u9a8c\u76ee\u7684 \u5b66\u4e60 RISC-V \u6c47\u7f16\uff0c \u7f16\u5199 head.S \u5b9e\u73b0\u8df3\u8f6c\u5230\u5185\u6838\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a C \u51fd\u6570\u3002 \u5b66\u4e60 OpenSBI\uff0c\u7406\u89e3 OpenSBI \u5728\u5b9e\u9a8c\u4e2d\u6240\u8d77\u5230\u7684\u4f5c\u7528\uff0c\u5e76\u8c03\u7528 OpenSBI \u63d0\u4f9b\u7684\u63a5\u53e3\u5b8c\u6210\u5b57\u7b26\u7684\u8f93\u51fa\u3002 \u5b66\u4e60 Makefile \u76f8\u5173\u77e5\u8bc6\uff0c \u8865\u5145\u9879\u76ee\u4e2d\u7684 Makefile \u6587\u4ef6\uff0c \u6765\u5b8c\u6210\u5bf9\u6574\u4e2a\u5de5\u7a0b\u7684\u7ba1\u7406\u3002 2 \u5b9e\u9a8c\u73af\u5883 Environment in Lab0 3 \u5b9e\u9a8c\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd 3.1 \u524d\u7f6e\u77e5\u8bc6 \u4e3a\u4e86\u987a\u5229\u5b8c\u6210 OS \u5b9e\u9a8c\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6\u548c\u8f83\u591a\u8c03\u8bd5\u6280\u5de7\u3002\u5728 OS \u5b9e\u9a8c\u4e2d\u6211\u4eec\u9700\u8981 RISC-V\u6c47\u7f16 \u7684\u524d\u7f6e\u77e5\u8bc6\uff0c\u8bfe\u5802\u4e0a\u4e0d\u4f1a\u8bb2\u6388\uff0c\u8bf7\u540c\u5b66\u4eec\u901a\u8fc7\u9605\u8bfb\u4ee5\u4e0b\u56db\u4efd\u6587\u6863\u81ea\u5b66\uff1a RISC-V Assembly Programmer's Manual RISC-V Unprivileged Spec RISC-V Privileged Spec RISC-V \u624b\u518c\uff08\u4e2d\u6587\uff09 \u6ce8\uff1aRISC-V \u624b\u518c\uff08\u4e2d\u6587\uff09\u4e2d\u6709\u4e00\u4e9b Typo\uff0c\u8bf7\u8c28\u614e\u53c2\u8003\u3002 3.2 RISC-V \u7684\u4e09\u79cd\u7279\u6743\u6a21\u5f0f RISC-V \u6709\u4e09\u4e2a\u7279\u6743\u6a21\u5f0f\uff1aU (user) \u6a21\u5f0f\u3001S (supervisor) \u6a21\u5f0f\u548c M (machine) \u6a21\u5f0f\u3002 Level Encoding Name Abbreviation 0 00 User/Application U 1 01 Supervisor S 2 10 Reserved 3 11 Machine M \u5176\u4e2d\uff1a M \u6a21\u5f0f\u662f\u5bf9\u786c\u4ef6\u64cd\u4f5c\u7684\u62bd\u8c61\uff0c\u6709 \u6700\u9ad8 \u7ea7\u522b\u7684\u6743\u9650 S \u6a21\u5f0f\u4ecb\u4e8e M \u6a21\u5f0f\u548c U \u6a21\u5f0f\u4e4b\u95f4\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u5185\u6838\u6001 (Kernel)\u3002\u5f53\u7528\u6237\u9700\u8981\u5185\u6838\u8d44\u6e90\u65f6\uff0c\u5411\u5185\u6838\u7533\u8bf7\uff0c\u5e76\u5207\u6362\u5230\u5185\u6838\u6001\u8fdb\u884c\u5904\u7406 U \u6a21\u5f0f\u7528\u4e8e\u6267\u884c\u7528\u6237\u7a0b\u5e8f\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u7528\u6237\u6001\uff0c\u6709 \u6700\u4f4e \u7ea7\u522b\u7684\u6743\u9650 3.3 \u4ece\u8ba1\u7b97\u673a\u4e0a\u7535\u5230 OS \u8fd0\u884c \u6211\u4eec\u4ee5\u6700\u57fa\u7840\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u8ba1\u7b97\u673a\u4e0a\u7535\u540e\uff0c\u9996\u5148\u786c\u4ef6\u8fdb\u884c\u4e00\u4e9b\u57fa\u7840\u7684\u521d\u59cb\u5316\u540e\uff0c\u5c06 CPU \u7684 Program Counter \u79fb\u52a8\u5230\u5185\u5b58\u4e2d Bootloader \u7684\u8d77\u59cb\u5730\u5740\u3002 Bootloader \u662f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8fd0\u884c\u4e4b\u524d\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u786c\u4ef6\uff0c\u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u3002 \u5728 RISC-V \u67b6\u6784\u91cc\uff0cBootloader \u8fd0\u884c\u5728 M \u6a21\u5f0f\u4e0b\u3002Bootloader \u8fd0\u884c\u5b8c\u6bd5\u540e\u5c31\u4f1a\u628a\u5f53\u524d\u6a21\u5f0f\u5207\u6362\u5230 S \u6a21\u5f0f\u4e0b\uff0c\u673a\u5668\u968f\u540e\u5f00\u59cb\u8fd0\u884c Kernel\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u7b80\u5355\u800c\u8a00\u5c31\u662f\u8fd9\u6837\uff1a 1 2 3 4 Hardware RISC-V M Mode RISC-V S Mode +------------+ +--------------+ +----------+ | Power On | ----> | Bootloader | ----> | Kernel | +------------+ +--------------+ +----------+ 3.4 SBI \u4e0e OpenSBI SBI (Supervisor Binary Interface) \u662f S-mode \u7684 Kernel \u548c M-mode \u6267\u884c\u73af\u5883\u4e4b\u95f4\u7684\u63a5\u53e3\u89c4\u8303\uff0c\u800c OpenSBI \u662f\u4e00\u4e2a RISC-V SBI \u89c4\u8303\u7684\u5f00\u6e90\u5b9e\u73b0\u3002RISC-V \u5e73\u53f0\u548c SoC \u4f9b\u5e94\u5546\u53ef\u4ee5\u81ea\u4e3b\u6269\u5c55 OpenSBI \u5b9e\u73b0\uff0c\u4ee5\u9002\u5e94\u7279\u5b9a\u7684\u786c\u4ef6\u914d\u7f6e\u3002 \u7b80\u5355\u7684\u8bf4\uff0c\u4e3a\u4e86\u4f7f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u9002\u914d\u4e0d\u540c\u786c\u4ef6\uff0cOpenSBI \u63d0\u51fa\u4e86\u4e00\u7cfb\u5217\u89c4\u8303\u5bf9 M-mode \u4e0b\u7684\u786c\u4ef6\u8fdb\u884c\u4e86\u7edf\u4e00\u5b9a\u4e49\uff0c\u8fd0\u884c\u5728 S-mode \u4e0b\u7684\u5185\u6838\u53ef\u4ee5\u6309\u7167\u8fd9\u4e9b\u89c4\u8303\u5bf9\u4e0d\u540c\u786c\u4ef6\u8fdb\u884c\u64cd\u4f5c\u3002 \u4e3a\u964d\u4f4e\u5b9e\u9a8c\u96be\u5ea6\uff0c\u6211\u4eec\u9009\u62e9 OpenSBI \u4f5c\u4e3a Bootloader \u6765\u5b8c\u6210\u673a\u5668\u542f\u52a8\u65f6 M-mode \u4e0b\u7684\u786c\u4ef6\u521d\u59cb\u5316\u4e0e\u5bc4\u5b58\u5668\u8bbe\u7f6e\uff0c\u5e76\u4f7f\u7528 OpenSBI \u6240\u63d0\u4f9b\u7684\u63a5\u53e3\u5b8c\u6210\u8bf8\u5982\u5b57\u7b26\u6253\u5370\u7684\u64cd\u4f5c\u3002 \u5728\u5b9e\u9a8c\u4e2d\uff0cQEMU \u5df2\u7ecf\u5185\u7f6e\u4e86 OpenSBI \u4f5c\u4e3a Bootloader\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 -bios default \u542f\u7528\u3002\u5982\u679c\u542f\u7528\uff0cQEMU \u4f1a\u5c06 OpenSBI \u4ee3\u7801\u52a0\u8f7d\u5230 0x80000000 \u8d77\u59cb\u5904\u3002OpenSBI \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4f1a\u8df3\u8f6c\u5230 0x80200000 \u5904\uff08\u4e5f\u5c31\u662f Kernel \u7684\u8d77\u59cb\u5730\u5740\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6240\u7f16\u8bd1\u7684\u4ee3\u7801\u9700\u8981\u653e\u5230 0x80200000 \u5904\u3002 \u5982\u679c\u4f60\u5bf9 RISC-V \u67b6\u6784\u7684 Boot \u6d41\u7a0b\u6709\u66f4\u591a\u7684\u597d\u5947\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4efd bootflow \u3002 3.5 Makefile Makefile \u53ef\u4ee5\u7b80\u5355\u7684\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5de5\u7a0b\u6587\u4ef6\u7684\u7f16\u8bd1\u89c4\u5219\uff0c\u63cf\u8ff0\u4e86\u6574\u4e2a\u5de5\u7a0b\u7684\u7f16\u8bd1\u548c\u94fe\u63a5\u6d41\u7a0b\u3002\u5728 Lab0 \u4e2d\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 make \u5de5\u5177\u5229\u7528 Makefile \u6587\u4ef6\u6765\u7ba1\u7406\u6574\u4e2a\u5de5\u7a0b\u3002\u5728\u9605\u8bfb\u4e86 Makefile\u4ecb\u7ecd \u8fd9\u4e00\u7ae0\u8282\u540e\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u6839\u636e\u5de5\u7a0b\u6587\u4ef6\u5939\u91cc Makefile \u7684\u4ee3\u7801\u6765\u638c\u63e1\u4e00\u4e9b\u57fa\u672c\u7684\u4f7f\u7528\u6280\u5de7\u3002 3.6 \u5185\u8054\u6c47\u7f16 \u5185\u8054\u6c47\u7f16\uff08\u901a\u5e38\u7531 asm \u6216\u8005 __asm__ \u5173\u952e\u5b57\u5f15\u5165\uff09\u63d0\u4f9b\u4e86\u5c06\u6c47\u7f16\u8bed\u8a00\u6e90\u4ee3\u7801\u5d4c\u5165 C \u7a0b\u5e8f\u7684\u80fd\u529b\u3002 \u5185\u8054\u6c47\u7f16\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 Assembler Instructions with C Expression Operands \u3002 \u4e0b\u9762\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u6b21\u5b9e\u9a8c\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u5185\u8054\u6c47\u7f16\u77e5\u8bc6\uff1a \u5185\u8054\u6c47\u7f16\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 __asm__ volatile ( \"instruction1 \\n \" \"instruction2 \\n \" ...... ...... \"instruction3 \\n \" : [ out1 ] \"=r\" ( v1 ),[ out2 ] \"=r\" ( v2 ) : [ in1 ] \"r\" ( v1 ), [ in2 ] \"r\" ( v2 ) : \"memory\" ); \u5176\u4e2d\uff0c\u4e09\u4e2a : \u5c06\u6c47\u7f16\u90e8\u5206\u5206\u6210\u4e86\u56db\u90e8\u5206\uff1a \u7b2c\u4e00\u90e8\u5206\u662f\u6c47\u7f16\u6307\u4ee4\uff0c\u6307\u4ee4\u672b\u5c3e\u9700\u8981\u6dfb\u52a0 '\\n'\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f\u8f93\u51fa\u64cd\u4f5c\u6570\u90e8\u5206\u3002 \u7b2c\u4e09\u90e8\u5206\u662f\u8f93\u5165\u64cd\u4f5c\u6570\u90e8\u5206\u3002 \u7b2c\u56db\u90e8\u5206\u662f\u53ef\u80fd\u5f71\u54cd\u7684\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5668\uff0c\u7528\u4e8e\u544a\u77e5\u7f16\u8bd1\u5668\u5f53\u524d\u5185\u8054\u6c47\u7f16\u8bed\u53e5\u53ef\u80fd\u4f1a\u5bf9\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5f97\u7f16\u8bd1\u5668\u5728\u4f18\u5316\u65f6\u5c06\u5176\u56e0\u7d20\u8003\u8651\u8fdb\u53bb\u3002 \u8fd9\u56db\u90e8\u5206\u4e2d\u540e\u4e09\u90e8\u5206\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u793a\u4f8b\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 unsigned long long s_example ( unsigned long long type , unsigned long long arg0 ) { unsigned long long ret_val ; __asm__ volatile ( \"mv x10, %[type] \\n \" \"mv x11, %[arg0] \\n \" \"mv %[ret_val], x12\" : [ ret_val ] \"=r\" ( ret_val ) : [ type ] \"r\" ( type ), [ arg0 ] \"r\" ( arg0 ) : \"memory\" ); return ret_val ; } \u793a\u4f8b\u4e00\u4e2d\u6307\u4ee4\u90e8\u5206\uff0c %[type] \u3001 %[arg0] \u4ee5\u53ca %[ret_val] \u4ee3\u8868\u7740\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u6216\u662f\u5185\u5b58\u3002 \u8f93\u5165\u8f93\u51fa\u90e8\u5206\u4e2d\uff0c [type] \"r\" (type) \u4ee3\u8868\u7740\u5c06 () \u4e2d\u7684\u53d8\u91cf type \u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff08 \"r\" \u6307\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u662f \"m\" \u5219\u4e3a\u653e\u5165\u5185\u5b58\uff09\uff0c\u5e76\u4e14\u7ed1\u5b9a\u5230 [] \u4e2d\u547d\u540d\u7684\u7b26\u53f7\u4e2d\u53bb\u3002 [ret_val] \"=r\" (ret_val) \u4ee3\u8868\u7740\u5c06\u6c47\u7f16\u6307\u4ee4\u4e2d %[ret_val] \u7684\u503c\u66f4\u65b0\u5230\u53d8\u91cf ret_val \u4e2d\u3002 \u793a\u4f8b\u4e8c 1 2 #define write_csr(reg, val) ({ __asm__ volatile ( \"csrw \" # reg \", %0\" :: \"r\" ( val )); }) \u793a\u4f8b\u4e8c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5176\u4e2d %0 \u4ee3\u8868\u7740\u8f93\u51fa\u8f93\u5165\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u7b26\u53f7\uff0c\u5373 val \u3002 #reg \u662fc\u8bed\u8a00\u7684\u4e00\u4e2a\u7279\u6b8a\u5b8f\u5b9a\u4e49\u8bed\u6cd5\uff0c\u76f8\u5f53\u4e8e\u5c06reg\u8fdb\u884c\u5b8f\u66ff\u6362\u5e76\u7528\u53cc\u5f15\u53f7\u5305\u88f9\u8d77\u6765\u3002 \u4f8b\u5982 write_csr(sstatus,val) \u7ecf\u5b8f\u5c55\u5f00\u4f1a\u5f97\u5230\uff1a 1 2 ({ __asm__ volatile ( \"csrw \" \"sstatus\" \", %0\" :: \"r\" ( val )); }) 3.7 \u7f16\u8bd1\u76f8\u5173\u77e5\u8bc6\u4ecb\u7ecd vmlinux.lds GNU ld \u5373\u94fe\u63a5\u5668\uff0c\u7528\u4e8e\u5c06 *.o \u6587\u4ef6\uff08\u548c\u5e93\u6587\u4ef6\uff09\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u4e2d\uff0c\u4e3a\u4e86\u6307\u5b9a\u7a0b\u5e8f\u7684\u5185\u5b58\u5e03\u5c40\uff0cld \u4f7f\u7528\u94fe\u63a5\u811a\u672c\uff08Linker Script\uff09\u6765\u63a7\u5236\uff0c\u5728 Linux Kernel \u4e2d\u94fe\u63a5\u811a\u672c\u88ab\u547d\u540d\u4e3a vmlinux.lds\u3002\u66f4\u591a\u5173\u4e8e ld \u7684\u4ecb\u7ecd\u53ef\u4ee5\u4f7f\u7528 man ld \u547d\u4ee4\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a vmlinux.lds \u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 /* \u76ee\u6807\u67b6\u6784 */ OUTPUT_ARCH( \"riscv\" ) /* \u7a0b\u5e8f\u5165\u53e3 */ ENTRY( _start ) /* kernel\u4ee3\u7801\u8d77\u59cb\u4f4d\u7f6e */ BASE_ADDR = 0x80200000; SECTIONS { /* . \u4ee3\u8868\u5f53\u524d\u5730\u5740 */ . = BASE_ADDR; /* \u8bb0\u5f55kernel\u4ee3\u7801\u7684\u8d77\u59cb\u5730\u5740 */ _skernel = .; /* ALIGN(0x1000) \u8868\u793a4KB\u5bf9\u9f50 */ /* _stext, _etext \u5206\u522b\u8bb0\u5f55\u4e86text\u6bb5\u7684\u8d77\u59cb\u4e0e\u7ed3\u675f\u5730\u5740 */ .text : ALIGN(0x1000){ _stext = .; *(.text.entry) *(.text .text.*) _etext = .; } .rodata : ALIGN(0x1000){ _srodata = .; *(.rodata .rodata.*) _erodata = .; } .data : ALIGN(0x1000){ _sdata = .; *(.data .data.*) _edata = .; } .bss : ALIGN(0x1000){ _sbss = .; *(.bss.stack) sbss = .; *(.bss .bss.*) _ebss = .; } /* \u8bb0\u5f55kernel\u4ee3\u7801\u7684\u7ed3\u675f\u5730\u5740 */ _ekernel = .; } \u9996\u5148\u6211\u4eec\u4f7f\u7528 OUTPUT_ARCH \u6307\u5b9a\u4e86\u67b6\u6784\u4e3a RISC-V \uff0c\u4e4b\u540e\u4f7f\u7528 ENTRY \u6307\u5b9a\u7a0b\u5e8f\u5165\u53e3\u70b9\u4e3a _start \u51fd\u6570\uff0c\u7a0b\u5e8f\u5165\u53e3\u70b9\u5373\u7a0b\u5e8f\u542f\u52a8\u65f6\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u7ecf\u8fc7\u8fd9\u6837\u7684\u6307\u5b9a\u540e\u5728head.S\u4e2d\u9700\u8981\u7f16\u5199 _start \u51fd\u6570\uff0c\u7a0b\u5e8f\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u94fe\u63a5\u811a\u672c\u4e2d\u6709 . * \u4e24\u4e2a\u91cd\u8981\u7684\u7b26\u53f7\u3002\u5355\u72ec\u7684 . \u5728\u94fe\u63a5\u811a\u672c\u4ee3\u8868\u5f53\u524d\u5730\u5740\uff0c\u5b83\u6709\u8d4b\u503c\u3001\u88ab\u8d4b\u503c\u3001\u81ea\u589e\u7b49\u64cd\u4f5c\u3002\u800c * \u6709\u4e24\u79cd\u7528\u6cd5\uff0c\u5176\u4e00\u662f *() \u5728\u5927\u62ec\u53f7\u4e2d\u8868\u793a\u5c06\u6240\u6709\u6587\u4ef6\u4e2d\u7b26\u5408\u62ec\u53f7\u5185\u8981\u6c42\u7684\u6bb5\u653e\u7f6e\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u5176\u4e8c\u662f\u4f5c\u4e3a\u901a\u914d\u7b26\u3002 \u94fe\u63a5\u811a\u672c\u7684\u4e3b\u4f53\u662fSECTIONS\u90e8\u5206\uff0c\u5728\u8fd9\u91cc\u94fe\u63a5\u811a\u672c\u7684\u5de5\u4f5c\u662f\u5c06\u7a0b\u5e8f\u7684\u5404\u4e2a\u6bb5\u6309\u987a\u5e8f\u653e\u5728\u5404\u4e2a\u5730\u5740\u4e0a\uff0c\u5728\u4f8b\u5b50\u4e2d\u5c31\u662f\u4ece0x80200000\u5730\u5740\u5f00\u59cb\u653e\u7f6e\u4e86 .text \uff0c .rodata \uff0c .data \u548c .bss \u6bb5\u3002\u5404\u4e2a\u6bb5\u7684\u4f5c\u7528\u53ef\u4ee5\u7b80\u8981\u6982\u62ec\u6210\uff1a \u6bb5\u540d \u4e3b\u8981\u4f5c\u7528 .text \u901a\u5e38\u5b58\u653e\u7a0b\u5e8f\u6267\u884c\u4ee3\u7801 .rodata \u901a\u5e38\u5b58\u653e\u5e38\u91cf\u7b49\u53ea\u8bfb\u6570\u636e .data \u901a\u5e38\u5b58\u653e\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u3001\u9759\u6001\u53d8\u91cf .bss \u901a\u5e38\u5b58\u653e\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u3001\u9759\u6001\u53d8\u91cf \u5728\u94fe\u63a5\u811a\u672c\u4e2d\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7b26\u53f7\uff0c\u4f8b\u5982\u4ee5\u4e0a\u6240\u6709 _s \u4e0e _e \u5f00\u5934\u7684\u7b26\u53f7\u90fd\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002 \u66f4\u591a\u6709\u5173\u94fe\u63a5\u811a\u672c\u8bed\u6cd5\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u3002 vmlinux vmlinux \u901a\u5e38\u6307 Linux Kernel \u7f16\u8bd1\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6 (Executable and Linkable Format / ELF)\uff0c\u7279\u70b9\u662f\u672a\u538b\u7f29\u7684\uff0c\u5e26\u8c03\u8bd5\u4fe1\u606f\u548c\u7b26\u53f7\u8868\u7684\u3002\u5728\u6574\u5957 OS \u5b9e\u9a8c\u4e2d\uff0cvmlinux \u901a\u5e38\u6307\u5c06\u4f60\u7684\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1\uff0c\u94fe\u63a5\u540e\u751f\u6210\u7684\u53ef\u4f9b QEMU \u8fd0\u884c\u7684 RV64 \u67b6\u6784\u7a0b\u5e8f\u3002\u5982\u679c\u5bf9 vmlinux \u4f7f\u7528 file \u547d\u4ee4\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4e0b\u4fe1\u606f\uff1a 1 2 $ file vmlinux vmlinux: ELF 64 -bit LSB executable, UCB RISC-V, version 1 ( SYSV ) , statically linked, not stripped System.map System.map\u662f\u5185\u6838\u7b26\u53f7\u8868\uff08Kernel Symbol Table\uff09\u6587\u4ef6\uff0c\u662f\u5b58\u50a8\u4e86\u6240\u6709\u5185\u6838\u7b26\u53f7\u53ca\u5176\u5730\u5740\u7684\u4e00\u4e2a\u5217\u8868\u3002\u201c\u7b26\u53f7\u201d\u901a\u5e38\u6307\u7684\u662f\u51fd\u6570\u540d\uff0c\u5168\u5c40\u53d8\u91cf\u540d\u7b49\u7b49\u3002\u4f7f\u7528 nm vmlinux \u547d\u4ee4\u5373\u53ef\u6253\u5370vmlinux\u7684\u7b26\u53f7\u8868\uff0c\u7b26\u53f7\u8868\u7684\u6837\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 0000000000000800 A __vdso_rt_sigreturn ffffffe000000000 T __init_begin ffffffe000000000 T _sinittext ffffffe000000000 T _start ffffffe000000040 T _start_kernel ffffffe000000076 t clear_bss ffffffe000000080 t clear_bss_done ffffffe0000000c0 t relocate ffffffe00000017c t set_reset_devices ffffffe000000190 t debug_kernel \u4f7f\u7528 System.map \u53ef\u4ee5\u65b9\u4fbf\u5730\u8bfb\u51fa\u51fd\u6570\u6216\u53d8\u91cf\u7684\u5730\u5740\uff0c\u4e3a Debug \u63d0\u4f9b\u4e86\u65b9\u4fbf\u3002 4 \u5b9e\u9a8c\u6b65\u9aa4 4.1 \u51c6\u5907\u5de5\u7a0b \u4ece repo \u540c\u6b65\u5b9e\u9a8c\u4ee3\u7801\u6846\u67b6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u251c\u2500\u2500 arch \u2502 \u2514\u2500\u2500 riscv \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u251c\u2500\u2500 defs.h \u2502 \u2502 \u2514\u2500\u2500 sbi.h \u2502 \u251c\u2500\u2500 kernel \u2502 \u2502 \u251c\u2500\u2500 head.S \u2502 \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2502 \u251c\u2500\u2500 sbi.c \u2502 \u2502 \u2514\u2500\u2500 vmlinux.lds \u2502 \u2514\u2500\u2500 Makefile \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 print.h \u2502 \u2514\u2500\u2500 types.h \u251c\u2500\u2500 init \u2502 \u251c\u2500\u2500 main.c \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 test.c \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 print.c \u2514\u2500\u2500 Makefile \u9700\u8981\u5b8c\u5584\u4ee5\u4e0b\u6587\u4ef6\uff1a arch/riscv/kernel/head.S lib/Makefile arch/riscv/kernel/sbi.c lib/print.c arch/riscv/include/defs.h 4.2 \u7f16\u5199head.S \u5b66\u4e60riscv\u7684\u6c47\u7f16\u3002 \u5b8c\u6210 arch/riscv/kernel/head.S \u3002\u6211\u4eec\u9996\u5148\u4e3a\u5373\u5c06\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a C \u51fd\u6570\u8bbe\u7f6e\u7a0b\u5e8f\u6808\uff08\u6808\u7684\u5927\u5c0f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a4KB\uff09\uff0c\u5e76\u5c06\u8be5\u6808\u653e\u7f6e\u5728 .bss.stack \u6bb5\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u8f6c\u81f3 main.c \u4e2d\u7684 start_kernel \u51fd\u6570\u5373\u53ef\u3002 4.3 \u5b8c\u5584 Makefile \u811a\u672c \u9605\u8bfb\u6587\u6863\u4e2d\u5173\u4e8e Makefile \u7684\u7ae0\u8282\uff0c\u4ee5\u53ca\u5de5\u7a0b\u6587\u4ef6\u4e2d\u7684 Makefile \u6587\u4ef6\uff0c\u6839\u636e\u6ce8\u91ca\u5b66\u4f1a Makefile \u7684\u4f7f\u7528\u89c4\u5219\u540e\uff0c\u8865\u5145 lib/Makefile \uff0c\u4f7f\u5de5\u7a0b\u5f97\u4ee5\u7f16\u8bd1\u3002 \u5b8c\u6210\u6b64\u6b65\u540e\u5728\u5de5\u7a0b\u6839\u6587\u4ef6\u5939\u6267\u884c make\uff0c\u53ef\u4ee5\u770b\u5230\u5de5\u7a0b\u6210\u529f\u7f16\u8bd1\u51fa vmlinux\u3002 4.4 \u8865\u5145 sbi.c OpenSBI \u5728 M \u6001\uff0c\u4e3a S \u6001\u63d0\u4f9b\u4e86\u591a\u79cd\u63a5\u53e3\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u8f93\u5165\u8f93\u51fa\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u8c03\u7528 OpenSBI \u63a5\u53e3\u7684\u529f\u80fd\u3002\u7ed9\u51fa\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 struct sbiret { long error ; long value ; }; struct sbiret sbi_ecall ( int ext , int fid , uint64 arg0 , uint64 arg1 , uint64 arg2 , uint64 arg3 , uint64 arg4 , uint64 arg5 ); sbi_ecall \u51fd\u6570\u4e2d\uff0c\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5c06 ext (Extension ID) \u653e\u5165\u5bc4\u5b58\u5668 a7 \u4e2d\uff0cfid (Function ID) \u653e\u5165\u5bc4\u5b58\u5668 a6 \u4e2d\uff0c\u5c06 arg0 ~ arg5 \u653e\u5165\u5bc4\u5b58\u5668 a0 ~ a5 \u4e2d\u3002 \u4f7f\u7528 ecall \u6307\u4ee4\u3002 ecall \u4e4b\u540e\u7cfb\u7edf\u4f1a\u8fdb\u5165 M \u6a21\u5f0f\uff0c\u4e4b\u540e OpenSBI \u4f1a\u5b8c\u6210\u76f8\u5173\u64cd\u4f5c\u3002 OpenSBI \u7684\u8fd4\u56de\u7ed3\u679c\u4f1a\u5b58\u653e\u5728\u5bc4\u5b58\u5668 a0 \uff0c a1 \u4e2d\uff0c\u5176\u4e2d a0 \u4e3a error code\uff0c a1 \u4e3a\u8fd4\u56de\u503c\uff0c \u6211\u4eec\u7528 sbiret \u6765\u63a5\u53d7\u8fd9\u4e24\u4e2a\u8fd4\u56de\u503c\u3002 \u540c\u5b66\u4eec\u53ef\u4ee5\u53c2\u7167\u5185\u8054\u6c47\u7f16\u7684\u793a\u4f8b\u4e00\u5b8c\u6210\u8be5\u51fd\u6570\u7684\u7f16\u5199\u3002 \u7f16\u5199\u6210\u529f\u540e\uff0c\u8c03\u7528 sbi_ecall(0x1, 0x0, 0x30, 0, 0, 0, 0, 0) \u5c06\u4f1a\u8f93\u51fa\u5b57\u7b26'0'\u3002\u5176\u4e2d 0x1 \u4ee3\u8868 sbi_console_putchar \u7684 ExtensionID\uff0c 0x0 \u4ee3\u8868FunctionID, 0x30\u4ee3\u8868'0'\u7684ascii\u503c\uff0c\u5176\u4f59\u53c2\u6570\u586b0\u3002 \u8bf7\u5728 arch/riscv/kernel/sbi.c \u4e2d\u8865\u5145 sbi_ecall() \u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u5728\u540e\u7eed\u7684\u5b9e\u9a8c\u4e2d\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u7684\u529f\u80fd\u3002 Function Name Function ID Extension ID sbi_set_timer \uff08\u8bbe\u7f6e\u65f6\u949f\u76f8\u5173\u5bc4\u5b58\u5668\uff09 0 0x00 sbi_console_putchar \uff08\u6253\u5370\u5b57\u7b26\uff09 0 0x01 sbi_console_getchar \uff08\u63a5\u6536\u5b57\u7b26\uff09 0 0x02 sbi_shutdown \uff08\u5173\u673a\uff09 0 0x08 4.5 puts() \u548c puti() \u8c03\u7528\u4ee5\u4e0a\u5b8c\u6210\u7684 sbi_ecall , \u5b8c\u6210 puts() \u548c puti() \u7684\u5b9e\u73b0\u3002 puts() \u7528\u4e8e\u6253\u5370\u5b57\u7b26\u4e32\uff0c puti() \u7528\u4e8e\u6253\u5370\u6574\u578b\u53d8\u91cf\u3002 \u8bf7\u7f16\u5199 lib/print.c \u4e2d\u7684 puts() \u548c puti() \uff0c \u51fd\u6570\u7684\u76f8\u5173\u5b9a\u4e49\u5df2\u7ecf\u5199\u5728\u4e86 print.h \u6587\u4ef6\u3002 4.6 \u4fee\u6539 defs \u5185\u8054\u6c47\u7f16\u7684\u76f8\u5173\u77e5\u8bc6\u89c1 \u5185\u8054\u6c47\u7f16 \u3002 \u5b66\u4e60\u4e86\u89e3\u4e86\u4ee5\u4e0a\u77e5\u8bc6\u540e\uff0c\u8865\u5145 arch/riscv/include/defs.h \u4e2d\u7684\u4ee3\u7801\u5b8c\u6210\uff1a \u8865\u5145\u5b8c read_csr \u8fd9\u4e2a\u5b8f\u5b9a\u4e49\u3002\u8fd9\u91cc\u6709\u76f8\u5173 \u793a\u4f8b \u3002 5 \u5176\u4ed6\u67b6\u6784\u7684\u4ea4\u53c9\u7f16\u8bd1\u2014\u2014\u4ee5 Aarch64 \u4e3a\u4f8b 5.1 \u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u7684\u5b89\u88c5 \u90a3\u4e48\u5982\u4f55\u5b89\u88c5\u4e0d\u540c\u67b6\u6784\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u5462\uff1f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7528 Ubuntu \u81ea\u5e26\u7684\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668 apt \uff0c\u5148\u627e\u5230\u6709\u4ec0\u4e48\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u53ef\u4ee5\u88c5 1 2 3 4 5 # \u641c\u7d22\u5305\u542b aarch64 \u7684\u8f6f\u4ef6\u5305\uff0c\u4e00\u822c\u662f\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177 apt-cache search aarch64 ... # \u641c\u7d22\u7ed3\u679c\u4e2d\u5982\u679c\u6709 gcc-xxx-linux-gnu\uff0c\u4e00\u822c\u9700\u6c42\u4e0b\u88c5\u5b83\u5c31\u884c\u4e86\uff08\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u54c8\uff09 sudo apt install gcc-aarch64-linux-gnu \u73b0\u5728\u6211\u4eec\u6709 aarch64 \u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u4e86\uff0c\u5f00\u59cb\u7f16\u8bd1\u5427\uff01 5.2 \u600e\u4e48\u83b7\u5f97\u7f16\u8bd1\u8fc7\u7a0b\u7684\u4e2d\u95f4\u4ea7\u7269 \u6ce8\u610f\uff1a\u8fd9\u91cc\u8bf4\u7684\u201c\u7f16\u8bd1\u8fc7\u7a0b\u201d\u5305\u62ec\u9884\u5904\u7406\u3001\u7f16\u8bd1\u3001\u6c47\u7f16\u3001\u94fe\u63a5 \u5bf9\u4e8e Linux kernel\uff0c\u7f16\u8bd1\u547d\u4ee4\u548c\u9009\u9879\u5728\u4e0d\u540c\u67b6\u6784\u4e4b\u95f4\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u4e00\u822c\u9075\u5faa\u4ee5\u4e0b\u5f62\u5f0f\uff08\u7c7b\u6bd4 lab0 \u505a\u8fc7\u7684 riscv64 \u5373\u53ef\uff09 1 make ARCH=xxx CROSS_COMPILE=some-certain-arch- <options> <files> \u6bd4\u5982\uff0c\u60f3\u83b7\u5f97 kernel \u4e2d xxx.c \u7684\u9884\u5904\u7406\u4ea7\u7269\uff08\u56de\u5fc6\u4e00\u4e0b\u9884\u5904\u7406\u505a\u4e86\u4ec0\u4e48\uff09 xxx.i \uff0c\u6211\u4eec\u53ef\u4ee5 1 2 3 4 5 # \u5148 config make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig # \u7136\u540e\u6307\u5b9a\u8981\u751f\u6210\u7684\u6587\u4ef6 make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- path/to/file/xxx.i \u8bfe\u4ef6\u91cc\u4e5f\u7ed9\u51fa\u4e86 make \u5de5\u5177\u3002 \u601d\u8003\u9898 \u8bf7\u603b\u7ed3\u4e00\u4e0b RISC-V \u7684 calling convention\uff0c\u5e76\u89e3\u91ca Caller / Callee Saved Register \u6709\u4ec0\u4e48\u533a\u522b\uff1f \u7f16\u8bd1\u4e4b\u540e\uff0c\u901a\u8fc7 System.map \u67e5\u770b vmlinux.lds \u4e2d\u81ea\u5b9a\u4e49\u7b26\u53f7\u7684\u503c\uff08\u622a\u56fe\uff09\u3002 \u7528 csr_read \u5b8f\u8bfb\u53d6 sstatus \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5bf9\u7167 RISC-V \u624b\u518c\u89e3\u91ca\u5176\u542b\u4e49\uff08\u622a\u56fe\uff09\u3002 \u7528 csr_write \u5b8f\u5411 sscratch \u5bc4\u5b58\u5668\u5199\u5165\u6570\u636e\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u5199\u5165\u6210\u529f\uff08\u622a\u56fe\uff09\u3002 Detail your steps about how to get arch/arm64/kernel/sys.i Find system call table of Linux v6.0 for ARM32 , RISC-V(32 bit) , RISC-V(64 bit) , x86(32 bit) , x86_64 List source code file, the whole system call table with macro expanded, screenshot every step. Explain what is ELF file? Try readelf and objdump command on an ELF file, give screenshot of the output. Run an ELF file and cat /proc/PID /maps to give its memory layout. 5, 6, 7 need to have screenshots. \u4f5c\u4e1a\u63d0\u4ea4 \u5b9e\u9a8c\u62a5\u544a\u9700\u8981\u5305\u542b\u5bf9\u6240\u6709\u601d\u8003\u9898\u7684\u56de\u7b54\uff0c\u6709\u622a\u56fe\u8981\u6c42\u7684\u8981\u622a\u56fe\u3002 \u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u5b9e\u9a8c\u6307\u5bfc\u4e00"},{"location":"lab1/#lab-1-rv64","text":"","title":"Lab 1: RV64 \u5185\u6838\u5f15\u5bfc"},{"location":"lab1/#1","text":"\u5b66\u4e60 RISC-V \u6c47\u7f16\uff0c \u7f16\u5199 head.S \u5b9e\u73b0\u8df3\u8f6c\u5230\u5185\u6838\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a C \u51fd\u6570\u3002 \u5b66\u4e60 OpenSBI\uff0c\u7406\u89e3 OpenSBI \u5728\u5b9e\u9a8c\u4e2d\u6240\u8d77\u5230\u7684\u4f5c\u7528\uff0c\u5e76\u8c03\u7528 OpenSBI \u63d0\u4f9b\u7684\u63a5\u53e3\u5b8c\u6210\u5b57\u7b26\u7684\u8f93\u51fa\u3002 \u5b66\u4e60 Makefile \u76f8\u5173\u77e5\u8bc6\uff0c \u8865\u5145\u9879\u76ee\u4e2d\u7684 Makefile \u6587\u4ef6\uff0c \u6765\u5b8c\u6210\u5bf9\u6574\u4e2a\u5de5\u7a0b\u7684\u7ba1\u7406\u3002","title":"1 \u5b9e\u9a8c\u76ee\u7684"},{"location":"lab1/#2","text":"Environment in Lab0","title":"2 \u5b9e\u9a8c\u73af\u5883"},{"location":"lab1/#3","text":"","title":"3 \u5b9e\u9a8c\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd"},{"location":"lab1/#31","text":"\u4e3a\u4e86\u987a\u5229\u5b8c\u6210 OS \u5b9e\u9a8c\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6\u548c\u8f83\u591a\u8c03\u8bd5\u6280\u5de7\u3002\u5728 OS \u5b9e\u9a8c\u4e2d\u6211\u4eec\u9700\u8981 RISC-V\u6c47\u7f16 \u7684\u524d\u7f6e\u77e5\u8bc6\uff0c\u8bfe\u5802\u4e0a\u4e0d\u4f1a\u8bb2\u6388\uff0c\u8bf7\u540c\u5b66\u4eec\u901a\u8fc7\u9605\u8bfb\u4ee5\u4e0b\u56db\u4efd\u6587\u6863\u81ea\u5b66\uff1a RISC-V Assembly Programmer's Manual RISC-V Unprivileged Spec RISC-V Privileged Spec RISC-V \u624b\u518c\uff08\u4e2d\u6587\uff09 \u6ce8\uff1aRISC-V \u624b\u518c\uff08\u4e2d\u6587\uff09\u4e2d\u6709\u4e00\u4e9b Typo\uff0c\u8bf7\u8c28\u614e\u53c2\u8003\u3002","title":"3.1 \u524d\u7f6e\u77e5\u8bc6"},{"location":"lab1/#32-risc-v","text":"RISC-V \u6709\u4e09\u4e2a\u7279\u6743\u6a21\u5f0f\uff1aU (user) \u6a21\u5f0f\u3001S (supervisor) \u6a21\u5f0f\u548c M (machine) \u6a21\u5f0f\u3002 Level Encoding Name Abbreviation 0 00 User/Application U 1 01 Supervisor S 2 10 Reserved 3 11 Machine M \u5176\u4e2d\uff1a M \u6a21\u5f0f\u662f\u5bf9\u786c\u4ef6\u64cd\u4f5c\u7684\u62bd\u8c61\uff0c\u6709 \u6700\u9ad8 \u7ea7\u522b\u7684\u6743\u9650 S \u6a21\u5f0f\u4ecb\u4e8e M \u6a21\u5f0f\u548c U \u6a21\u5f0f\u4e4b\u95f4\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u5185\u6838\u6001 (Kernel)\u3002\u5f53\u7528\u6237\u9700\u8981\u5185\u6838\u8d44\u6e90\u65f6\uff0c\u5411\u5185\u6838\u7533\u8bf7\uff0c\u5e76\u5207\u6362\u5230\u5185\u6838\u6001\u8fdb\u884c\u5904\u7406 U \u6a21\u5f0f\u7528\u4e8e\u6267\u884c\u7528\u6237\u7a0b\u5e8f\uff0c\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u4e8e\u7528\u6237\u6001\uff0c\u6709 \u6700\u4f4e \u7ea7\u522b\u7684\u6743\u9650","title":"3.2 RISC-V \u7684\u4e09\u79cd\u7279\u6743\u6a21\u5f0f"},{"location":"lab1/#33-os","text":"\u6211\u4eec\u4ee5\u6700\u57fa\u7840\u7684\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u8ba1\u7b97\u673a\u4e0a\u7535\u540e\uff0c\u9996\u5148\u786c\u4ef6\u8fdb\u884c\u4e00\u4e9b\u57fa\u7840\u7684\u521d\u59cb\u5316\u540e\uff0c\u5c06 CPU \u7684 Program Counter \u79fb\u52a8\u5230\u5185\u5b58\u4e2d Bootloader \u7684\u8d77\u59cb\u5730\u5740\u3002 Bootloader \u662f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u8fd0\u884c\u4e4b\u524d\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u786c\u4ef6\uff0c\u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u3002 \u5728 RISC-V \u67b6\u6784\u91cc\uff0cBootloader \u8fd0\u884c\u5728 M \u6a21\u5f0f\u4e0b\u3002Bootloader \u8fd0\u884c\u5b8c\u6bd5\u540e\u5c31\u4f1a\u628a\u5f53\u524d\u6a21\u5f0f\u5207\u6362\u5230 S \u6a21\u5f0f\u4e0b\uff0c\u673a\u5668\u968f\u540e\u5f00\u59cb\u8fd0\u884c Kernel\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u7b80\u5355\u800c\u8a00\u5c31\u662f\u8fd9\u6837\uff1a 1 2 3 4 Hardware RISC-V M Mode RISC-V S Mode +------------+ +--------------+ +----------+ | Power On | ----> | Bootloader | ----> | Kernel | +------------+ +--------------+ +----------+","title":"3.3 \u4ece\u8ba1\u7b97\u673a\u4e0a\u7535\u5230 OS \u8fd0\u884c"},{"location":"lab1/#34-sbi-opensbi","text":"SBI (Supervisor Binary Interface) \u662f S-mode \u7684 Kernel \u548c M-mode \u6267\u884c\u73af\u5883\u4e4b\u95f4\u7684\u63a5\u53e3\u89c4\u8303\uff0c\u800c OpenSBI \u662f\u4e00\u4e2a RISC-V SBI \u89c4\u8303\u7684\u5f00\u6e90\u5b9e\u73b0\u3002RISC-V \u5e73\u53f0\u548c SoC \u4f9b\u5e94\u5546\u53ef\u4ee5\u81ea\u4e3b\u6269\u5c55 OpenSBI \u5b9e\u73b0\uff0c\u4ee5\u9002\u5e94\u7279\u5b9a\u7684\u786c\u4ef6\u914d\u7f6e\u3002 \u7b80\u5355\u7684\u8bf4\uff0c\u4e3a\u4e86\u4f7f\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u9002\u914d\u4e0d\u540c\u786c\u4ef6\uff0cOpenSBI \u63d0\u51fa\u4e86\u4e00\u7cfb\u5217\u89c4\u8303\u5bf9 M-mode \u4e0b\u7684\u786c\u4ef6\u8fdb\u884c\u4e86\u7edf\u4e00\u5b9a\u4e49\uff0c\u8fd0\u884c\u5728 S-mode \u4e0b\u7684\u5185\u6838\u53ef\u4ee5\u6309\u7167\u8fd9\u4e9b\u89c4\u8303\u5bf9\u4e0d\u540c\u786c\u4ef6\u8fdb\u884c\u64cd\u4f5c\u3002 \u4e3a\u964d\u4f4e\u5b9e\u9a8c\u96be\u5ea6\uff0c\u6211\u4eec\u9009\u62e9 OpenSBI \u4f5c\u4e3a Bootloader \u6765\u5b8c\u6210\u673a\u5668\u542f\u52a8\u65f6 M-mode \u4e0b\u7684\u786c\u4ef6\u521d\u59cb\u5316\u4e0e\u5bc4\u5b58\u5668\u8bbe\u7f6e\uff0c\u5e76\u4f7f\u7528 OpenSBI \u6240\u63d0\u4f9b\u7684\u63a5\u53e3\u5b8c\u6210\u8bf8\u5982\u5b57\u7b26\u6253\u5370\u7684\u64cd\u4f5c\u3002 \u5728\u5b9e\u9a8c\u4e2d\uff0cQEMU \u5df2\u7ecf\u5185\u7f6e\u4e86 OpenSBI \u4f5c\u4e3a Bootloader\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 -bios default \u542f\u7528\u3002\u5982\u679c\u542f\u7528\uff0cQEMU \u4f1a\u5c06 OpenSBI \u4ee3\u7801\u52a0\u8f7d\u5230 0x80000000 \u8d77\u59cb\u5904\u3002OpenSBI \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4f1a\u8df3\u8f6c\u5230 0x80200000 \u5904\uff08\u4e5f\u5c31\u662f Kernel \u7684\u8d77\u59cb\u5730\u5740\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6240\u7f16\u8bd1\u7684\u4ee3\u7801\u9700\u8981\u653e\u5230 0x80200000 \u5904\u3002 \u5982\u679c\u4f60\u5bf9 RISC-V \u67b6\u6784\u7684 Boot \u6d41\u7a0b\u6709\u66f4\u591a\u7684\u597d\u5947\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4efd bootflow \u3002","title":"3.4 SBI \u4e0e OpenSBI"},{"location":"lab1/#35-makefile","text":"Makefile \u53ef\u4ee5\u7b80\u5355\u7684\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5de5\u7a0b\u6587\u4ef6\u7684\u7f16\u8bd1\u89c4\u5219\uff0c\u63cf\u8ff0\u4e86\u6574\u4e2a\u5de5\u7a0b\u7684\u7f16\u8bd1\u548c\u94fe\u63a5\u6d41\u7a0b\u3002\u5728 Lab0 \u4e2d\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 make \u5de5\u5177\u5229\u7528 Makefile \u6587\u4ef6\u6765\u7ba1\u7406\u6574\u4e2a\u5de5\u7a0b\u3002\u5728\u9605\u8bfb\u4e86 Makefile\u4ecb\u7ecd \u8fd9\u4e00\u7ae0\u8282\u540e\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u6839\u636e\u5de5\u7a0b\u6587\u4ef6\u5939\u91cc Makefile \u7684\u4ee3\u7801\u6765\u638c\u63e1\u4e00\u4e9b\u57fa\u672c\u7684\u4f7f\u7528\u6280\u5de7\u3002","title":"3.5 Makefile"},{"location":"lab1/#36","text":"\u5185\u8054\u6c47\u7f16\uff08\u901a\u5e38\u7531 asm \u6216\u8005 __asm__ \u5173\u952e\u5b57\u5f15\u5165\uff09\u63d0\u4f9b\u4e86\u5c06\u6c47\u7f16\u8bed\u8a00\u6e90\u4ee3\u7801\u5d4c\u5165 C \u7a0b\u5e8f\u7684\u80fd\u529b\u3002 \u5185\u8054\u6c47\u7f16\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u53c2\u8003 Assembler Instructions with C Expression Operands \u3002 \u4e0b\u9762\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u6b21\u5b9e\u9a8c\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u5185\u8054\u6c47\u7f16\u77e5\u8bc6\uff1a \u5185\u8054\u6c47\u7f16\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 __asm__ volatile ( \"instruction1 \\n \" \"instruction2 \\n \" ...... ...... \"instruction3 \\n \" : [ out1 ] \"=r\" ( v1 ),[ out2 ] \"=r\" ( v2 ) : [ in1 ] \"r\" ( v1 ), [ in2 ] \"r\" ( v2 ) : \"memory\" ); \u5176\u4e2d\uff0c\u4e09\u4e2a : \u5c06\u6c47\u7f16\u90e8\u5206\u5206\u6210\u4e86\u56db\u90e8\u5206\uff1a \u7b2c\u4e00\u90e8\u5206\u662f\u6c47\u7f16\u6307\u4ee4\uff0c\u6307\u4ee4\u672b\u5c3e\u9700\u8981\u6dfb\u52a0 '\\n'\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f\u8f93\u51fa\u64cd\u4f5c\u6570\u90e8\u5206\u3002 \u7b2c\u4e09\u90e8\u5206\u662f\u8f93\u5165\u64cd\u4f5c\u6570\u90e8\u5206\u3002 \u7b2c\u56db\u90e8\u5206\u662f\u53ef\u80fd\u5f71\u54cd\u7684\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5668\uff0c\u7528\u4e8e\u544a\u77e5\u7f16\u8bd1\u5668\u5f53\u524d\u5185\u8054\u6c47\u7f16\u8bed\u53e5\u53ef\u80fd\u4f1a\u5bf9\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5f97\u7f16\u8bd1\u5668\u5728\u4f18\u5316\u65f6\u5c06\u5176\u56e0\u7d20\u8003\u8651\u8fdb\u53bb\u3002 \u8fd9\u56db\u90e8\u5206\u4e2d\u540e\u4e09\u90e8\u5206\u4e0d\u662f\u5fc5\u987b\u7684\u3002","title":"3.6 \u5185\u8054\u6c47\u7f16"},{"location":"lab1/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 unsigned long long s_example ( unsigned long long type , unsigned long long arg0 ) { unsigned long long ret_val ; __asm__ volatile ( \"mv x10, %[type] \\n \" \"mv x11, %[arg0] \\n \" \"mv %[ret_val], x12\" : [ ret_val ] \"=r\" ( ret_val ) : [ type ] \"r\" ( type ), [ arg0 ] \"r\" ( arg0 ) : \"memory\" ); return ret_val ; } \u793a\u4f8b\u4e00\u4e2d\u6307\u4ee4\u90e8\u5206\uff0c %[type] \u3001 %[arg0] \u4ee5\u53ca %[ret_val] \u4ee3\u8868\u7740\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u6216\u662f\u5185\u5b58\u3002 \u8f93\u5165\u8f93\u51fa\u90e8\u5206\u4e2d\uff0c [type] \"r\" (type) \u4ee3\u8868\u7740\u5c06 () \u4e2d\u7684\u53d8\u91cf type \u653e\u5165\u5bc4\u5b58\u5668\u4e2d\uff08 \"r\" \u6307\u653e\u5165\u5bc4\u5b58\u5668\uff0c\u5982\u679c\u662f \"m\" \u5219\u4e3a\u653e\u5165\u5185\u5b58\uff09\uff0c\u5e76\u4e14\u7ed1\u5b9a\u5230 [] \u4e2d\u547d\u540d\u7684\u7b26\u53f7\u4e2d\u53bb\u3002 [ret_val] \"=r\" (ret_val) \u4ee3\u8868\u7740\u5c06\u6c47\u7f16\u6307\u4ee4\u4e2d %[ret_val] \u7684\u503c\u66f4\u65b0\u5230\u53d8\u91cf ret_val \u4e2d\u3002","title":"\u793a\u4f8b\u4e00"},{"location":"lab1/#_2","text":"1 2 #define write_csr(reg, val) ({ __asm__ volatile ( \"csrw \" # reg \", %0\" :: \"r\" ( val )); }) \u793a\u4f8b\u4e8c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5176\u4e2d %0 \u4ee3\u8868\u7740\u8f93\u51fa\u8f93\u5165\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u7b26\u53f7\uff0c\u5373 val \u3002 #reg \u662fc\u8bed\u8a00\u7684\u4e00\u4e2a\u7279\u6b8a\u5b8f\u5b9a\u4e49\u8bed\u6cd5\uff0c\u76f8\u5f53\u4e8e\u5c06reg\u8fdb\u884c\u5b8f\u66ff\u6362\u5e76\u7528\u53cc\u5f15\u53f7\u5305\u88f9\u8d77\u6765\u3002 \u4f8b\u5982 write_csr(sstatus,val) \u7ecf\u5b8f\u5c55\u5f00\u4f1a\u5f97\u5230\uff1a 1 2 ({ __asm__ volatile ( \"csrw \" \"sstatus\" \", %0\" :: \"r\" ( val )); })","title":"\u793a\u4f8b\u4e8c"},{"location":"lab1/#37","text":"","title":"3.7 \u7f16\u8bd1\u76f8\u5173\u77e5\u8bc6\u4ecb\u7ecd"},{"location":"lab1/#vmlinuxlds","text":"GNU ld \u5373\u94fe\u63a5\u5668\uff0c\u7528\u4e8e\u5c06 *.o \u6587\u4ef6\uff08\u548c\u5e93\u6587\u4ef6\uff09\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u4e2d\uff0c\u4e3a\u4e86\u6307\u5b9a\u7a0b\u5e8f\u7684\u5185\u5b58\u5e03\u5c40\uff0cld \u4f7f\u7528\u94fe\u63a5\u811a\u672c\uff08Linker Script\uff09\u6765\u63a7\u5236\uff0c\u5728 Linux Kernel \u4e2d\u94fe\u63a5\u811a\u672c\u88ab\u547d\u540d\u4e3a vmlinux.lds\u3002\u66f4\u591a\u5173\u4e8e ld \u7684\u4ecb\u7ecd\u53ef\u4ee5\u4f7f\u7528 man ld \u547d\u4ee4\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a vmlinux.lds \u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 /* \u76ee\u6807\u67b6\u6784 */ OUTPUT_ARCH( \"riscv\" ) /* \u7a0b\u5e8f\u5165\u53e3 */ ENTRY( _start ) /* kernel\u4ee3\u7801\u8d77\u59cb\u4f4d\u7f6e */ BASE_ADDR = 0x80200000; SECTIONS { /* . \u4ee3\u8868\u5f53\u524d\u5730\u5740 */ . = BASE_ADDR; /* \u8bb0\u5f55kernel\u4ee3\u7801\u7684\u8d77\u59cb\u5730\u5740 */ _skernel = .; /* ALIGN(0x1000) \u8868\u793a4KB\u5bf9\u9f50 */ /* _stext, _etext \u5206\u522b\u8bb0\u5f55\u4e86text\u6bb5\u7684\u8d77\u59cb\u4e0e\u7ed3\u675f\u5730\u5740 */ .text : ALIGN(0x1000){ _stext = .; *(.text.entry) *(.text .text.*) _etext = .; } .rodata : ALIGN(0x1000){ _srodata = .; *(.rodata .rodata.*) _erodata = .; } .data : ALIGN(0x1000){ _sdata = .; *(.data .data.*) _edata = .; } .bss : ALIGN(0x1000){ _sbss = .; *(.bss.stack) sbss = .; *(.bss .bss.*) _ebss = .; } /* \u8bb0\u5f55kernel\u4ee3\u7801\u7684\u7ed3\u675f\u5730\u5740 */ _ekernel = .; } \u9996\u5148\u6211\u4eec\u4f7f\u7528 OUTPUT_ARCH \u6307\u5b9a\u4e86\u67b6\u6784\u4e3a RISC-V \uff0c\u4e4b\u540e\u4f7f\u7528 ENTRY \u6307\u5b9a\u7a0b\u5e8f\u5165\u53e3\u70b9\u4e3a _start \u51fd\u6570\uff0c\u7a0b\u5e8f\u5165\u53e3\u70b9\u5373\u7a0b\u5e8f\u542f\u52a8\u65f6\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u7ecf\u8fc7\u8fd9\u6837\u7684\u6307\u5b9a\u540e\u5728head.S\u4e2d\u9700\u8981\u7f16\u5199 _start \u51fd\u6570\uff0c\u7a0b\u5e8f\u624d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u94fe\u63a5\u811a\u672c\u4e2d\u6709 . * \u4e24\u4e2a\u91cd\u8981\u7684\u7b26\u53f7\u3002\u5355\u72ec\u7684 . \u5728\u94fe\u63a5\u811a\u672c\u4ee3\u8868\u5f53\u524d\u5730\u5740\uff0c\u5b83\u6709\u8d4b\u503c\u3001\u88ab\u8d4b\u503c\u3001\u81ea\u589e\u7b49\u64cd\u4f5c\u3002\u800c * \u6709\u4e24\u79cd\u7528\u6cd5\uff0c\u5176\u4e00\u662f *() \u5728\u5927\u62ec\u53f7\u4e2d\u8868\u793a\u5c06\u6240\u6709\u6587\u4ef6\u4e2d\u7b26\u5408\u62ec\u53f7\u5185\u8981\u6c42\u7684\u6bb5\u653e\u7f6e\u5728\u5f53\u524d\u4f4d\u7f6e\uff0c\u5176\u4e8c\u662f\u4f5c\u4e3a\u901a\u914d\u7b26\u3002 \u94fe\u63a5\u811a\u672c\u7684\u4e3b\u4f53\u662fSECTIONS\u90e8\u5206\uff0c\u5728\u8fd9\u91cc\u94fe\u63a5\u811a\u672c\u7684\u5de5\u4f5c\u662f\u5c06\u7a0b\u5e8f\u7684\u5404\u4e2a\u6bb5\u6309\u987a\u5e8f\u653e\u5728\u5404\u4e2a\u5730\u5740\u4e0a\uff0c\u5728\u4f8b\u5b50\u4e2d\u5c31\u662f\u4ece0x80200000\u5730\u5740\u5f00\u59cb\u653e\u7f6e\u4e86 .text \uff0c .rodata \uff0c .data \u548c .bss \u6bb5\u3002\u5404\u4e2a\u6bb5\u7684\u4f5c\u7528\u53ef\u4ee5\u7b80\u8981\u6982\u62ec\u6210\uff1a \u6bb5\u540d \u4e3b\u8981\u4f5c\u7528 .text \u901a\u5e38\u5b58\u653e\u7a0b\u5e8f\u6267\u884c\u4ee3\u7801 .rodata \u901a\u5e38\u5b58\u653e\u5e38\u91cf\u7b49\u53ea\u8bfb\u6570\u636e .data \u901a\u5e38\u5b58\u653e\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u3001\u9759\u6001\u53d8\u91cf .bss \u901a\u5e38\u5b58\u653e\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u3001\u9759\u6001\u53d8\u91cf \u5728\u94fe\u63a5\u811a\u672c\u4e2d\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7b26\u53f7\uff0c\u4f8b\u5982\u4ee5\u4e0a\u6240\u6709 _s \u4e0e _e \u5f00\u5934\u7684\u7b26\u53f7\u90fd\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002 \u66f4\u591a\u6709\u5173\u94fe\u63a5\u811a\u672c\u8bed\u6cd5\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u3002","title":"vmlinux.lds"},{"location":"lab1/#vmlinux","text":"vmlinux \u901a\u5e38\u6307 Linux Kernel \u7f16\u8bd1\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6 (Executable and Linkable Format / ELF)\uff0c\u7279\u70b9\u662f\u672a\u538b\u7f29\u7684\uff0c\u5e26\u8c03\u8bd5\u4fe1\u606f\u548c\u7b26\u53f7\u8868\u7684\u3002\u5728\u6574\u5957 OS \u5b9e\u9a8c\u4e2d\uff0cvmlinux \u901a\u5e38\u6307\u5c06\u4f60\u7684\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1\uff0c\u94fe\u63a5\u540e\u751f\u6210\u7684\u53ef\u4f9b QEMU \u8fd0\u884c\u7684 RV64 \u67b6\u6784\u7a0b\u5e8f\u3002\u5982\u679c\u5bf9 vmlinux \u4f7f\u7528 file \u547d\u4ee4\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4e0b\u4fe1\u606f\uff1a 1 2 $ file vmlinux vmlinux: ELF 64 -bit LSB executable, UCB RISC-V, version 1 ( SYSV ) , statically linked, not stripped","title":"vmlinux"},{"location":"lab1/#systemmap","text":"System.map\u662f\u5185\u6838\u7b26\u53f7\u8868\uff08Kernel Symbol Table\uff09\u6587\u4ef6\uff0c\u662f\u5b58\u50a8\u4e86\u6240\u6709\u5185\u6838\u7b26\u53f7\u53ca\u5176\u5730\u5740\u7684\u4e00\u4e2a\u5217\u8868\u3002\u201c\u7b26\u53f7\u201d\u901a\u5e38\u6307\u7684\u662f\u51fd\u6570\u540d\uff0c\u5168\u5c40\u53d8\u91cf\u540d\u7b49\u7b49\u3002\u4f7f\u7528 nm vmlinux \u547d\u4ee4\u5373\u53ef\u6253\u5370vmlinux\u7684\u7b26\u53f7\u8868\uff0c\u7b26\u53f7\u8868\u7684\u6837\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 0000000000000800 A __vdso_rt_sigreturn ffffffe000000000 T __init_begin ffffffe000000000 T _sinittext ffffffe000000000 T _start ffffffe000000040 T _start_kernel ffffffe000000076 t clear_bss ffffffe000000080 t clear_bss_done ffffffe0000000c0 t relocate ffffffe00000017c t set_reset_devices ffffffe000000190 t debug_kernel \u4f7f\u7528 System.map \u53ef\u4ee5\u65b9\u4fbf\u5730\u8bfb\u51fa\u51fd\u6570\u6216\u53d8\u91cf\u7684\u5730\u5740\uff0c\u4e3a Debug \u63d0\u4f9b\u4e86\u65b9\u4fbf\u3002","title":"System.map"},{"location":"lab1/#4","text":"","title":"4 \u5b9e\u9a8c\u6b65\u9aa4"},{"location":"lab1/#41","text":"\u4ece repo \u540c\u6b65\u5b9e\u9a8c\u4ee3\u7801\u6846\u67b6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u251c\u2500\u2500 arch \u2502 \u2514\u2500\u2500 riscv \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u251c\u2500\u2500 defs.h \u2502 \u2502 \u2514\u2500\u2500 sbi.h \u2502 \u251c\u2500\u2500 kernel \u2502 \u2502 \u251c\u2500\u2500 head.S \u2502 \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2502 \u251c\u2500\u2500 sbi.c \u2502 \u2502 \u2514\u2500\u2500 vmlinux.lds \u2502 \u2514\u2500\u2500 Makefile \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 print.h \u2502 \u2514\u2500\u2500 types.h \u251c\u2500\u2500 init \u2502 \u251c\u2500\u2500 main.c \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 test.c \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 print.c \u2514\u2500\u2500 Makefile \u9700\u8981\u5b8c\u5584\u4ee5\u4e0b\u6587\u4ef6\uff1a arch/riscv/kernel/head.S lib/Makefile arch/riscv/kernel/sbi.c lib/print.c arch/riscv/include/defs.h","title":"4.1 \u51c6\u5907\u5de5\u7a0b"},{"location":"lab1/#42-heads","text":"\u5b66\u4e60riscv\u7684\u6c47\u7f16\u3002 \u5b8c\u6210 arch/riscv/kernel/head.S \u3002\u6211\u4eec\u9996\u5148\u4e3a\u5373\u5c06\u8fd0\u884c\u7684\u7b2c\u4e00\u4e2a C \u51fd\u6570\u8bbe\u7f6e\u7a0b\u5e8f\u6808\uff08\u6808\u7684\u5927\u5c0f\u53ef\u4ee5\u8bbe\u7f6e\u4e3a4KB\uff09\uff0c\u5e76\u5c06\u8be5\u6808\u653e\u7f6e\u5728 .bss.stack \u6bb5\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u8df3\u8f6c\u6307\u4ee4\uff0c\u8df3\u8f6c\u81f3 main.c \u4e2d\u7684 start_kernel \u51fd\u6570\u5373\u53ef\u3002","title":"4.2 \u7f16\u5199head.S"},{"location":"lab1/#43-makefile","text":"\u9605\u8bfb\u6587\u6863\u4e2d\u5173\u4e8e Makefile \u7684\u7ae0\u8282\uff0c\u4ee5\u53ca\u5de5\u7a0b\u6587\u4ef6\u4e2d\u7684 Makefile \u6587\u4ef6\uff0c\u6839\u636e\u6ce8\u91ca\u5b66\u4f1a Makefile \u7684\u4f7f\u7528\u89c4\u5219\u540e\uff0c\u8865\u5145 lib/Makefile \uff0c\u4f7f\u5de5\u7a0b\u5f97\u4ee5\u7f16\u8bd1\u3002 \u5b8c\u6210\u6b64\u6b65\u540e\u5728\u5de5\u7a0b\u6839\u6587\u4ef6\u5939\u6267\u884c make\uff0c\u53ef\u4ee5\u770b\u5230\u5de5\u7a0b\u6210\u529f\u7f16\u8bd1\u51fa vmlinux\u3002","title":"4.3 \u5b8c\u5584 Makefile \u811a\u672c"},{"location":"lab1/#44-sbic","text":"OpenSBI \u5728 M \u6001\uff0c\u4e3a S \u6001\u63d0\u4f9b\u4e86\u591a\u79cd\u63a5\u53e3\uff0c\u6bd4\u5982\u5b57\u7b26\u4e32\u8f93\u5165\u8f93\u51fa\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u8c03\u7528 OpenSBI \u63a5\u53e3\u7684\u529f\u80fd\u3002\u7ed9\u51fa\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 struct sbiret { long error ; long value ; }; struct sbiret sbi_ecall ( int ext , int fid , uint64 arg0 , uint64 arg1 , uint64 arg2 , uint64 arg3 , uint64 arg4 , uint64 arg5 ); sbi_ecall \u51fd\u6570\u4e2d\uff0c\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5c06 ext (Extension ID) \u653e\u5165\u5bc4\u5b58\u5668 a7 \u4e2d\uff0cfid (Function ID) \u653e\u5165\u5bc4\u5b58\u5668 a6 \u4e2d\uff0c\u5c06 arg0 ~ arg5 \u653e\u5165\u5bc4\u5b58\u5668 a0 ~ a5 \u4e2d\u3002 \u4f7f\u7528 ecall \u6307\u4ee4\u3002 ecall \u4e4b\u540e\u7cfb\u7edf\u4f1a\u8fdb\u5165 M \u6a21\u5f0f\uff0c\u4e4b\u540e OpenSBI \u4f1a\u5b8c\u6210\u76f8\u5173\u64cd\u4f5c\u3002 OpenSBI \u7684\u8fd4\u56de\u7ed3\u679c\u4f1a\u5b58\u653e\u5728\u5bc4\u5b58\u5668 a0 \uff0c a1 \u4e2d\uff0c\u5176\u4e2d a0 \u4e3a error code\uff0c a1 \u4e3a\u8fd4\u56de\u503c\uff0c \u6211\u4eec\u7528 sbiret \u6765\u63a5\u53d7\u8fd9\u4e24\u4e2a\u8fd4\u56de\u503c\u3002 \u540c\u5b66\u4eec\u53ef\u4ee5\u53c2\u7167\u5185\u8054\u6c47\u7f16\u7684\u793a\u4f8b\u4e00\u5b8c\u6210\u8be5\u51fd\u6570\u7684\u7f16\u5199\u3002 \u7f16\u5199\u6210\u529f\u540e\uff0c\u8c03\u7528 sbi_ecall(0x1, 0x0, 0x30, 0, 0, 0, 0, 0) \u5c06\u4f1a\u8f93\u51fa\u5b57\u7b26'0'\u3002\u5176\u4e2d 0x1 \u4ee3\u8868 sbi_console_putchar \u7684 ExtensionID\uff0c 0x0 \u4ee3\u8868FunctionID, 0x30\u4ee3\u8868'0'\u7684ascii\u503c\uff0c\u5176\u4f59\u53c2\u6570\u586b0\u3002 \u8bf7\u5728 arch/riscv/kernel/sbi.c \u4e2d\u8865\u5145 sbi_ecall() \u3002 \u4e0b\u9762\u5217\u51fa\u4e86\u4e00\u4e9b\u5728\u540e\u7eed\u7684\u5b9e\u9a8c\u4e2d\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u7684\u529f\u80fd\u3002 Function Name Function ID Extension ID sbi_set_timer \uff08\u8bbe\u7f6e\u65f6\u949f\u76f8\u5173\u5bc4\u5b58\u5668\uff09 0 0x00 sbi_console_putchar \uff08\u6253\u5370\u5b57\u7b26\uff09 0 0x01 sbi_console_getchar \uff08\u63a5\u6536\u5b57\u7b26\uff09 0 0x02 sbi_shutdown \uff08\u5173\u673a\uff09 0 0x08","title":"4.4 \u8865\u5145 sbi.c"},{"location":"lab1/#45-puts-puti","text":"\u8c03\u7528\u4ee5\u4e0a\u5b8c\u6210\u7684 sbi_ecall , \u5b8c\u6210 puts() \u548c puti() \u7684\u5b9e\u73b0\u3002 puts() \u7528\u4e8e\u6253\u5370\u5b57\u7b26\u4e32\uff0c puti() \u7528\u4e8e\u6253\u5370\u6574\u578b\u53d8\u91cf\u3002 \u8bf7\u7f16\u5199 lib/print.c \u4e2d\u7684 puts() \u548c puti() \uff0c \u51fd\u6570\u7684\u76f8\u5173\u5b9a\u4e49\u5df2\u7ecf\u5199\u5728\u4e86 print.h \u6587\u4ef6\u3002","title":"4.5 puts() \u548c puti()"},{"location":"lab1/#46-defs","text":"\u5185\u8054\u6c47\u7f16\u7684\u76f8\u5173\u77e5\u8bc6\u89c1 \u5185\u8054\u6c47\u7f16 \u3002 \u5b66\u4e60\u4e86\u89e3\u4e86\u4ee5\u4e0a\u77e5\u8bc6\u540e\uff0c\u8865\u5145 arch/riscv/include/defs.h \u4e2d\u7684\u4ee3\u7801\u5b8c\u6210\uff1a \u8865\u5145\u5b8c read_csr \u8fd9\u4e2a\u5b8f\u5b9a\u4e49\u3002\u8fd9\u91cc\u6709\u76f8\u5173 \u793a\u4f8b \u3002","title":"4.6 \u4fee\u6539 defs"},{"location":"lab1/#5-aarch64","text":"","title":"5 \u5176\u4ed6\u67b6\u6784\u7684\u4ea4\u53c9\u7f16\u8bd1\u2014\u2014\u4ee5 Aarch64 \u4e3a\u4f8b"},{"location":"lab1/#51","text":"\u90a3\u4e48\u5982\u4f55\u5b89\u88c5\u4e0d\u540c\u67b6\u6784\u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u5462\uff1f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7528 Ubuntu \u81ea\u5e26\u7684\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668 apt \uff0c\u5148\u627e\u5230\u6709\u4ec0\u4e48\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u53ef\u4ee5\u88c5 1 2 3 4 5 # \u641c\u7d22\u5305\u542b aarch64 \u7684\u8f6f\u4ef6\u5305\uff0c\u4e00\u822c\u662f\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177 apt-cache search aarch64 ... # \u641c\u7d22\u7ed3\u679c\u4e2d\u5982\u679c\u6709 gcc-xxx-linux-gnu\uff0c\u4e00\u822c\u9700\u6c42\u4e0b\u88c5\u5b83\u5c31\u884c\u4e86\uff08\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u54c8\uff09 sudo apt install gcc-aarch64-linux-gnu \u73b0\u5728\u6211\u4eec\u6709 aarch64 \u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u4e86\uff0c\u5f00\u59cb\u7f16\u8bd1\u5427\uff01","title":"5.1 \u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\u94fe\u7684\u5b89\u88c5"},{"location":"lab1/#52","text":"\u6ce8\u610f\uff1a\u8fd9\u91cc\u8bf4\u7684\u201c\u7f16\u8bd1\u8fc7\u7a0b\u201d\u5305\u62ec\u9884\u5904\u7406\u3001\u7f16\u8bd1\u3001\u6c47\u7f16\u3001\u94fe\u63a5 \u5bf9\u4e8e Linux kernel\uff0c\u7f16\u8bd1\u547d\u4ee4\u548c\u9009\u9879\u5728\u4e0d\u540c\u67b6\u6784\u4e4b\u95f4\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u4e00\u822c\u9075\u5faa\u4ee5\u4e0b\u5f62\u5f0f\uff08\u7c7b\u6bd4 lab0 \u505a\u8fc7\u7684 riscv64 \u5373\u53ef\uff09 1 make ARCH=xxx CROSS_COMPILE=some-certain-arch- <options> <files> \u6bd4\u5982\uff0c\u60f3\u83b7\u5f97 kernel \u4e2d xxx.c \u7684\u9884\u5904\u7406\u4ea7\u7269\uff08\u56de\u5fc6\u4e00\u4e0b\u9884\u5904\u7406\u505a\u4e86\u4ec0\u4e48\uff09 xxx.i \uff0c\u6211\u4eec\u53ef\u4ee5 1 2 3 4 5 # \u5148 config make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig # \u7136\u540e\u6307\u5b9a\u8981\u751f\u6210\u7684\u6587\u4ef6 make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- path/to/file/xxx.i \u8bfe\u4ef6\u91cc\u4e5f\u7ed9\u51fa\u4e86 make \u5de5\u5177\u3002","title":"5.2 \u600e\u4e48\u83b7\u5f97\u7f16\u8bd1\u8fc7\u7a0b\u7684\u4e2d\u95f4\u4ea7\u7269"},{"location":"lab1/#_3","text":"\u8bf7\u603b\u7ed3\u4e00\u4e0b RISC-V \u7684 calling convention\uff0c\u5e76\u89e3\u91ca Caller / Callee Saved Register \u6709\u4ec0\u4e48\u533a\u522b\uff1f \u7f16\u8bd1\u4e4b\u540e\uff0c\u901a\u8fc7 System.map \u67e5\u770b vmlinux.lds \u4e2d\u81ea\u5b9a\u4e49\u7b26\u53f7\u7684\u503c\uff08\u622a\u56fe\uff09\u3002 \u7528 csr_read \u5b8f\u8bfb\u53d6 sstatus \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5bf9\u7167 RISC-V \u624b\u518c\u89e3\u91ca\u5176\u542b\u4e49\uff08\u622a\u56fe\uff09\u3002 \u7528 csr_write \u5b8f\u5411 sscratch \u5bc4\u5b58\u5668\u5199\u5165\u6570\u636e\uff0c\u5e76\u9a8c\u8bc1\u662f\u5426\u5199\u5165\u6210\u529f\uff08\u622a\u56fe\uff09\u3002 Detail your steps about how to get arch/arm64/kernel/sys.i Find system call table of Linux v6.0 for ARM32 , RISC-V(32 bit) , RISC-V(64 bit) , x86(32 bit) , x86_64 List source code file, the whole system call table with macro expanded, screenshot every step. Explain what is ELF file? Try readelf and objdump command on an ELF file, give screenshot of the output. Run an ELF file and cat /proc/PID /maps to give its memory layout. 5, 6, 7 need to have screenshots.","title":"\u601d\u8003\u9898"},{"location":"lab1/#_4","text":"\u5b9e\u9a8c\u62a5\u544a\u9700\u8981\u5305\u542b\u5bf9\u6240\u6709\u601d\u8003\u9898\u7684\u56de\u7b54\uff0c\u6709\u622a\u56fe\u8981\u6c42\u7684\u8981\u622a\u56fe\u3002 \u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u4f5c\u4e1a\u63d0\u4ea4"},{"location":"lab2/","text":"Lab 2: RV64 \u65f6\u949f\u4e2d\u65ad\u5904\u7406 1 \u5b9e\u9a8c\u76ee\u7684 \u5b66\u4e60 RISC-V \u7684 trap \u5904\u7406\u76f8\u5173\u5bc4\u5b58\u5668\u4e0e\u6307\u4ee4\uff0c\u5b8c\u6210\u5bf9 trap \u5904\u7406\u7684\u521d\u59cb\u5316\u3002 \u7406\u89e3 CPU \u4e0a\u4e0b\u6587\u5207\u6362\u673a\u5236\uff0c\u5e76\u6b63\u786e\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u529f\u80fd\u3002 \u7f16\u5199 trap \u5904\u7406\u51fd\u6570\uff0c\u5b8c\u6210\u5bf9\u7279\u5b9a trap \u7684\u5904\u7406\u3002 \u8c03\u7528 OpenSBI \u63d0\u4f9b\u7684\u63a5\u53e3\uff0c\u5b8c\u6210\u5bf9\u65f6\u949f\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8bbe\u7f6e\u3002 2 \u5b9e\u9a8c\u73af\u5883 Environment in previous labs 3 \u80cc\u666f\u77e5\u8bc6 3.0 \u524d\u8a00 \u5728 lab1 \u4e2d\u6211\u4eec\u6210\u529f\u7684\u5c06\u4e00\u4e2a\u6700\u7b80\u5355\u7684 OS \u542f\u52a8\u8d77\u6765\uff0c \u4f46\u8fd8\u6ca1\u6709\u529e\u6cd5\u4e0e\u4e4b\u4ea4\u4e92\u3002\u6211\u4eec\u5728\u8bfe\u7a0b\u4e2d\u8bb2\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u542f\u52a8\u4e4b\u540e\u7531 \u4e8b\u4ef6 \uff08 event \uff09\u9a71\u52a8\uff0c\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u6211\u4eec\u5c06\u5f15\u5165\u4e00\u79cd\u91cd\u8981\u7684\u4e8b\u4ef6 trap \uff0ctrap \u7ed9\u4e86 OS \u4e0e\u786c\u4ef6\u3001\u8f6f\u4ef6\u4ea4\u4e92\u7684\u80fd\u529b\u3002\u5728 lab1 \u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u5728 RISC-V \u4e2d\u6709\u4e09\u79cd\u7279\u6743\u7ea7 ( M \u6001\u3001 S \u6001\u3001 U \u6001 )\uff0c \u5728 Boot \u9636\u6bb5\uff0c OpenSBI \u5df2\u7ecf\u5e2e\u6211\u4eec\u5c06 M \u6001\u7684 trap \u5904\u7406\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u8fd9\u4e00\u90e8\u5206\u4e0d\u9700\u8981\u6211\u4eec\u518d\u53bb\u5b9e\u73b0\uff0c\u56e0\u6b64\u672c\u6b21\u8bd5\u9a8c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 S \u6001\u7684 trap \u5904\u7406\u3002 3.1 RISC-V \u4e2d\u7684 Interrupt \u548c Exception 3.1.1 \u4ec0\u4e48\u662f Interrupt \u548c Exception We use the term exception to refer to an unusual condition occurring at run time associated with an instruction in the current RISC-V hart. We use the term interrupt to refer to an external asynchronous event that may cause a RISC-V hart to experience an unexpected transfer of control. We use the term trap to refer to the transfer of control to a trap handler caused by either an exception or an interrupt. \u4e0a\u8ff0\u662f RISC-V Unprivileged Spec 1.6 \u8282\u4e2d\u5bf9\u4e8e Trap \u3001 Interrupt \u4e0e Exception \u7684\u63cf\u8ff0\u3002\u603b\u7ed3\u8d77\u6765 Interrupt \u4e0e Exception \u7684\u4e3b\u8981\u533a\u522b\u5982\u4e0b\u8868\uff1a Interrupt Exception Hardware generate Software generate These are asynchronous external requests for service (like keyboard or printer needs service). These are synchronous internal requests for service based upon abnormal events (think of illegal instructions, illegal address, overflow etc). These are normal events and shouldn\u2019t interfere with the normal running of a computer. These are abnormal events and often result in the termination of a program \u4e0a\u6587\u4e2d\u7684 Trap \u63cf\u8ff0\u7684\u662f\u4e00\u79cd\u63a7\u5236\u8f6c\u79fb\u7684\u8fc7\u7a0b, \u8fd9\u4e2a\u8fc7\u7a0b\u662f\u7531 Interrupt \u6216\u8005 Exception \u5f15\u8d77\u7684\u3002\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u7ea6\u5b9a Trap \u4e3a Interrput \u4e0e Exception \u7684\u603b\u79f0\u3002 3.1.2 \u76f8\u5173\u5bc4\u5b58\u5668 \u9664\u4e8632\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u4e4b\u5916\uff0cRISC-V \u67b6\u6784\u8fd8\u6709\u5927\u91cf\u7684 \u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668 Control and Status Registers(CSRs) \uff0c\u4e0b\u9762\u5c06\u4ecb\u7ecd\u51e0\u4e2a\u548c trap \u673a\u5236\u76f8\u5173\u7684\u91cd\u8981\u5bc4\u5b58\u5668\u3002 Supervisor Mode \u4e0b trap \u76f8\u5173\u5bc4\u5bc4\u5b58\u5668: sstatus ( Supervisor Status Register )\u4e2d\u5b58\u5728\u4e00\u4e2a SIE ( Supervisor Interrupt Enable ) \u6bd4\u7279\u4f4d\uff0c\u5f53\u8be5\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u4f1a \u54cd\u5e94 \u6240\u6709\u7684 S \u6001 trap\uff0c \u5426\u5219\u5c06\u4f1a\u7981\u7528\u6240\u6709 S \u6001 trap\u3002 sie ( Supervisor Interrupt Eable Register )\u3002\u5728 RISC-V \u4e2d\uff0c Interrupt \u88ab\u5212\u5206\u4e3a\u4e09\u7c7b Software Interrupt \uff0c Timer Interrupt \uff0c External Interrupt \u3002\u5728\u5f00\u542f\u4e86 sstatus[SIE] \u4e4b\u540e\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e sie \u4e2d\u7684\u76f8\u5173\u6bd4\u7279\u4f4d\u6765\u51b3\u5b9a\u662f\u5426\u5bf9\u8be5 Interrupt \u8fdb\u884c \u5904\u7406 \u3002 stvec ( Supervisor Trap Vector Base Address Register ) \u5373\u6240\u8c13\u7684\u201c\u4e2d\u65ad\u5411\u91cf\u8868\u57fa\u5740\u201d\u3002 stvec \u6709\u4e24\u79cd\u6a21\u5f0f\uff1a Direct \u6a21\u5f0f \uff0c\u9002\u7528\u4e8e\u7cfb\u7edf\u4e2d\u53ea\u6709\u4e00\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f, \u5176\u6307\u5411\u4e2d\u65ad\u5904\u7406\u5165\u53e3\u51fd\u6570 \uff08 \u672c\u6b21\u5b9e\u9a8c\u4e2d\u6211\u4eec\u6240\u7528\u7684\u6a21\u5f0f \uff09\u3002 Vectored \u6a21\u5f0f \uff0c\u6307\u5411\u4e2d\u65ad\u5411\u91cf\u8868\uff0c \u9002\u7528\u4e8e\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \uff08 \u8be5\u6a21\u5f0f\u53ef\u4ee5\u53c2\u8003 RISC-V \u5185\u6838\u6e90\u7801 \uff09\u3002 scause ( Supervisor Cause Register ), \u4f1a\u8bb0\u5f55 trap \u53d1\u751f\u7684\u539f\u56e0\uff0c\u8fd8\u4f1a\u8bb0\u5f55\u8be5 trap \u662f Interrupt \u8fd8\u662f Exception \u3002 sepc ( Supervisor Exception Program Counter ), \u4f1a\u8bb0\u5f55\u89e6\u53d1 exception \u7684\u90a3\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 Machine Mode \u5f02\u5e38\u76f8\u5173\u5bc4\u5bc4\u5b58\u5668: \u7c7b\u4f3c\u4e8e Supervisor Mode\uff0c Machine Mode \u4e5f\u6709\u76f8\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u4f46\u7531\u4e8e\u672c\u5b9e\u9a8c\u540c\u5b66\u4e0d\u9700\u8981\u64cd\u4f5c\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u6545\u4e0d\u5728\u6b64\u4f5c\u4ecb\u7ecd\u3002 \u4ee5\u4e0a\u5bc4\u5b58\u5668\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u540c\u5b66\u4eec\u53c2\u8003 RISC-V Privileged Spec 3.1.3 \u76f8\u5173\u7279\u6743\u6307\u4ee4 ecall ( Environment Call )\uff0c\u5f53\u6211\u4eec\u5728 S \u6001\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2a ecall-from-s-mode-exception \uff0c\u4ece\u800c\u8fdb\u5165 M Mode \u4e0b\u7684\u5904\u7406\u6d41\u7a0b( \u5982\u8bbe\u7f6e\u5b9a\u65f6\u5668\u7b49 )\uff1b\u5f53\u6211\u4eec\u5728 U \u6001\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2a ecall-from-u-mode-exception \uff0c\u4ece\u800c\u8fdb\u5165 S Mode \u4e0b\u7684\u5904\u7406\u6d41\u7a0b ( \u5e38\u7528\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528 )\u3002 sret \u7528\u4e8e S \u6001 trap \u8fd4\u56de, \u901a\u8fc7 sepc \u6765\u8bbe\u7f6e pc \u7684\u503c\uff0c \u8fd4\u56de\u5230\u4e4b\u524d\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\u3002 \u4ee5\u4e0a\u6307\u4ee4\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u540c\u5b66\u4eec\u53c2\u8003 RISC-V Privileged Spec 3.2 \u4e0a\u4e0b\u6587\u5904\u7406 \u7531\u4e8e\u5728\u5904\u7406 trap \u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7cfb\u7edf\u7684\u72b6\u6001\u3002\u6240\u4ee5\u5728\u771f\u6b63\u5904\u7406 trap \u4e4b\u524d\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5bf9\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u5728\u5904\u7406\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u5c06\u7cfb\u7edf\u6062\u590d\u81f3\u539f\u5148\u7684\u72b6\u6001\uff0c\u5c31\u53ef\u4ee5\u786e\u4fdd\u4e4b\u524d\u7684\u7a0b\u5e8f\u7ee7\u7eed\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u91cc\u7684\u7cfb\u7edf\u72b6\u6001\u901a\u5e38\u662f\u6307\u5bc4\u5b58\u5668\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e5f\u53eb\u505aCPU\u7684\u4e0a\u4e0b\u6587 ( Context ). 3.3 trap \u5904\u7406\u7a0b\u5e8f trap \u5904\u7406\u7a0b\u5e8f\u6839\u636e scause \u7684\u503c\uff0c \u8fdb\u5165\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u5728\u672c\u6b21\u8bd5\u9a8c\u4e2d\u6211\u4eec\u9700\u8981\u5173\u5fc3\u7684\u53ea\u6709 Superviosr Timer Interrupt \u3002 3.4 \u65f6\u949f\u4e2d\u65ad \u65f6\u949f\u4e2d\u65ad\u9700\u8981 CPU \u786c\u4ef6\u7684\u652f\u6301\u3002CPU \u4ee5\u201c\u65f6\u949f\u5468\u671f\u201d\u4e3a\u5de5\u4f5c\u7684\u57fa\u672c\u65f6\u95f4\u5355\u4f4d\uff0c\u5bf9\u903b\u8f91\u95e8\u7684\u65f6\u5e8f\u7535\u8def\u8fdb\u884c\u540c\u6b65\u3002\u800c\u65f6\u949f\u4e2d\u65ad\u5b9e\u9645\u4e0a\u5c31\u662f\u201c\u6bcf\u9694\u82e5\u5e72\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u6b21\u7684\u7a0b\u5e8f\u201d\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e0e\u65f6\u949f\u4e2d\u65ad\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u4ee5\u53ca\u5982\u4f55\u4ea7\u751f\u65f6\u949f\u4e2d\u65ad\u3002 mtime \u4e0e mtimecmp ( Machine Timer Register )\u3002 mtime \u662f\u4e00\u4e2a\u5b9e\u65f6\u8ba1\u65f6\u5668\uff0c \u7531\u786c\u4ef6\u4ee5\u6052\u5b9a\u7684\u9891\u7387\u81ea\u589e\u3002 mtimecmp \u4e2d\u4fdd\u5b58\u7740\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u53d1\u751f\u7684\u65f6\u95f4\u70b9\uff0c\u5f53 mtime \u7684\u503c\u5927\u4e8e\u6216\u7b49\u4e8e mtimecmp \u7684\u503c\uff0c\u7cfb\u7edf\u5c31\u4f1a\u89e6\u53d1\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u66f4\u65b0 mtimecmp \u4e2d\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u7684\u89e6\u53d1\u70b9\u3002 OpenSBI \u5df2\u7ecf\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u65b0 mtimecmp \u7684\u63a5\u53e3 sbi_set_timer ( \u89c1 lab1 4.4\u8282 )\u3002 mcounteren ( Counter-Enable Registers )\u3002\u7531\u4e8e mtime \u662f\u5c5e\u4e8e M \u6001\u7684\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u5728 S \u6001\u65e0\u6cd5\u76f4\u63a5\u5bf9\u5176\u8bfb\u5199\uff0c \u5e78\u8fd0\u7684\u662f OpenSBI \u5728 M \u6001\u5df2\u7ecf\u901a\u8fc7\u8bbe\u7f6e mcounteren \u5bc4\u5b58\u5668\u7684 TM \u6bd4\u7279\u4f4d\uff0c \u8ba9\u6211\u4eec\u53ef\u4ee5\u5728 S \u6001\u4e2d\u53ef\u4ee5\u901a\u8fc7 time \u8fd9\u4e2a \u53ea\u8bfb \u5bc4\u5b58\u5668\u8bfb\u53d6\u5230 mtime \u7684\u5f53\u524d\u503c\uff0c\u76f8\u5173\u6c47\u7f16\u6307\u4ee4\u662f rdtime \u3002 \u4ee5\u4e0a\u5bc4\u5b58\u5668\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u540c\u5b66\u4eec\u53c2\u8003 RISC-V Privileged Spec 4 \u5b9e\u9a8c\u6b65\u9aa4 4.1 \u51c6\u5907\u5de5\u7a0b \u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab1 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u5728 lab1 \u4e2d\u6211\u4eec\u5b9e\u73b0\u7684 puti puts \u4f7f\u7528\u8d77\u6765\u8f83\u4e3a\u7e41\u7410\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u6211\u4eec\u63d0\u4f9b\u4e86\u7b80\u5316\u7248\u7684 printk \u3002 \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u4ee3\u7801: stddef.h printk.h printk.c \uff0c\u5e76\u6309\u5982\u4e0b\u76ee\u5f55\u7ed3\u6784\u653e\u7f6e\u3002 \u8fd8\u9700\u8981\u5c06\u4e4b\u524d\u6240\u6709 print.h puti puts \u7684\u5f15\u7528\u4fee\u6539\u4e3a printk.h printk \u3002 1 2 3 4 5 6 7 8 9 10 11 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 arch \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 printk.h \u2502 \u251c\u2500\u2500 stddef.h \u2502 \u2514\u2500\u2500 types.h \u251c\u2500\u2500 init \u2514\u2500\u2500 lib \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 printk.c \u4fee\u6539 vmlinux.lds \u4ee5\u53ca head.S 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \u539f\u5148\u7684 vmlinux.lds ... .text : ALIGN(0x1000){ _stext = .; *(.text.entry) *(.text .text.*) _etext = .; } ... >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \u4fee\u6539\u4e4b\u540e\u7684 vmlinux.lds ... .text : ALIGN(0x1000){ _stext = .; *(.text.init) <- \u52a0\u5165\u4e86 .text.init *(.text.entry) <- \u4e4b\u540e\u6211\u4eec\u5b9e\u73b0 \u4e2d\u65ad\u5904\u7406\u903b\u8f91 \u4f1a\u653e\u7f6e\u5728 .text.entry *(.text .text.*) _etext = .; } ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \u539f\u5148\u7684 head.S extern start_kernel .section .text.entry <- \u4e4b\u524d\u7684 _start \u653e\u7f6e\u5728 .text.entry section .globl _start _start: ... .section .bss.stack .globl boot_stack boot_stack: .space 4096 .globl boot_stack_top boot_stack_top: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \u4fee\u6539\u4e4b\u540e\u7684 head.S extern start_kernel .section .text.init <- \u5c06 _start \u653e\u5165.text.init section .globl _start _start: ... .section .bss.stack .globl boot_stack boot_stack: .space 4096 .globl boot_stack_top boot_stack_top: 4.2 \u5f00\u542f trap \u5904\u7406 \u5728\u8fd0\u884c start_kernel \u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5bf9\u4e0a\u9762\u63d0\u5230\u7684 CSR \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u8bbe\u7f6e stvec \uff0c \u5c06 _traps ( _trap \u5728 4.3 \u4e2d\u5b9e\u73b0 ) \u6240\u8868\u793a\u7684\u5730\u5740\u5199\u5165 stvec \uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 Direct \u6a21\u5f0f , \u800c _traps \u5219\u662f trap \u5904\u7406\u5165\u53e3\u51fd\u6570\u7684\u57fa\u5730\u5740\u3002 \u5f00\u542f\u65f6\u949f\u4e2d\u65ad\uff0c\u5c06 sie[STIE] \u7f6e 1\u3002 \u8bbe\u7f6e\u7b2c\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\uff0c\u53c2\u8003 clock_set_next_event() ( clock_set_next_event() \u5728 4.5 \u4e2d\u4ecb\u7ecd ) \u4e2d\u7684\u903b\u8f91\u7528\u6c47\u7f16\u5b9e\u73b0\u3002 \u5f00\u542f S \u6001\u4e0b\u7684\u4e2d\u65ad\u54cd\u5e94\uff0c \u5c06 sstatus[SIE] \u7f6e 1\u3002 \u6309\u7167\u4e0b\u65b9\u6a21\u7248\u4fee\u6539 arch/riscv/kernel/head.S \uff0c \u5e76\u8865\u5168 _start \u4e2d\u7684\u903b\u8f91\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .extern start_kernel .section .text.init .globl _start _start: # YOUR CODE HERE # ------------------ # set stvec = _traps # ------------------ # set sie[STIE] = 1 # ------------------ # set first time interrupt # ------------------ # set sstatus[SIE] = 1 # ------------------ # ------------------ # - your lab1 code - # ------------------ ... Debug \u63d0\u793a\uff1a\u53ef\u4ee5\u5148\u4e0d\u5b9e\u73b0 stvec \u548c first time interrupt\uff0c\u5148\u5173\u6ce8 sie \u548c sstatus \u662f\u5426\u8bbe\u7f6e\u6b63\u786e\u3002 4.3 \u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362 \u6211\u4eec\u8981\u4f7f\u7528\u6c47\u7f16\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u673a\u5236\uff0c \u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5728 arch/riscv/kernel/ \u76ee\u5f55\u4e0b\u6dfb\u52a0 entry.S \u6587\u4ef6\u3002 \u4fdd\u5b58 CPU \u7684\u5bc4\u5b58\u5668\uff08\u4e0a\u4e0b\u6587\uff09\u5230\u5185\u5b58\u4e2d\uff08\u6808\u4e0a\uff09\u3002 \u5c06 scause \u548c sepc \u4e2d\u7684\u503c\u4f20\u5165 trap \u5904\u7406\u51fd\u6570 trap_handler ( trap_handler \u5728 4.4 \u4e2d\u4ecb\u7ecd ) \uff0c\u6211\u4eec\u5c06\u4f1a\u5728 trap_handler \u4e2d\u5b9e\u73b0\u5bf9 trap \u7684\u5904\u7406\u3002 \u5728\u5b8c\u6210\u5bf9 trap \u7684\u5904\u7406\u4e4b\u540e\uff0c \u6211\u4eec\u4ece\u5185\u5b58\u4e2d\uff08\u6808\u4e0a\uff09\u6062\u590dCPU\u7684\u5bc4\u5b58\u5668\uff08\u4e0a\u4e0b\u6587\uff09\u3002 \u4ece trap \u4e2d\u8fd4\u56de\u3002 \u6309\u7167\u4e0b\u65b9\u6a21\u7248\u4fee\u6539 arch/riscv/kernel/entry.S \uff0c \u5e76\u8865\u5168 _traps \u4e2d\u7684\u903b\u8f91\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .section .text.entry .align 2 .globl _traps _traps : # YOUR CODE HERE # ----------- # 1. save 32 registers and sepc to stack # ----------- # 2. call trap_handler # ----------- # 3. restore sepc and 32 registers (x2(sp) should be restore last) from stack # ----------- # 4. return from trap # ----------- Debug \u63d0\u793a\uff1a \u53ef\u4ee5\u5148\u4e0d\u5b9e\u73b0 call trap_handler\uff0c \u5148\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u903b\u8f91\u3002\u901a\u8fc7 gdb \u8ddf\u8e2a\u5404\u4e2a\u5bc4\u5b58\u5668\uff0c\u786e\u4fdd\u4e0a\u4e0b\u6587\u7684 save \u4e0e restore \u6b63\u786e\u5b9e\u73b0\u5e76\u6b63\u786e\u8fd4\u56de\u3002 4.4 \u5b9e\u73b0 trap \u5904\u7406\u51fd\u6570 \u5728 arch/riscv/kernel/ \u76ee\u5f55\u4e0b\u6dfb\u52a0 trap.c \u6587\u4ef6\u3002 \u5728 trap.c \u4e2d\u5b9e\u73b0 trap \u5904\u7406\u51fd\u6570 trap_handler() , \u5176\u63a5\u6536\u7684\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u662f scause \u548c sepc \u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 // trap.c void trap_handler ( unsigned long scause , unsigned long sepc ) { // \u901a\u8fc7 `scause` \u5224\u65adtrap\u7c7b\u578b // \u5982\u679c\u662finterrupt \u5224\u65ad\u662f\u5426\u662ftimer interrupt // \u5982\u679c\u662ftimer interrupt \u5219\u6253\u5370\u8f93\u51fa\u76f8\u5173\u4fe1\u606f, \u5e76\u901a\u8fc7 `clock_set_next_event()` \u8bbe\u7f6e\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad // `clock_set_next_event()` \u89c1 4.5 \u8282 // \u5176\u4ed6interrupt / exception \u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565 // YOUR CODE HERE } 4.5 \u5b9e\u73b0\u65f6\u949f\u4e2d\u65ad\u76f8\u5173\u51fd\u6570 \u5728 arch/riscv/kernel/ \u76ee\u5f55\u4e0b\u6dfb\u52a0 clock.c \u6587\u4ef6\u3002 \u5728 clock.c \u4e2d\u5b9e\u73b0 get_cycles ( ) : \u4f7f\u7528 rdtime \u6c47\u7f16\u6307\u4ee4\u83b7\u5f97\u5f53\u524d time \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002 \u5728 clock.c \u4e2d\u5b9e\u73b0 clock_set_next_event ( ) : \u8c03\u7528 sbi_ecall \uff0c\u8bbe\u7f6e\u4e0b\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u4e8b\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // clock.c // QEMU\u4e2d\u65f6\u949f\u7684\u9891\u7387\u662f10MHz, \u4e5f\u5c31\u662f1\u79d2\u949f\u76f8\u5f53\u4e8e10000000\u4e2a\u65f6\u949f\u5468\u671f\u3002 unsigned long TIMECLOCK = 10000000 ; unsigned long get_cycles () { // \u7f16\u5199\u5185\u8054\u6c47\u7f16\uff0c\u4f7f\u7528 rdtime \u83b7\u53d6 time \u5bc4\u5b58\u5668\u4e2d (\u4e5f\u5c31\u662fmtime \u5bc4\u5b58\u5668 )\u7684\u503c\u5e76\u8fd4\u56de // YOUR CODE HERE } void clock_set_next_event () { // \u4e0b\u4e00\u6b21 \u65f6\u949f\u4e2d\u65ad \u7684\u65f6\u95f4\u70b9 unsigned long next = get_cycles () + TIMECLOCK ; // \u4f7f\u7528 sbi_ecall \u6765\u5b8c\u6210\u5bf9\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u7684\u8bbe\u7f6e // YOUR CODE HERE } 4.6 \u7f16\u8bd1\u53ca\u6d4b\u8bd5 \u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6\uff0c\u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539\uff0c\u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6b63\u786e\u5b9e\u73b0\u7684\u8f93\u51fa\u6837\u4f8b\u3002\uff08 \u4ec5\u4f9b\u53c2\u8003 \uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt \u601d\u8003\u9898 \u5728\u6211\u4eec\u4f7f\u7528make run\u65f6\uff0c OpenSBI \u4f1a\u4ea7\u751f\u5982\u4e0b\u8f93\u51fa: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ...... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...... 1 \u901a\u8fc7\u67e5\u770b `RISC-V Privileged Spec` \u4e2d\u7684 `medeleg` \u548c `mideleg` \u89e3\u91ca\u4e0a\u9762 `MIDELEG` \u503c\u7684\u542b\u4e49\u3002 \u4f5c\u4e1a\u63d0\u4ea4 \u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u5b9e\u9a8c\u6307\u5bfc\u4e8c"},{"location":"lab2/#lab-2-rv64","text":"","title":"Lab 2: RV64 \u65f6\u949f\u4e2d\u65ad\u5904\u7406"},{"location":"lab2/#1","text":"\u5b66\u4e60 RISC-V \u7684 trap \u5904\u7406\u76f8\u5173\u5bc4\u5b58\u5668\u4e0e\u6307\u4ee4\uff0c\u5b8c\u6210\u5bf9 trap \u5904\u7406\u7684\u521d\u59cb\u5316\u3002 \u7406\u89e3 CPU \u4e0a\u4e0b\u6587\u5207\u6362\u673a\u5236\uff0c\u5e76\u6b63\u786e\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u529f\u80fd\u3002 \u7f16\u5199 trap \u5904\u7406\u51fd\u6570\uff0c\u5b8c\u6210\u5bf9\u7279\u5b9a trap \u7684\u5904\u7406\u3002 \u8c03\u7528 OpenSBI \u63d0\u4f9b\u7684\u63a5\u53e3\uff0c\u5b8c\u6210\u5bf9\u65f6\u949f\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8bbe\u7f6e\u3002","title":"1 \u5b9e\u9a8c\u76ee\u7684"},{"location":"lab2/#2","text":"Environment in previous labs","title":"2 \u5b9e\u9a8c\u73af\u5883"},{"location":"lab2/#3","text":"","title":"3 \u80cc\u666f\u77e5\u8bc6"},{"location":"lab2/#30","text":"\u5728 lab1 \u4e2d\u6211\u4eec\u6210\u529f\u7684\u5c06\u4e00\u4e2a\u6700\u7b80\u5355\u7684 OS \u542f\u52a8\u8d77\u6765\uff0c \u4f46\u8fd8\u6ca1\u6709\u529e\u6cd5\u4e0e\u4e4b\u4ea4\u4e92\u3002\u6211\u4eec\u5728\u8bfe\u7a0b\u4e2d\u8bb2\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u542f\u52a8\u4e4b\u540e\u7531 \u4e8b\u4ef6 \uff08 event \uff09\u9a71\u52a8\uff0c\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u6211\u4eec\u5c06\u5f15\u5165\u4e00\u79cd\u91cd\u8981\u7684\u4e8b\u4ef6 trap \uff0ctrap \u7ed9\u4e86 OS \u4e0e\u786c\u4ef6\u3001\u8f6f\u4ef6\u4ea4\u4e92\u7684\u80fd\u529b\u3002\u5728 lab1 \u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u5728 RISC-V \u4e2d\u6709\u4e09\u79cd\u7279\u6743\u7ea7 ( M \u6001\u3001 S \u6001\u3001 U \u6001 )\uff0c \u5728 Boot \u9636\u6bb5\uff0c OpenSBI \u5df2\u7ecf\u5e2e\u6211\u4eec\u5c06 M \u6001\u7684 trap \u5904\u7406\u8fdb\u884c\u4e86\u521d\u59cb\u5316\uff0c\u8fd9\u4e00\u90e8\u5206\u4e0d\u9700\u8981\u6211\u4eec\u518d\u53bb\u5b9e\u73b0\uff0c\u56e0\u6b64\u672c\u6b21\u8bd5\u9a8c\u6211\u4eec\u91cd\u70b9\u5173\u6ce8 S \u6001\u7684 trap \u5904\u7406\u3002","title":"3.0 \u524d\u8a00"},{"location":"lab2/#31-risc-v-interrupt-exception","text":"","title":"3.1 RISC-V \u4e2d\u7684 Interrupt \u548c Exception"},{"location":"lab2/#311-interrupt-exception","text":"We use the term exception to refer to an unusual condition occurring at run time associated with an instruction in the current RISC-V hart. We use the term interrupt to refer to an external asynchronous event that may cause a RISC-V hart to experience an unexpected transfer of control. We use the term trap to refer to the transfer of control to a trap handler caused by either an exception or an interrupt. \u4e0a\u8ff0\u662f RISC-V Unprivileged Spec 1.6 \u8282\u4e2d\u5bf9\u4e8e Trap \u3001 Interrupt \u4e0e Exception \u7684\u63cf\u8ff0\u3002\u603b\u7ed3\u8d77\u6765 Interrupt \u4e0e Exception \u7684\u4e3b\u8981\u533a\u522b\u5982\u4e0b\u8868\uff1a Interrupt Exception Hardware generate Software generate These are asynchronous external requests for service (like keyboard or printer needs service). These are synchronous internal requests for service based upon abnormal events (think of illegal instructions, illegal address, overflow etc). These are normal events and shouldn\u2019t interfere with the normal running of a computer. These are abnormal events and often result in the termination of a program \u4e0a\u6587\u4e2d\u7684 Trap \u63cf\u8ff0\u7684\u662f\u4e00\u79cd\u63a7\u5236\u8f6c\u79fb\u7684\u8fc7\u7a0b, \u8fd9\u4e2a\u8fc7\u7a0b\u662f\u7531 Interrupt \u6216\u8005 Exception \u5f15\u8d77\u7684\u3002\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u7ea6\u5b9a Trap \u4e3a Interrput \u4e0e Exception \u7684\u603b\u79f0\u3002","title":"3.1.1 \u4ec0\u4e48\u662f Interrupt \u548c Exception"},{"location":"lab2/#312","text":"\u9664\u4e8632\u4e2a\u901a\u7528\u5bc4\u5b58\u5668\u4e4b\u5916\uff0cRISC-V \u67b6\u6784\u8fd8\u6709\u5927\u91cf\u7684 \u63a7\u5236\u72b6\u6001\u5bc4\u5b58\u5668 Control and Status Registers(CSRs) \uff0c\u4e0b\u9762\u5c06\u4ecb\u7ecd\u51e0\u4e2a\u548c trap \u673a\u5236\u76f8\u5173\u7684\u91cd\u8981\u5bc4\u5b58\u5668\u3002 Supervisor Mode \u4e0b trap \u76f8\u5173\u5bc4\u5bc4\u5b58\u5668: sstatus ( Supervisor Status Register )\u4e2d\u5b58\u5728\u4e00\u4e2a SIE ( Supervisor Interrupt Enable ) \u6bd4\u7279\u4f4d\uff0c\u5f53\u8be5\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u4f1a \u54cd\u5e94 \u6240\u6709\u7684 S \u6001 trap\uff0c \u5426\u5219\u5c06\u4f1a\u7981\u7528\u6240\u6709 S \u6001 trap\u3002 sie ( Supervisor Interrupt Eable Register )\u3002\u5728 RISC-V \u4e2d\uff0c Interrupt \u88ab\u5212\u5206\u4e3a\u4e09\u7c7b Software Interrupt \uff0c Timer Interrupt \uff0c External Interrupt \u3002\u5728\u5f00\u542f\u4e86 sstatus[SIE] \u4e4b\u540e\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e sie \u4e2d\u7684\u76f8\u5173\u6bd4\u7279\u4f4d\u6765\u51b3\u5b9a\u662f\u5426\u5bf9\u8be5 Interrupt \u8fdb\u884c \u5904\u7406 \u3002 stvec ( Supervisor Trap Vector Base Address Register ) \u5373\u6240\u8c13\u7684\u201c\u4e2d\u65ad\u5411\u91cf\u8868\u57fa\u5740\u201d\u3002 stvec \u6709\u4e24\u79cd\u6a21\u5f0f\uff1a Direct \u6a21\u5f0f \uff0c\u9002\u7528\u4e8e\u7cfb\u7edf\u4e2d\u53ea\u6709\u4e00\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f, \u5176\u6307\u5411\u4e2d\u65ad\u5904\u7406\u5165\u53e3\u51fd\u6570 \uff08 \u672c\u6b21\u5b9e\u9a8c\u4e2d\u6211\u4eec\u6240\u7528\u7684\u6a21\u5f0f \uff09\u3002 Vectored \u6a21\u5f0f \uff0c\u6307\u5411\u4e2d\u65ad\u5411\u91cf\u8868\uff0c \u9002\u7528\u4e8e\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f \uff08 \u8be5\u6a21\u5f0f\u53ef\u4ee5\u53c2\u8003 RISC-V \u5185\u6838\u6e90\u7801 \uff09\u3002 scause ( Supervisor Cause Register ), \u4f1a\u8bb0\u5f55 trap \u53d1\u751f\u7684\u539f\u56e0\uff0c\u8fd8\u4f1a\u8bb0\u5f55\u8be5 trap \u662f Interrupt \u8fd8\u662f Exception \u3002 sepc ( Supervisor Exception Program Counter ), \u4f1a\u8bb0\u5f55\u89e6\u53d1 exception \u7684\u90a3\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 Machine Mode \u5f02\u5e38\u76f8\u5173\u5bc4\u5bc4\u5b58\u5668: \u7c7b\u4f3c\u4e8e Supervisor Mode\uff0c Machine Mode \u4e5f\u6709\u76f8\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u4f46\u7531\u4e8e\u672c\u5b9e\u9a8c\u540c\u5b66\u4e0d\u9700\u8981\u64cd\u4f5c\u8fd9\u4e9b\u5bc4\u5b58\u5668\uff0c\u6545\u4e0d\u5728\u6b64\u4f5c\u4ecb\u7ecd\u3002 \u4ee5\u4e0a\u5bc4\u5b58\u5668\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u540c\u5b66\u4eec\u53c2\u8003 RISC-V Privileged Spec","title":"3.1.2 \u76f8\u5173\u5bc4\u5b58\u5668"},{"location":"lab2/#313","text":"ecall ( Environment Call )\uff0c\u5f53\u6211\u4eec\u5728 S \u6001\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2a ecall-from-s-mode-exception \uff0c\u4ece\u800c\u8fdb\u5165 M Mode \u4e0b\u7684\u5904\u7406\u6d41\u7a0b( \u5982\u8bbe\u7f6e\u5b9a\u65f6\u5668\u7b49 )\uff1b\u5f53\u6211\u4eec\u5728 U \u6001\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2a ecall-from-u-mode-exception \uff0c\u4ece\u800c\u8fdb\u5165 S Mode \u4e0b\u7684\u5904\u7406\u6d41\u7a0b ( \u5e38\u7528\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528 )\u3002 sret \u7528\u4e8e S \u6001 trap \u8fd4\u56de, \u901a\u8fc7 sepc \u6765\u8bbe\u7f6e pc \u7684\u503c\uff0c \u8fd4\u56de\u5230\u4e4b\u524d\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\u3002 \u4ee5\u4e0a\u6307\u4ee4\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u540c\u5b66\u4eec\u53c2\u8003 RISC-V Privileged Spec","title":"3.1.3 \u76f8\u5173\u7279\u6743\u6307\u4ee4"},{"location":"lab2/#32","text":"\u7531\u4e8e\u5728\u5904\u7406 trap \u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7cfb\u7edf\u7684\u72b6\u6001\u3002\u6240\u4ee5\u5728\u771f\u6b63\u5904\u7406 trap \u4e4b\u524d\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5bf9\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u5728\u5904\u7406\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u5c06\u7cfb\u7edf\u6062\u590d\u81f3\u539f\u5148\u7684\u72b6\u6001\uff0c\u5c31\u53ef\u4ee5\u786e\u4fdd\u4e4b\u524d\u7684\u7a0b\u5e8f\u7ee7\u7eed\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u91cc\u7684\u7cfb\u7edf\u72b6\u6001\u901a\u5e38\u662f\u6307\u5bc4\u5b58\u5668\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e5f\u53eb\u505aCPU\u7684\u4e0a\u4e0b\u6587 ( Context ).","title":"3.2 \u4e0a\u4e0b\u6587\u5904\u7406"},{"location":"lab2/#33-trap","text":"trap \u5904\u7406\u7a0b\u5e8f\u6839\u636e scause \u7684\u503c\uff0c \u8fdb\u5165\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\uff0c\u5728\u672c\u6b21\u8bd5\u9a8c\u4e2d\u6211\u4eec\u9700\u8981\u5173\u5fc3\u7684\u53ea\u6709 Superviosr Timer Interrupt \u3002","title":"3.3 trap \u5904\u7406\u7a0b\u5e8f"},{"location":"lab2/#34","text":"\u65f6\u949f\u4e2d\u65ad\u9700\u8981 CPU \u786c\u4ef6\u7684\u652f\u6301\u3002CPU \u4ee5\u201c\u65f6\u949f\u5468\u671f\u201d\u4e3a\u5de5\u4f5c\u7684\u57fa\u672c\u65f6\u95f4\u5355\u4f4d\uff0c\u5bf9\u903b\u8f91\u95e8\u7684\u65f6\u5e8f\u7535\u8def\u8fdb\u884c\u540c\u6b65\u3002\u800c\u65f6\u949f\u4e2d\u65ad\u5b9e\u9645\u4e0a\u5c31\u662f\u201c\u6bcf\u9694\u82e5\u5e72\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u6b21\u7684\u7a0b\u5e8f\u201d\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e0e\u65f6\u949f\u4e2d\u65ad\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u4ee5\u53ca\u5982\u4f55\u4ea7\u751f\u65f6\u949f\u4e2d\u65ad\u3002 mtime \u4e0e mtimecmp ( Machine Timer Register )\u3002 mtime \u662f\u4e00\u4e2a\u5b9e\u65f6\u8ba1\u65f6\u5668\uff0c \u7531\u786c\u4ef6\u4ee5\u6052\u5b9a\u7684\u9891\u7387\u81ea\u589e\u3002 mtimecmp \u4e2d\u4fdd\u5b58\u7740\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u53d1\u751f\u7684\u65f6\u95f4\u70b9\uff0c\u5f53 mtime \u7684\u503c\u5927\u4e8e\u6216\u7b49\u4e8e mtimecmp \u7684\u503c\uff0c\u7cfb\u7edf\u5c31\u4f1a\u89e6\u53d1\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u66f4\u65b0 mtimecmp \u4e2d\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u7684\u89e6\u53d1\u70b9\u3002 OpenSBI \u5df2\u7ecf\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u65b0 mtimecmp \u7684\u63a5\u53e3 sbi_set_timer ( \u89c1 lab1 4.4\u8282 )\u3002 mcounteren ( Counter-Enable Registers )\u3002\u7531\u4e8e mtime \u662f\u5c5e\u4e8e M \u6001\u7684\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u5728 S \u6001\u65e0\u6cd5\u76f4\u63a5\u5bf9\u5176\u8bfb\u5199\uff0c \u5e78\u8fd0\u7684\u662f OpenSBI \u5728 M \u6001\u5df2\u7ecf\u901a\u8fc7\u8bbe\u7f6e mcounteren \u5bc4\u5b58\u5668\u7684 TM \u6bd4\u7279\u4f4d\uff0c \u8ba9\u6211\u4eec\u53ef\u4ee5\u5728 S \u6001\u4e2d\u53ef\u4ee5\u901a\u8fc7 time \u8fd9\u4e2a \u53ea\u8bfb \u5bc4\u5b58\u5668\u8bfb\u53d6\u5230 mtime \u7684\u5f53\u524d\u503c\uff0c\u76f8\u5173\u6c47\u7f16\u6307\u4ee4\u662f rdtime \u3002 \u4ee5\u4e0a\u5bc4\u5b58\u5668\u7684\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u540c\u5b66\u4eec\u53c2\u8003 RISC-V Privileged Spec","title":"3.4 \u65f6\u949f\u4e2d\u65ad"},{"location":"lab2/#4","text":"","title":"4 \u5b9e\u9a8c\u6b65\u9aa4"},{"location":"lab2/#41","text":"\u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab1 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u5728 lab1 \u4e2d\u6211\u4eec\u5b9e\u73b0\u7684 puti puts \u4f7f\u7528\u8d77\u6765\u8f83\u4e3a\u7e41\u7410\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u6211\u4eec\u63d0\u4f9b\u4e86\u7b80\u5316\u7248\u7684 printk \u3002 \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u4ee3\u7801: stddef.h printk.h printk.c \uff0c\u5e76\u6309\u5982\u4e0b\u76ee\u5f55\u7ed3\u6784\u653e\u7f6e\u3002 \u8fd8\u9700\u8981\u5c06\u4e4b\u524d\u6240\u6709 print.h puti puts \u7684\u5f15\u7528\u4fee\u6539\u4e3a printk.h printk \u3002 1 2 3 4 5 6 7 8 9 10 11 . \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 arch \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 printk.h \u2502 \u251c\u2500\u2500 stddef.h \u2502 \u2514\u2500\u2500 types.h \u251c\u2500\u2500 init \u2514\u2500\u2500 lib \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 printk.c \u4fee\u6539 vmlinux.lds \u4ee5\u53ca head.S 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \u539f\u5148\u7684 vmlinux.lds ... .text : ALIGN(0x1000){ _stext = .; *(.text.entry) *(.text .text.*) _etext = .; } ... >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \u4fee\u6539\u4e4b\u540e\u7684 vmlinux.lds ... .text : ALIGN(0x1000){ _stext = .; *(.text.init) <- \u52a0\u5165\u4e86 .text.init *(.text.entry) <- \u4e4b\u540e\u6211\u4eec\u5b9e\u73b0 \u4e2d\u65ad\u5904\u7406\u903b\u8f91 \u4f1a\u653e\u7f6e\u5728 .text.entry *(.text .text.*) _etext = .; } ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \u539f\u5148\u7684 head.S extern start_kernel .section .text.entry <- \u4e4b\u524d\u7684 _start \u653e\u7f6e\u5728 .text.entry section .globl _start _start: ... .section .bss.stack .globl boot_stack boot_stack: .space 4096 .globl boot_stack_top boot_stack_top: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> \u4fee\u6539\u4e4b\u540e\u7684 head.S extern start_kernel .section .text.init <- \u5c06 _start \u653e\u5165.text.init section .globl _start _start: ... .section .bss.stack .globl boot_stack boot_stack: .space 4096 .globl boot_stack_top boot_stack_top:","title":"4.1 \u51c6\u5907\u5de5\u7a0b"},{"location":"lab2/#42-trap","text":"\u5728\u8fd0\u884c start_kernel \u4e4b\u524d\uff0c\u6211\u4eec\u8981\u5bf9\u4e0a\u9762\u63d0\u5230\u7684 CSR \u8fdb\u884c\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u8bbe\u7f6e stvec \uff0c \u5c06 _traps ( _trap \u5728 4.3 \u4e2d\u5b9e\u73b0 ) \u6240\u8868\u793a\u7684\u5730\u5740\u5199\u5165 stvec \uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 Direct \u6a21\u5f0f , \u800c _traps \u5219\u662f trap \u5904\u7406\u5165\u53e3\u51fd\u6570\u7684\u57fa\u5730\u5740\u3002 \u5f00\u542f\u65f6\u949f\u4e2d\u65ad\uff0c\u5c06 sie[STIE] \u7f6e 1\u3002 \u8bbe\u7f6e\u7b2c\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\uff0c\u53c2\u8003 clock_set_next_event() ( clock_set_next_event() \u5728 4.5 \u4e2d\u4ecb\u7ecd ) \u4e2d\u7684\u903b\u8f91\u7528\u6c47\u7f16\u5b9e\u73b0\u3002 \u5f00\u542f S \u6001\u4e0b\u7684\u4e2d\u65ad\u54cd\u5e94\uff0c \u5c06 sstatus[SIE] \u7f6e 1\u3002 \u6309\u7167\u4e0b\u65b9\u6a21\u7248\u4fee\u6539 arch/riscv/kernel/head.S \uff0c \u5e76\u8865\u5168 _start \u4e2d\u7684\u903b\u8f91\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .extern start_kernel .section .text.init .globl _start _start: # YOUR CODE HERE # ------------------ # set stvec = _traps # ------------------ # set sie[STIE] = 1 # ------------------ # set first time interrupt # ------------------ # set sstatus[SIE] = 1 # ------------------ # ------------------ # - your lab1 code - # ------------------ ... Debug \u63d0\u793a\uff1a\u53ef\u4ee5\u5148\u4e0d\u5b9e\u73b0 stvec \u548c first time interrupt\uff0c\u5148\u5173\u6ce8 sie \u548c sstatus \u662f\u5426\u8bbe\u7f6e\u6b63\u786e\u3002","title":"4.2 \u5f00\u542f trap \u5904\u7406"},{"location":"lab2/#43","text":"\u6211\u4eec\u8981\u4f7f\u7528\u6c47\u7f16\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u673a\u5236\uff0c \u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5728 arch/riscv/kernel/ \u76ee\u5f55\u4e0b\u6dfb\u52a0 entry.S \u6587\u4ef6\u3002 \u4fdd\u5b58 CPU \u7684\u5bc4\u5b58\u5668\uff08\u4e0a\u4e0b\u6587\uff09\u5230\u5185\u5b58\u4e2d\uff08\u6808\u4e0a\uff09\u3002 \u5c06 scause \u548c sepc \u4e2d\u7684\u503c\u4f20\u5165 trap \u5904\u7406\u51fd\u6570 trap_handler ( trap_handler \u5728 4.4 \u4e2d\u4ecb\u7ecd ) \uff0c\u6211\u4eec\u5c06\u4f1a\u5728 trap_handler \u4e2d\u5b9e\u73b0\u5bf9 trap \u7684\u5904\u7406\u3002 \u5728\u5b8c\u6210\u5bf9 trap \u7684\u5904\u7406\u4e4b\u540e\uff0c \u6211\u4eec\u4ece\u5185\u5b58\u4e2d\uff08\u6808\u4e0a\uff09\u6062\u590dCPU\u7684\u5bc4\u5b58\u5668\uff08\u4e0a\u4e0b\u6587\uff09\u3002 \u4ece trap \u4e2d\u8fd4\u56de\u3002 \u6309\u7167\u4e0b\u65b9\u6a21\u7248\u4fee\u6539 arch/riscv/kernel/entry.S \uff0c \u5e76\u8865\u5168 _traps \u4e2d\u7684\u903b\u8f91\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .section .text.entry .align 2 .globl _traps _traps : # YOUR CODE HERE # ----------- # 1. save 32 registers and sepc to stack # ----------- # 2. call trap_handler # ----------- # 3. restore sepc and 32 registers (x2(sp) should be restore last) from stack # ----------- # 4. return from trap # ----------- Debug \u63d0\u793a\uff1a \u53ef\u4ee5\u5148\u4e0d\u5b9e\u73b0 call trap_handler\uff0c \u5148\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u903b\u8f91\u3002\u901a\u8fc7 gdb \u8ddf\u8e2a\u5404\u4e2a\u5bc4\u5b58\u5668\uff0c\u786e\u4fdd\u4e0a\u4e0b\u6587\u7684 save \u4e0e restore \u6b63\u786e\u5b9e\u73b0\u5e76\u6b63\u786e\u8fd4\u56de\u3002","title":"4.3 \u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362"},{"location":"lab2/#44-trap","text":"\u5728 arch/riscv/kernel/ \u76ee\u5f55\u4e0b\u6dfb\u52a0 trap.c \u6587\u4ef6\u3002 \u5728 trap.c \u4e2d\u5b9e\u73b0 trap \u5904\u7406\u51fd\u6570 trap_handler() , \u5176\u63a5\u6536\u7684\u4e24\u4e2a\u53c2\u6570\u5206\u522b\u662f scause \u548c sepc \u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 // trap.c void trap_handler ( unsigned long scause , unsigned long sepc ) { // \u901a\u8fc7 `scause` \u5224\u65adtrap\u7c7b\u578b // \u5982\u679c\u662finterrupt \u5224\u65ad\u662f\u5426\u662ftimer interrupt // \u5982\u679c\u662ftimer interrupt \u5219\u6253\u5370\u8f93\u51fa\u76f8\u5173\u4fe1\u606f, \u5e76\u901a\u8fc7 `clock_set_next_event()` \u8bbe\u7f6e\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad // `clock_set_next_event()` \u89c1 4.5 \u8282 // \u5176\u4ed6interrupt / exception \u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565 // YOUR CODE HERE }","title":"4.4 \u5b9e\u73b0 trap \u5904\u7406\u51fd\u6570"},{"location":"lab2/#45","text":"\u5728 arch/riscv/kernel/ \u76ee\u5f55\u4e0b\u6dfb\u52a0 clock.c \u6587\u4ef6\u3002 \u5728 clock.c \u4e2d\u5b9e\u73b0 get_cycles ( ) : \u4f7f\u7528 rdtime \u6c47\u7f16\u6307\u4ee4\u83b7\u5f97\u5f53\u524d time \u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002 \u5728 clock.c \u4e2d\u5b9e\u73b0 clock_set_next_event ( ) : \u8c03\u7528 sbi_ecall \uff0c\u8bbe\u7f6e\u4e0b\u4e00\u4e2a\u65f6\u949f\u4e2d\u65ad\u4e8b\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // clock.c // QEMU\u4e2d\u65f6\u949f\u7684\u9891\u7387\u662f10MHz, \u4e5f\u5c31\u662f1\u79d2\u949f\u76f8\u5f53\u4e8e10000000\u4e2a\u65f6\u949f\u5468\u671f\u3002 unsigned long TIMECLOCK = 10000000 ; unsigned long get_cycles () { // \u7f16\u5199\u5185\u8054\u6c47\u7f16\uff0c\u4f7f\u7528 rdtime \u83b7\u53d6 time \u5bc4\u5b58\u5668\u4e2d (\u4e5f\u5c31\u662fmtime \u5bc4\u5b58\u5668 )\u7684\u503c\u5e76\u8fd4\u56de // YOUR CODE HERE } void clock_set_next_event () { // \u4e0b\u4e00\u6b21 \u65f6\u949f\u4e2d\u65ad \u7684\u65f6\u95f4\u70b9 unsigned long next = get_cycles () + TIMECLOCK ; // \u4f7f\u7528 sbi_ecall \u6765\u5b8c\u6210\u5bf9\u4e0b\u4e00\u6b21\u65f6\u949f\u4e2d\u65ad\u7684\u8bbe\u7f6e // YOUR CODE HERE }","title":"4.5 \u5b9e\u73b0\u65f6\u949f\u4e2d\u65ad\u76f8\u5173\u51fd\u6570"},{"location":"lab2/#46","text":"\u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6\uff0c\u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539\uff0c\u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6b63\u786e\u5b9e\u73b0\u7684\u8f93\u51fa\u6837\u4f8b\u3002\uff08 \u4ec5\u4f9b\u53c2\u8003 \uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt kernel is running! [S] Supervisor Mode Timer Interrupt","title":"4.6 \u7f16\u8bd1\u53ca\u6d4b\u8bd5"},{"location":"lab2/#_1","text":"\u5728\u6211\u4eec\u4f7f\u7528make run\u65f6\uff0c OpenSBI \u4f1a\u4ea7\u751f\u5982\u4e0b\u8f93\u51fa: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ...... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...... 1 \u901a\u8fc7\u67e5\u770b `RISC-V Privileged Spec` \u4e2d\u7684 `medeleg` \u548c `mideleg` \u89e3\u91ca\u4e0a\u9762 `MIDELEG` \u503c\u7684\u542b\u4e49\u3002","title":"\u601d\u8003\u9898"},{"location":"lab2/#_2","text":"\u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u4f5c\u4e1a\u63d0\u4ea4"},{"location":"lab3/","text":"Lab 3: RV64 \u5185\u6838\u7ebf\u7a0b\u8c03\u5ea6 1 \u5b9e\u9a8c\u76ee\u7684 \u4e86\u89e3\u7ebf\u7a0b\u6982\u5ff5, \u5e76\u5b66\u4e60\u7ebf\u7a0b\u76f8\u5173\u7ed3\u6784\u4f53, \u5e76\u5b9e\u73b0\u7ebf\u7a0b\u7684\u521d\u59cb\u5316\u529f\u80fd\u3002 \u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u65f6\u949f\u4e2d\u65ad\u6765\u5b9e\u73b0\u7ebf\u7a0b\u7684\u8c03\u5ea6\u3002 \u4e86\u89e3\u7ebf\u7a0b\u5207\u6362\u539f\u7406, \u5e76\u5b9e\u73b0\u7ebf\u7a0b\u7684\u5207\u6362\u3002 \u638c\u63e1\u7b80\u5355\u7684\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5, \u5e76\u5b8c\u6210\u4e24\u79cd\u7b80\u5355\u8c03\u5ea6\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002 2 \u5b9e\u9a8c\u73af\u5883 Environment in previous labs 3 \u80cc\u666f\u77e5\u8bc6 3.0 \u524d\u8a00 \u5728 lab2 \u4e2d, \u6211\u4eec\u5229\u7528 trap \u8d4b\u4e88\u4e86 OS \u4e0e\u8f6f\u4ef6, \u786c\u4ef6\u7684\u4ea4\u4e92\u80fd\u529b\u3002\u4f46\u662f\u76ee\u524d\u6211\u4eec\u7684 OS \u8fd8\u4e0d\u5177\u5907\u591a\u8fdb\u7a0b\u8c03\u5ea6\u4ee5\u53ca\u5e76\u53d1\u6267\u884c\u7684\u80fd\u529b\u3002\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d, \u6211\u4eec\u5c06\u5229\u7528\u65f6\u949f\u4e2d\u65ad, \u6765\u5b9e\u73b0\u591a\u8fdb\u7a0b\u7684\u8c03\u5ea6\u4ee5\u4f7f\u5f97\u591a\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u5e76\u53d1\u6267\u884c\u3002 3.1 \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b \u6e90\u4ee3\u7801 \u7ecf\u7f16\u8bd1\u5668\u4e00\u7cfb\u5217\u5904\u7406\uff08\u7f16\u8bd1\u3001\u94fe\u63a5\u3001\u4f18\u5316\u7b49\uff09\u540e\u5f97\u5230\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u6211\u4eec\u79f0\u4e4b\u4e3a \u7a0b\u5e8f (Program) \u3002\u800c\u901a\u4fd7\u5730\u8bf4, \u8fdb\u7a0b \u5c31\u662f \u6b63\u5728\u8fd0\u884c\u5e76\u4f7f\u7528\u8ba1\u7b97\u673a\u8d44\u6e90 \u7684\u7a0b\u5e8f\u3002 \u8fdb\u7a0b \u4e0e \u7a0b\u5e8f \u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e, \u8fdb\u7a0b \u662f\u4e00\u4e2a\u52a8\u6001\u7684\u6982\u5ff5, \u5176\u4e0d\u4ec5\u9700\u8981\u5c06\u5176\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4ee3\u7801/\u6570\u636e\u7b49\u52a0\u8f7d\u5230\u5185\u5b58\u7a7a\u95f4\u4e2d, \u8fd8\u9700\u8981\u62e5\u6709\u81ea\u5df1\u7684 \u8fd0\u884c\u6808 \u3002\u540c\u65f6\u4e00\u4e2a \u8fdb\u7a0b \u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u6216\u591a\u4e2a \u7ebf\u7a0b , \u7ebf\u7a0b \u4e4b\u95f4\u5f80\u5f80\u5177\u6709\u76f8\u540c\u7684\u4ee3\u7801, \u5171\u4eab\u4e00\u5757\u5185\u5b58, \u4f46\u662f\u5374\u6709\u4e0d\u540c\u7684CPU\u6267\u884c\u72b6\u6001\u3002 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d, \u4e3a\u4e86\u7b80\u5355\u8d77\u89c1, \u6211\u4eec\u91c7\u7528 single-threaded process \u6a21\u578b, \u5373 \u4e00\u4e2a\u8fdb\u7a0b \u5bf9\u5e94 \u4e00\u4e2a\u7ebf\u7a0b , \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b\u4e0d\u505a\u660e\u663e\u533a\u5206\u3002 3.1 \u7ebf\u7a0b\u76f8\u5173\u5c5e\u6027 \u5728\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u6240\u4fdd\u5b58\u7684\u4fe1\u606f\u90fd\u4e0d\u540c\u3002\u5728\u8fd9\u91cc, \u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u57fa\u7840\u7684\u5b9e\u73b0, \u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u5305\u62ec\uff1a \u7ebf\u7a0bID \uff1a\u7528\u4e8e\u552f\u4e00\u786e\u8ba4\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u8fd0\u884c\u6808 \uff1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u8fd0\u884c\u6808, \u4fdd\u5b58\u8fd0\u884c\u65f6\u7684\u6570\u636e\u3002 \u6267\u884c\u4e0a\u4e0b\u6587 \uff1a\u5f53\u7ebf\u7a0b\u4e0d\u5728\u6267\u884c\u72b6\u6001\u65f6, \u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5176\u4e0a\u4e0b\u6587\uff08\u5176\u5b9e\u5c31\u662f \u72b6\u6001\u5bc4\u5b58\u5668 \u7684\u503c\uff09, \u8fd9\u6837\u4e4b\u540e\u624d\u80fd\u591f\u5c06\u5176\u6062\u590d, \u7ee7\u7eed\u8fd0\u884c\u3002 \u8fd0\u884c\u65f6\u95f4\u7247 \uff1a\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u4f18\u5148\u7ea7 \uff1a\u5728\u4f18\u5148\u7ea7\u76f8\u5173\u8c03\u5ea6\u65f6, \u914d\u5408\u8c03\u5ea6\u7b97\u6cd5, \u6765\u9009\u51fa\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b\u3002 3.2 \u7ebf\u7a0b\u5207\u6362\u6d41\u7a0b\u56fe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 Process 1 Operating System Process 2 + | X P1 executing | X | X v Timer Interrupt Trap X +----------------------> X + X X do_timer() X X + X X schedule() X X + X X save state to PCB1 X X + X X restore state from PCB2 X X + X X | X X v Timer Interrupt Ret X +---------------------> X | X | P2 executing X | X Timer Interrupt Trap v X <---------------------+ X + X do_timer() X + X schedule() X + X save state to PCB2 X + X restore state from PCB1 X + X | Timer Interrupt Ret v <----------------------+ | P1 executing | | v \u5728\u6bcf\u6b21\u5904\u7406\u65f6\u949f\u4e2d\u65ad\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u9996\u5148\u4f1a\u5c06\u5f53\u524d\u7ebf\u7a0b\u7684\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u51cf\u5c11\u4e00\u4e2a\u5355\u4f4d\u3002\u4e4b\u540e\u6839\u636e\u8c03\u5ea6\u7b97\u6cd5\u6765\u786e\u5b9a\u662f\u7ee7\u7eed\u8fd0\u884c\u8fd8\u662f\u8c03\u5ea6\u5176\u4ed6\u7ebf\u7a0b\u6765\u6267\u884c\u3002 \u5728\u8fdb\u7a0b\u8c03\u5ea6\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u904d\u5386\u6240\u6709\u53ef\u8fd0\u884c\u7684\u7ebf\u7a0b, \u6309\u7167\u4e00\u5b9a\u7684\u8c03\u5ea6\u7b97\u6cd5\u9009\u51fa\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b\u3002\u6700\u7ec8\u5c06\u9009\u62e9\u5f97\u5230\u7684\u7ebf\u7a0b\u4e0e\u5f53\u524d\u7ebf\u7a0b\u5207\u6362\u3002 \u5728\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d, \u9996\u5148\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684\u6267\u884c\u4e0a\u4e0b\u6587, \u518d\u5c06\u5c06\u8981\u6267\u884c\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u8f7d\u5165\u5230\u76f8\u5173\u5bc4\u5b58\u5668\u4e2d, \u81f3\u6b64\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u7ebf\u7a0b\u7684\u8c03\u5ea6\u4e0e\u5207\u6362\u3002 4 \u5b9e\u9a8c\u6b65\u9aa4 4.1 \u51c6\u5907\u5de5\u7a0b \u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab2 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u4ee3\u7801: rand.h/rand.c , string.h/string.c , mm.h/mm.c \u3002\u5e76\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u8fd9\u4e9b\u6587\u4ef6\u6b63\u786e\u653e\u7f6e\u3002\u5176\u4e2d mm.h/mm.c \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u7269\u7406\u5185\u5b58\u7ba1\u7406\u63a5\u53e3, rand.h/rand.c \u63d0\u4f9b\u4e86 rand() \u63a5\u53e3\u7528\u4ee5\u63d0\u4f9b\u4f2a\u968f\u673a\u6570\u5e8f\u5217, string.h/string.c \u63d0\u4f9b\u4e86 memset \u63a5\u53e3\u7528\u4ee5\u521d\u59cb\u5316\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 . \u251c\u2500\u2500 arch \u2502 \u2514\u2500\u2500 riscv \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 mm.h \u2502 \u2514\u2500\u2500 kernel \u2502 \u2514\u2500\u2500 mm.c \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 rand.h \u2502 \u2514\u2500\u2500 string.h \u2514\u2500\u2500 lib \u251c\u2500\u2500 rand.c \u2514\u2500\u2500 string.c \u5728 lab3 \u4e2d\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u7269\u7406\u5185\u5b58\u7ba1\u7406\u7684\u63a5\u53e3, \u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e86 kalloc \u63a5\u53e3 ( \u89c1 mm.c ) \u7ed9\u540c\u5b66\u3002\u540c\u5b66\u53ef\u4ee5\u7528 kalloc \u6765\u7533\u8bf7 4KB \u7684\u7269\u7406\u9875\u3002\u7531\u4e8e\u5f15\u5165\u4e86\u7b80\u5355\u7684\u7269\u7406\u5185\u5b58\u7ba1\u7406, \u9700\u8981\u5728 _start \u7684\u9002\u5f53\u4f4d\u7f6e\u8c03\u7528 mm_init , \u6765\u521d\u59cb\u5316\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf, \u5e76\u4e14\u5728\u521d\u59cb\u5316\u65f6\u9700\u8981\u7528\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u5b8f, \u9700\u8981\u4fee\u6539 defs.h , \u5728 defs.h \u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 #define PHY_START 0x0000000080000000 #define PHY_SIZE 128 * 1024 * 1024 // 128MB, QEMU \u9ed8\u8ba4\u5185\u5b58\u5927\u5c0f #define PHY_END (PHY_START + PHY_SIZE) #define PGSIZE 0x1000 // 4KB #define PGROUNDUP(addr) ((addr + PGSIZE - 1) & (~(PGSIZE - 1))) #define PGROUNDDOWN(addr) (addr & (~(PGSIZE - 1))) \u8bf7\u5728\u6dfb\u52a0/\u4fee\u6539\u4e0a\u8ff0\u6587\u4ef6\u4ee3\u7801\u4e4b\u540e, \u786e\u4fdd\u5de5\u7a0b\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c, \u4e4b\u540e\u518d\u5f00\u59cb\u5b9e\u73b0 lab3 (\u6709\u53ef\u80fd\u9700\u8981\u540c\u5b66\u81ea\u5df1\u8c03\u6574\u4e00\u4e9b\u5934\u6587\u4ef6\u7684\u5f15\u5165)\u3002 \u5728 lab3 \u4e2d\u9700\u8981\u540c\u5b66\u9700\u8981\u6dfb\u52a0\u5e76\u4fee\u6539 arch/riscv/include/proc.h arch/riscv/kernel/proc.c \u4e24\u4e2a\u6587\u4ef6\u3002 \u672c\u6b21\u5b9e\u9a8c\u9700\u8981\u5b9e\u73b0\u4e24\u79cd\u4e0d\u540c\u7684\u8c03\u5ea6\u7b97\u6cd5, \u5982\u4f55\u63a7\u5236\u4ee3\u7801\u903b\u8f91\u89c1 4.4 4.2 proc.h \u6570\u636e\u7ed3\u6784\u5b9a\u4e49 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // arch/riscv/include/proc.h #include \"types.h\" #define NR_TASKS (1 + 31) // \u7528\u4e8e\u63a7\u5236 \u6700\u5927\u7ebf\u7a0b\u6570\u91cf \uff08idle \u7ebf\u7a0b + 31 \u5185\u6838\u7ebf\u7a0b\uff09 #define TASK_RUNNING 0 // \u4e3a\u4e86\u7b80\u5316\u5b9e\u9a8c, \u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u53ea\u6709\u4e00\u79cd\u72b6\u6001 #define PRIORITY_MIN 1 #define PRIORITY_MAX 10 /* \u7528\u4e8e\u8bb0\u5f55 `\u7ebf\u7a0b` \u7684 `\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u6307\u9488` */ /* (lab3\u4e2d\u65e0\u9700\u8003\u8651, \u5728\u8fd9\u91cc\u5f15\u5165\u662f\u4e3a\u4e86\u4e4b\u540e\u5b9e\u9a8c\u7684\u4f7f\u7528) */ struct thread_info { uint64 kernel_sp ; uint64 user_sp ; }; /* \u7ebf\u7a0b\u72b6\u6001\u6bb5\u6570\u636e\u7ed3\u6784 */ struct thread_struct { uint64 ra ; uint64 sp ; uint64 s [ 12 ]; }; /* \u7ebf\u7a0b\u6570\u636e\u7ed3\u6784 */ struct task_struct { struct thread_info * thread_info ; uint64 state ; // \u7ebf\u7a0b\u72b6\u6001 uint64 counter ; // \u8fd0\u884c\u5269\u4f59\u65f6\u95f4 uint64 priority ; // \u8fd0\u884c\u4f18\u5148\u7ea7 1\u6700\u4f4e 10\u6700\u9ad8 uint64 pid ; // \u7ebf\u7a0bid struct thread_struct thread ; }; /* \u7ebf\u7a0b\u521d\u59cb\u5316 \u521b\u5efa NR_TASKS \u4e2a\u7ebf\u7a0b */ void task_init (); /* \u5728\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u4e2d\u88ab\u8c03\u7528 \u7528\u4e8e\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u8c03\u5ea6 */ void do_timer (); /* \u8c03\u5ea6\u7a0b\u5e8f \u9009\u62e9\u51fa\u4e0b\u4e00\u4e2a\u8fd0\u884c\u7684\u7ebf\u7a0b */ void schedule (); /* \u7ebf\u7a0b\u5207\u6362\u5165\u53e3\u51fd\u6570*/ void switch_to ( struct task_struct * next ); /* dummy funciton: \u4e00\u4e2a\u5faa\u73af\u7a0b\u5e8f, \u5faa\u73af\u8f93\u51fa\u81ea\u5df1\u7684 pid \u4ee5\u53ca\u4e00\u4e2a\u81ea\u589e\u7684\u5c40\u90e8\u53d8\u91cf */ void dummy (); 4.3 \u7ebf\u7a0b\u8c03\u5ea6\u529f\u80fd\u5b9e\u73b0 4.3.1 \u7ebf\u7a0b\u521d\u59cb\u5316 \u5728\u521d\u59cb\u5316\u7ebf\u7a0b\u7684\u65f6\u5019, \u6211\u4eec\u53c2\u8003 Linux v0.11\u4e2d\u7684\u5b9e\u73b0 \u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a 4KB \u7684\u7269\u7406\u9875, \u6211\u4eec\u5c06 task_struct \u5b58\u653e\u5728\u8be5\u9875\u7684\u4f4e\u5730\u5740\u90e8\u5206, \u5c06\u7ebf\u7a0b\u7684\u6808\u6307\u9488 sp \u6307\u5411\u8be5\u9875\u7684\u9ad8\u5730\u5740\u3002\u5177\u4f53\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u25c4\u2500\u2500\u2500 High Address \u2502 \u2502 \u2502 stack \u2502 \u2502 \u2502 \u2502 \u2502 sp \u2500\u2500\u25ba\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u25bc \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 4KB Page \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 task_struct \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u25c4\u2500\u2500\u2500 Low Address \u5f53\u6211\u4eec\u7684 OS run \u8d77\u6765\u7684\u65f6\u5019, \u5176\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b idle \u7ebf\u7a0b , \u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u4e3a\u5b83\u8bbe\u8ba1\u597d task_struct \u3002\u6240\u4ee5\u7b2c\u4e00\u6b65\u6211\u4eec\u8981\u4e3a idle \u8bbe\u7f6e task_struct \u3002\u5e76\u5c06 current , task[0] \u90fd\u6307\u5411 idle \u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1, \u6211\u4eec\u5c06 task[1] ~ task[NR_TASKS - 1] , \u5168\u90e8\u521d\u59cb\u5316, \u8fd9\u91cc\u548c idle \u8bbe\u7f6e\u7684\u533a\u522b\u5728\u4e8e\u8981\u4e3a\u8fd9\u4e9b\u7ebf\u7a0b\u8bbe\u7f6e thread_struct \u4e2d\u7684 ra \u548c sp . \u5728 _start \u9002\u5f53\u7684\u4f4d\u7f6e\u8c03\u7528 task_init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //arch/riscv/kernel/proc.c extern void __dummy (); struct task_struct * idle ; // idle process struct task_struct * current ; // \u6307\u5411\u5f53\u524d\u8fd0\u884c\u7ebf\u7a0b\u7684 `task_struct` struct task_struct * task [ NR_TASKS ]; // \u7ebf\u7a0b\u6570\u7ec4, \u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u4fdd\u5b58\u5728\u6b64 void task_init () { // 1. \u8c03\u7528 kalloc() \u4e3a idle \u5206\u914d\u4e00\u4e2a\u7269\u7406\u9875 // 2. \u8bbe\u7f6e state \u4e3a TASK_RUNNING; // 3. \u7531\u4e8e idle \u4e0d\u53c2\u4e0e\u8c03\u5ea6 \u53ef\u4ee5\u5c06\u5176 counter / priority \u8bbe\u7f6e\u4e3a 0 // 4. \u8bbe\u7f6e idle \u7684 pid \u4e3a 0 // 5. \u5c06 current \u548c task[0] \u6307\u5411 idle /* YOUR CODE HERE */ // 1. \u53c2\u8003 idle \u7684\u8bbe\u7f6e, \u4e3a task[1] ~ task[NR_TASKS - 1] \u8fdb\u884c\u521d\u59cb\u5316 // 2. \u5176\u4e2d\u6bcf\u4e2a\u7ebf\u7a0b\u7684 state \u4e3a TASK_RUNNING, counter \u4e3a 0, priority \u4f7f\u7528 rand() \u6765\u8bbe\u7f6e, pid \u4e3a\u8be5\u7ebf\u7a0b\u5728\u7ebf\u7a0b\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 // 3. \u4e3a task[1] ~ task[NR_TASKS - 1] \u8bbe\u7f6e `thread_struct` \u4e2d\u7684 `ra` \u548c `sp`, // 4. \u5176\u4e2d `ra` \u8bbe\u7f6e\u4e3a __dummy \uff08\u89c1 4.3.2\uff09\u7684\u5730\u5740, `sp` \u8bbe\u7f6e\u4e3a \u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u7269\u7406\u9875\u7684\u9ad8\u5730\u5740 /* YOUR CODE HERE */ printk ( \"...proc_init done! \\n \" ); } Debug \u63d0\u793a\uff1a \u4fee\u6539 proc.h \u4e2d\u7684 NR_TASKS \u4e3a\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u503c, \u6bd4\u5982 5, \u8fd9\u6837 \u9664\u53bb task[0] ( idle ), \u53ea\u9700\u8981\u521d\u59cb\u5316 4 \u4e2a\u7ebf\u7a0b, \u65b9\u4fbf\u8c03\u8bd5\u3002 \u6ce8\u610f\u4ee5\u4e0a\u7684\u4fee\u6539\u53ea\u662f\u4e3a\u4e86\u5728\u505a\u5b9e\u9a8c\u7684\u8fc7\u7a0b\u4e2d\u65b9\u4fbf\u8c03\u8bd5, \u6700\u540e\u4e00\u5b9a\u8bb0\u4f4f\u8981\u4fee\u6539\u56de\u53bb\uff01\uff01\uff01 4.3.2 __dummy \u4e0e dummy \u4ecb\u7ecd task[1] ~ task[NR_TASKS - 1] \u90fd\u8fd0\u884c\u540c\u4e00\u6bb5\u4ee3\u7801 dummy() \u6211\u4eec\u5728 proc.c \u6dfb\u52a0 dummy() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // arch/riscv/kernel/proc.c void dummy () { uint64 MOD = 1000000007 ; uint64 auto_inc_local_var = 0 ; int last_counter = -1 ; while ( 1 ) { if ( last_counter == -1 || current -> counter != last_counter ) { last_counter = current -> counter ; auto_inc_local_var = ( auto_inc_local_var + 1 ) % MOD ; printk ( \"[PID = %d] is running. auto_inc_local_var = %d \\n \" , current -> pid , auto_inc_local_var ); } } } Debug \u63d0\u793a\uff1a \u53ef\u4ee5\u7528 printk \u6253\u5370\u66f4\u591a\u7684\u4fe1\u606f \u5f53\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6, \u7531\u4e8e\u65f6\u949f\u4e2d\u65ad\u7684\u89e6\u53d1, \u4f1a\u5c06\u5f53\u524d\u8fd0\u884c\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u4fdd\u5b58\u5728\u6808\u4e0a\u3002\u5f53\u7ebf\u7a0b\u518d\u6b21\u88ab\u8c03\u5ea6\u65f6, \u4f1a\u5c06\u4e0a\u4e0b\u6587\u4ece\u6808\u4e0a\u6062\u590d, \u4f46\u662f\u5f53\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b, \u6b64\u65f6\u7ebf\u7a0b\u7684\u6808\u4e3a\u7a7a, \u5f53\u8fd9\u4e2a\u7ebf\u7a0b\u88ab\u8c03\u5ea6\u65f6, \u662f\u6ca1\u6709\u4e0a\u4e0b\u6587\u9700\u8981\u88ab\u6062\u590d\u7684, \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u7ebf\u7a0b \u7b2c\u4e00\u6b21\u8c03\u5ea6 \u63d0\u4f9b\u4e00\u4e2a\u7279\u6b8a\u7684\u8fd4\u56de\u51fd\u6570 __dummy \u5728 entry.S \u6dfb\u52a0 __dummy \u5728 __dummy \u4e2d\u5c06 sepc \u8bbe\u7f6e\u4e3a dummy() \u7684\u5730\u5740, \u5e76\u4f7f\u7528 sret \u4ece\u4e2d\u65ad\u4e2d\u8fd4\u56de\u3002 __dummy \u4e0e _traps \u7684 restore \u90e8\u5206\u76f8\u6bd4, \u5176\u5b9e\u5c31\u662f\u7701\u7565\u4e86\u4ece\u6808\u4e0a\u6062\u590d\u4e0a\u4e0b\u6587\u7684\u8fc7\u7a0b ( \u4f46\u662f\u624b\u52a8\u8bbe\u7f6e\u4e86 sepc )\u3002 1 2 3 4 5 # arch/riscv/kernel/entry.S .global __dummy __dummy: # YOUR CODE HERE 4.3.3 \u5b9e\u73b0\u7ebf\u7a0b\u5207\u6362 \u5224\u65ad\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b next \u4e0e\u5f53\u524d\u7684\u7ebf\u7a0b current \u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u7ebf\u7a0b, \u5982\u679c\u662f\u540c\u4e00\u4e2a\u7ebf\u7a0b, \u5219\u65e0\u9700\u505a\u4efb\u4f55\u5904\u7406, \u5426\u5219\u8c03\u7528 __switch_to \u8fdb\u884c\u7ebf\u7a0b\u5207\u6362\u3002 1 2 3 4 5 6 7 // arch/riscv/kernel/proc.c extern void __switch_to ( struct task_struct * prev , struct task_struct * next ); void switch_to ( struct task_struct * next ) { /* YOUR CODE HERE */ } \u5728 entry.S \u4e2d\u5b9e\u73b0\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362 __switch_to : __switch_to \u63a5\u53d7\u4e24\u4e2a task_struct \u6307\u9488\u4f5c\u4e3a\u53c2\u6570 \u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684 ra , sp , s0~s11 \u5230\u5f53\u524d\u7ebf\u7a0b\u7684 thread_struct \u4e2d \u5c06\u4e0b\u4e00\u4e2a\u7ebf\u7a0b\u7684 thread_struct \u4e2d\u7684\u76f8\u5173\u6570\u636e\u8f7d\u5165\u5230 ra , sp , s0~s11 \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 # arch/riscv/kernel/entry.S .globl __switch_to __switch_to: # save state to prev process # YOUR CODE HERE # restore state from next process # YOUR CODE HERE ret Debug \u63d0\u793a\uff1a \u53ef\u4ee5\u5c1d\u8bd5\u662f\u5426\u53ef\u4ee5\u4ece idle \u6b63\u786e\u5207\u6362\u5230 process 1 4.3.4 \u5b9e\u73b0\u8c03\u5ea6\u5165\u53e3\u51fd\u6570 \u5b9e\u73b0 do_timer() , \u5e76\u5728 \u65f6\u949f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u4e2d\u8c03\u7528\u3002 1 2 3 4 5 6 7 8 // arch/riscv/kernel/proc.c void do_timer ( void ) { // 1. \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u662f idle \u7ebf\u7a0b \u76f4\u63a5\u8fdb\u884c\u8c03\u5ea6 // 2. \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u662f idle \u5bf9\u5f53\u524d\u7ebf\u7a0b\u7684\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u51cf1 \u82e5\u5269\u4f59\u65f6\u95f4\u4ecd\u7136\u5927\u4e8e0 \u5219\u76f4\u63a5\u8fd4\u56de \u5426\u5219\u8fdb\u884c\u8c03\u5ea6 /* YOUR CODE HERE */ } 4.3.5 \u5b9e\u73b0\u7ebf\u7a0b\u8c03\u5ea6 \u672c\u6b21\u5b9e\u9a8c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e24\u79cd\u8c03\u5ea6\u7b97\u6cd5\uff1a1.\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\u7b97\u6cd5, 2.\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\u3002 4.3.5.1 \u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\u7b97\u6cd5 \u5f53\u9700\u8981\u8fdb\u884c\u8c03\u5ea6\u65f6\u6309\u7167\u4e00\u4e0b\u89c4\u5219\u8fdb\u884c\u8c03\u5ea6\uff1a \u904d\u5386\u7ebf\u7a0b\u6307\u9488\u6570\u7ec4 task (\u4e0d\u5305\u62ec idle , \u5373 task[0] ), \u5728\u6240\u6709\u8fd0\u884c\u72b6\u6001 ( TASK_RUNNING ) \u4e0b\u7684\u7ebf\u7a0b\u8fd0\u884c\u5269\u4f59\u65f6\u95f4 \u6700\u5c11 \u7684\u7ebf\u7a0b\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b\u3002 \u5982\u679c \u6240\u6709 \u8fd0\u884c\u72b6\u6001\u4e0b\u7684\u7ebf\u7a0b\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u90fd\u4e3a0, \u5219\u5bf9 task[1] ~ task[NR_TASKS-1] \u7684\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u91cd\u65b0\u8d4b\u503c (\u4f7f\u7528 rand() ) , \u4e4b\u540e\u518d\u91cd\u65b0\u8fdb\u884c\u8c03\u5ea6\u3002 1 2 3 4 5 // arch/riscv/kernel/proc.c void schedule ( void ) { /* YOUR CODE HERE */ } Debug \u63d0\u793a\uff1a\u53ef\u4ee5\u5148\u5c06 NR_TASKS \u6539\u4e3a\u8f83\u5c0f\u7684\u503c, \u8c03\u7528 printk \u5c06\u6240\u6709\u7ebf\u7a0b\u7684\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002 4.3.5.2 \u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5 \u53c2\u8003 Linux v0.11 \u8c03\u5ea6\u7b97\u6cd5\u5b9e\u73b0 \u5b9e\u73b0\u3002 1 2 3 4 5 // arch/riscv/kernel/proc.c void schedule ( void ) { /* YOUR CODE HERE */ } 4.4 \u7f16\u8bd1\u53ca\u6d4b\u8bd5 \u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6, \u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6, \u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539, \u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u7531\u4e8e\u672c\u6b21\u5b9e\u9a8c\u9700\u8981\u5b8c\u6210\u4e24\u4e2a\u8c03\u5ea6\u7b97\u6cd5, \u56e0\u6b64\u9700\u8981\u4e24\u79cd\u8c03\u5ea6\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528 gcc \u2013D \u9009\u9879\u8fdb\u884c\u63a7\u5236\u3002 DSJF \uff08\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\uff09\u3002 DPRIORITY \uff08\u4f18\u5148\u7ea7\u8c03\u5ea6\uff09\u3002 \u5728 proc.c \u4e2d\u4f7f\u7528 #ifdef , #endif \u6765\u63a7\u5236\u4ee3\u7801\u3002 \u4fee\u6539\u9876\u5c42Makefile\u4e3a CFLAG = ${CF} ${INCLUDE} -DSJF \u6216 CFLAG = ${CF} ${INCLUDE} -DPRIORITY (\u4f5c\u4e1a\u63d0\u4ea4\u7684\u65f6\u5019 Makefile \u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5) \u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\u8f93\u51fa\u793a\u4f8b (\u4e3a\u4e86\u4fbf\u4e8e\u5c55\u793a, \u8fd9\u91cc\u4e00\u5171\u53ea\u521d\u59cb\u5316\u4e86 4 \u4e2a\u7ebf\u7a0b) \u540c\u5b66\u4eec\u6700\u540e\u63d0\u4ea4\u65f6\u9700\u8981 \u4fdd\u8bc1 NR_TASKS \u4e3a 32 \u4e0d\u53d8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done! ...proc_init done! Hello RISC-V idle process is running! SET [PID = 1 COUNTER = 10] SET [PID = 2 COUNTER = 10] SET [PID = 3 COUNTER = 5] SET [PID = 4 COUNTER = 2] switch to [PID = 4 COUNTER = 2] [PID = 4] is running. auto_inc_local_var = 1 [PID = 4] is running. auto_inc_local_var = 2 switch to [PID = 3 COUNTER = 5] [PID = 3] is running. auto_inc_local_var = 1 ..... [PID = 3] is running. auto_inc_local_var = 5 switch to [PID = 2 COUNTER = 10] [PID = 2] is running. auto_inc_local_var = 1 ... [PID = 2] is running. auto_inc_local_var = 10 switch to [PID = 1 COUNTER = 10] [PID = 1] is running. auto_inc_local_var = 1 ... [PID = 1] is running. auto_inc_local_var = 10 SET [PID = 1 COUNTER = 9] SET [PID = 2 COUNTER = 4] SET [PID = 3 COUNTER = 4] SET [PID = 4 COUNTER = 10] switch to [PID = 3 COUNTER = 4] [PID = 3] is running. auto_inc_local_var = 6 ... [PID = 3] is running. auto_inc_local_var = 9 \u4f18\u5148\u7ea7\u8c03\u5ea6\u8f93\u51fa\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done! ...proc_init done! Hello RISC-V idle process is running! SET [PID = 1 PRIORITY = 1 COUNTER = 1] SET [PID = 2 PRIORITY = 4 COUNTER = 4] SET [PID = 3 PRIORITY = 10 COUNTER = 10] SET [PID = 4 PRIORITY = 4 COUNTER = 4] switch to [PID = 3 PRIORITY = 10 COUNTER = 10] [PID = 3] is running. auto_inc_local_var = 1 ... [PID = 3] is running. auto_inc_local_var = 10 switch to [PID = 4 PRIORITY = 4 COUNTER = 4] [PID = 4] is running. auto_inc_local_var = 1 ... [PID = 4] is running. auto_inc_local_var = 4 switch to [PID = 2 PRIORITY = 4 COUNTER = 4] [PID = 2] is running. auto_inc_local_var = 1 ... [PID = 2] is running. auto_inc_local_var = 4 switch to [PID = 1 PRIORITY = 1 COUNTER = 1] [PID = 1] is running. auto_inc_local_var = 1 SET [PID = 1 PRIORITY = 1 COUNTER = 1] SET [PID = 2 PRIORITY = 4 COUNTER = 4] SET [PID = 3 PRIORITY = 10 COUNTER = 10] SET [PID = 4 PRIORITY = 4 COUNTER = 4] switch to [PID = 3 PRIORITY = 10 COUNTER = 10] [PID = 3] is running. auto_inc_local_var = 11 ... \u601d\u8003\u9898 \u5728 RV64 \u4e2d\u4e00\u5171\u7528 32 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668, \u4e3a\u4ec0\u4e48 context_switch \u4e2d\u53ea\u4fdd\u5b58\u4e8614\u4e2a? \u5f53\u7ebf\u7a0b\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6, \u5176 ra \u6240\u4ee3\u8868\u7684\u8fd4\u56de\u70b9\u662f __dummy \u3002\u90a3\u4e48\u5728\u4e4b\u540e\u7684\u7ebf\u7a0b\u8c03\u7528\u4e2d context_switch \u4e2d, ra \u4fdd\u5b58/\u6062\u590d\u7684\u51fd\u6570\u8fd4\u56de\u70b9\u662f\u4ec0\u4e48\u5462? \u8bf7\u540c\u5b66\u7528 gdb \u5c1d\u8bd5\u8ffd\u8e2a\u4e00\u6b21\u5b8c\u6574\u7684\u7ebf\u7a0b\u5207\u6362\u6d41\u7a0b, \u5e76\u5173\u6ce8\u6bcf\u4e00\u6b21 ra \u7684\u53d8\u6362 (\u9700\u8981\u622a\u56fe)\u3002 \u8fd0\u884c\u8bfe\u5802 demo \u7684 hello-lkm \u4ee3\u7801, \u56de\u7b54\u4e0b\u5217\u95ee\u9898: a. \u5bf9\u8fd0\u884c\u7ed3\u679c\u8fdb\u884c\u622a\u56fe, \u5c55\u793a\u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u7ebf\u7a0b\u54ea\u4e9b\u6570\u636e share, \u54ea\u4e9b\u4e0d share b. \u5b89\u88c5 lkm \u548c remove lkm \u7684\u547d\u4ee4\u5206\u522b\u662f\u4ec0\u4e48? \u5bf9\u5185\u6838\u8fdb\u884c\u4e86\u54ea\u4e9b\u6539\u52a8? c. \u4f7f\u7528\u54ea\u4e2a\u5185\u6838\u51fd\u6570\u53ef\u4ee5\u8f93\u51fa\u5230\u5185\u6838 log? \u7279\u522b\u5730\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 WSL2 \u4e0a\u7684 Ubuntu 22.04 \uff0c\u7531\u4e8e\u5b98\u65b9\u548c\u6d59\u5927\u6e90\u4e2d\u90fd\u6ca1\u6709\u7ed9\u51fa\u5bf9\u5e94\u7248\u672c\u7684 linux-headers \uff0c\u6240\u4ee5\u9700\u8981\u6211\u4eec\u4ece Linux \u6e90\u7801\u5f00\u59cb\u7f16\u8bd1 kernel module\u3002\u4f60\u53ef\u4ee5\u4ece\u5fae\u8f6f\u7684\u5b98\u65b9 WSL2 Kernel Repository \u4e2d\u83b7\u53d6\u5230\u4f60\u6b63\u5728\u4f7f\u7528\u7684 WSL2 \u5185\u6838\u7248\u672c\u5bf9\u5e94\u7684\u6e90\u7801\u3002 \u4f8b\u5982\u6211\u901a\u8fc7 uname -r \u5f97\u5230\u7684\u7ed3\u679c\u662f 5.10.16.3-microsoft-standard-WSL2 \uff0c\u5c31\u9700\u8981\u4ece\u8fd9\u4e2a Repo \u7684 tags \u4e2d\u627e\u5230 linux-msft-wsl-5.10.16.3 \u7684\u6e90\u7801\u5e76\u4e0b\u8f7d\u89e3\u538b\u3002 \u5728\u7f16\u8bd1 lkm \u4e4b\u524d\uff0c\u9700\u8981\u9996\u5148\u7f16\u8bd1 Linux \u5185\u6838\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 zcat /proc/config.gz > .config \u6765\u5c06\u5f53\u524d\u8fd0\u884c\u7684\u5185\u6838\u7684\u914d\u7f6e\u76f4\u63a5\u590d\u5236\u5230\u5185\u6838\u4ed3\u5e93\u4e2d\uff0c\u7136\u540e\u76f4\u63a5\u8fdb\u884c make \u3002\u5982\u679c\u5728\u7f16\u8bd1\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e86\u90e8\u5206\u9009\u9879\u6ca1\u6709\u914d\u7f6e\u7684\u63d0\u793a\uff0c\u53ef\u4ee5\u4e00\u76f4\u6572\u56de\u8f66\u6765\u9009\u62e9\u9ed8\u8ba4\u9009\u9879\u3002 \u5728\u7f16\u8bd1\u5b8c\u6210\u4ee5\u540e\uff0c\u4f60\u9700\u8981\u9605\u8bfb\u6211\u4eec\u7ed9\u51fa\u7684 lkm \u7684 Makefile \u6765\u7406\u89e3\u5176\u5177\u4f53\u884c\u4e3a\uff0c\u5e76\u5c06\u7f16\u8bd1\u8fdb\u884c\u7684\u76ee\u5f55\u6307\u5b9a\u4e3a\u6211\u4eec\u521a\u521a\u7684\u5185\u6838\u76ee\u5f55\uff08\u5373\u662f\u521a\u521a\u6211\u4eec\u89e3\u538b\u5b8c\u6210\u7684\u540d\u4e3a WSL2-Linux-Kernel-linux-msft-wsl-5.10.16.3 \uff0c\u5e76\u8fdb\u884c\u4e86\u5185\u6838\u7f16\u8bd1\u7684\u76ee\u5f55\uff09\uff0c\u6ce8\u610f\u4e0d\u7528\u5e26\u4e0a\u540e\u9762\u7684 build \u5b50\u76ee\u5f55\u8def\u5f84\uff0c\u5373\u53ef\u5b8c\u6210\u7f16\u8bd1\u3002 \u4f5c\u4e1a\u63d0\u4ea4 \u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u5b9e\u9a8c\u6307\u5bfc\u4e09"},{"location":"lab3/#lab-3-rv64","text":"","title":"Lab 3: RV64 \u5185\u6838\u7ebf\u7a0b\u8c03\u5ea6"},{"location":"lab3/#1","text":"\u4e86\u89e3\u7ebf\u7a0b\u6982\u5ff5, \u5e76\u5b66\u4e60\u7ebf\u7a0b\u76f8\u5173\u7ed3\u6784\u4f53, \u5e76\u5b9e\u73b0\u7ebf\u7a0b\u7684\u521d\u59cb\u5316\u529f\u80fd\u3002 \u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u65f6\u949f\u4e2d\u65ad\u6765\u5b9e\u73b0\u7ebf\u7a0b\u7684\u8c03\u5ea6\u3002 \u4e86\u89e3\u7ebf\u7a0b\u5207\u6362\u539f\u7406, \u5e76\u5b9e\u73b0\u7ebf\u7a0b\u7684\u5207\u6362\u3002 \u638c\u63e1\u7b80\u5355\u7684\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5, \u5e76\u5b8c\u6210\u4e24\u79cd\u7b80\u5355\u8c03\u5ea6\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002","title":"1 \u5b9e\u9a8c\u76ee\u7684"},{"location":"lab3/#2","text":"Environment in previous labs","title":"2 \u5b9e\u9a8c\u73af\u5883"},{"location":"lab3/#3","text":"","title":"3 \u80cc\u666f\u77e5\u8bc6"},{"location":"lab3/#30","text":"\u5728 lab2 \u4e2d, \u6211\u4eec\u5229\u7528 trap \u8d4b\u4e88\u4e86 OS \u4e0e\u8f6f\u4ef6, \u786c\u4ef6\u7684\u4ea4\u4e92\u80fd\u529b\u3002\u4f46\u662f\u76ee\u524d\u6211\u4eec\u7684 OS \u8fd8\u4e0d\u5177\u5907\u591a\u8fdb\u7a0b\u8c03\u5ea6\u4ee5\u53ca\u5e76\u53d1\u6267\u884c\u7684\u80fd\u529b\u3002\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d, \u6211\u4eec\u5c06\u5229\u7528\u65f6\u949f\u4e2d\u65ad, \u6765\u5b9e\u73b0\u591a\u8fdb\u7a0b\u7684\u8c03\u5ea6\u4ee5\u4f7f\u5f97\u591a\u4e2a\u8fdb\u7a0b/\u7ebf\u7a0b\u5e76\u53d1\u6267\u884c\u3002","title":"3.0 \u524d\u8a00"},{"location":"lab3/#31","text":"\u6e90\u4ee3\u7801 \u7ecf\u7f16\u8bd1\u5668\u4e00\u7cfb\u5217\u5904\u7406\uff08\u7f16\u8bd1\u3001\u94fe\u63a5\u3001\u4f18\u5316\u7b49\uff09\u540e\u5f97\u5230\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u6211\u4eec\u79f0\u4e4b\u4e3a \u7a0b\u5e8f (Program) \u3002\u800c\u901a\u4fd7\u5730\u8bf4, \u8fdb\u7a0b \u5c31\u662f \u6b63\u5728\u8fd0\u884c\u5e76\u4f7f\u7528\u8ba1\u7b97\u673a\u8d44\u6e90 \u7684\u7a0b\u5e8f\u3002 \u8fdb\u7a0b \u4e0e \u7a0b\u5e8f \u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e, \u8fdb\u7a0b \u662f\u4e00\u4e2a\u52a8\u6001\u7684\u6982\u5ff5, \u5176\u4e0d\u4ec5\u9700\u8981\u5c06\u5176\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4ee3\u7801/\u6570\u636e\u7b49\u52a0\u8f7d\u5230\u5185\u5b58\u7a7a\u95f4\u4e2d, \u8fd8\u9700\u8981\u62e5\u6709\u81ea\u5df1\u7684 \u8fd0\u884c\u6808 \u3002\u540c\u65f6\u4e00\u4e2a \u8fdb\u7a0b \u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u6216\u591a\u4e2a \u7ebf\u7a0b , \u7ebf\u7a0b \u4e4b\u95f4\u5f80\u5f80\u5177\u6709\u76f8\u540c\u7684\u4ee3\u7801, \u5171\u4eab\u4e00\u5757\u5185\u5b58, \u4f46\u662f\u5374\u6709\u4e0d\u540c\u7684CPU\u6267\u884c\u72b6\u6001\u3002 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d, \u4e3a\u4e86\u7b80\u5355\u8d77\u89c1, \u6211\u4eec\u91c7\u7528 single-threaded process \u6a21\u578b, \u5373 \u4e00\u4e2a\u8fdb\u7a0b \u5bf9\u5e94 \u4e00\u4e2a\u7ebf\u7a0b , \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b\u4e0d\u505a\u660e\u663e\u533a\u5206\u3002","title":"3.1 \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b"},{"location":"lab3/#31_1","text":"\u5728\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d, \u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u6240\u4fdd\u5b58\u7684\u4fe1\u606f\u90fd\u4e0d\u540c\u3002\u5728\u8fd9\u91cc, \u6211\u4eec\u63d0\u4f9b\u4e00\u79cd\u57fa\u7840\u7684\u5b9e\u73b0, \u6bcf\u4e2a\u7ebf\u7a0b\u4f1a\u5305\u62ec\uff1a \u7ebf\u7a0bID \uff1a\u7528\u4e8e\u552f\u4e00\u786e\u8ba4\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u8fd0\u884c\u6808 \uff1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u72ec\u7acb\u7684\u8fd0\u884c\u6808, \u4fdd\u5b58\u8fd0\u884c\u65f6\u7684\u6570\u636e\u3002 \u6267\u884c\u4e0a\u4e0b\u6587 \uff1a\u5f53\u7ebf\u7a0b\u4e0d\u5728\u6267\u884c\u72b6\u6001\u65f6, \u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5176\u4e0a\u4e0b\u6587\uff08\u5176\u5b9e\u5c31\u662f \u72b6\u6001\u5bc4\u5b58\u5668 \u7684\u503c\uff09, \u8fd9\u6837\u4e4b\u540e\u624d\u80fd\u591f\u5c06\u5176\u6062\u590d, \u7ee7\u7eed\u8fd0\u884c\u3002 \u8fd0\u884c\u65f6\u95f4\u7247 \uff1a\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u4f18\u5148\u7ea7 \uff1a\u5728\u4f18\u5148\u7ea7\u76f8\u5173\u8c03\u5ea6\u65f6, \u914d\u5408\u8c03\u5ea6\u7b97\u6cd5, \u6765\u9009\u51fa\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b\u3002","title":"3.1 \u7ebf\u7a0b\u76f8\u5173\u5c5e\u6027"},{"location":"lab3/#32","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 Process 1 Operating System Process 2 + | X P1 executing | X | X v Timer Interrupt Trap X +----------------------> X + X X do_timer() X X + X X schedule() X X + X X save state to PCB1 X X + X X restore state from PCB2 X X + X X | X X v Timer Interrupt Ret X +---------------------> X | X | P2 executing X | X Timer Interrupt Trap v X <---------------------+ X + X do_timer() X + X schedule() X + X save state to PCB2 X + X restore state from PCB1 X + X | Timer Interrupt Ret v <----------------------+ | P1 executing | | v \u5728\u6bcf\u6b21\u5904\u7406\u65f6\u949f\u4e2d\u65ad\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u9996\u5148\u4f1a\u5c06\u5f53\u524d\u7ebf\u7a0b\u7684\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u51cf\u5c11\u4e00\u4e2a\u5355\u4f4d\u3002\u4e4b\u540e\u6839\u636e\u8c03\u5ea6\u7b97\u6cd5\u6765\u786e\u5b9a\u662f\u7ee7\u7eed\u8fd0\u884c\u8fd8\u662f\u8c03\u5ea6\u5176\u4ed6\u7ebf\u7a0b\u6765\u6267\u884c\u3002 \u5728\u8fdb\u7a0b\u8c03\u5ea6\u65f6, \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u904d\u5386\u6240\u6709\u53ef\u8fd0\u884c\u7684\u7ebf\u7a0b, \u6309\u7167\u4e00\u5b9a\u7684\u8c03\u5ea6\u7b97\u6cd5\u9009\u51fa\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b\u3002\u6700\u7ec8\u5c06\u9009\u62e9\u5f97\u5230\u7684\u7ebf\u7a0b\u4e0e\u5f53\u524d\u7ebf\u7a0b\u5207\u6362\u3002 \u5728\u5207\u6362\u7684\u8fc7\u7a0b\u4e2d, \u9996\u5148\u6211\u4eec\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684\u6267\u884c\u4e0a\u4e0b\u6587, \u518d\u5c06\u5c06\u8981\u6267\u884c\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u8f7d\u5165\u5230\u76f8\u5173\u5bc4\u5b58\u5668\u4e2d, \u81f3\u6b64\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u7ebf\u7a0b\u7684\u8c03\u5ea6\u4e0e\u5207\u6362\u3002","title":"3.2 \u7ebf\u7a0b\u5207\u6362\u6d41\u7a0b\u56fe"},{"location":"lab3/#4","text":"","title":"4 \u5b9e\u9a8c\u6b65\u9aa4"},{"location":"lab3/#41","text":"\u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab2 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u4ee3\u7801: rand.h/rand.c , string.h/string.c , mm.h/mm.c \u3002\u5e76\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u8fd9\u4e9b\u6587\u4ef6\u6b63\u786e\u653e\u7f6e\u3002\u5176\u4e2d mm.h/mm.c \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u7269\u7406\u5185\u5b58\u7ba1\u7406\u63a5\u53e3, rand.h/rand.c \u63d0\u4f9b\u4e86 rand() \u63a5\u53e3\u7528\u4ee5\u63d0\u4f9b\u4f2a\u968f\u673a\u6570\u5e8f\u5217, string.h/string.c \u63d0\u4f9b\u4e86 memset \u63a5\u53e3\u7528\u4ee5\u521d\u59cb\u5316\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 . \u251c\u2500\u2500 arch \u2502 \u2514\u2500\u2500 riscv \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 mm.h \u2502 \u2514\u2500\u2500 kernel \u2502 \u2514\u2500\u2500 mm.c \u251c\u2500\u2500 include \u2502 \u251c\u2500\u2500 rand.h \u2502 \u2514\u2500\u2500 string.h \u2514\u2500\u2500 lib \u251c\u2500\u2500 rand.c \u2514\u2500\u2500 string.c \u5728 lab3 \u4e2d\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u7269\u7406\u5185\u5b58\u7ba1\u7406\u7684\u63a5\u53e3, \u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e86 kalloc \u63a5\u53e3 ( \u89c1 mm.c ) \u7ed9\u540c\u5b66\u3002\u540c\u5b66\u53ef\u4ee5\u7528 kalloc \u6765\u7533\u8bf7 4KB \u7684\u7269\u7406\u9875\u3002\u7531\u4e8e\u5f15\u5165\u4e86\u7b80\u5355\u7684\u7269\u7406\u5185\u5b58\u7ba1\u7406, \u9700\u8981\u5728 _start \u7684\u9002\u5f53\u4f4d\u7f6e\u8c03\u7528 mm_init , \u6765\u521d\u59cb\u5316\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf, \u5e76\u4e14\u5728\u521d\u59cb\u5316\u65f6\u9700\u8981\u7528\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684\u5b8f, \u9700\u8981\u4fee\u6539 defs.h , \u5728 defs.h \u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 #define PHY_START 0x0000000080000000 #define PHY_SIZE 128 * 1024 * 1024 // 128MB, QEMU \u9ed8\u8ba4\u5185\u5b58\u5927\u5c0f #define PHY_END (PHY_START + PHY_SIZE) #define PGSIZE 0x1000 // 4KB #define PGROUNDUP(addr) ((addr + PGSIZE - 1) & (~(PGSIZE - 1))) #define PGROUNDDOWN(addr) (addr & (~(PGSIZE - 1))) \u8bf7\u5728\u6dfb\u52a0/\u4fee\u6539\u4e0a\u8ff0\u6587\u4ef6\u4ee3\u7801\u4e4b\u540e, \u786e\u4fdd\u5de5\u7a0b\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c, \u4e4b\u540e\u518d\u5f00\u59cb\u5b9e\u73b0 lab3 (\u6709\u53ef\u80fd\u9700\u8981\u540c\u5b66\u81ea\u5df1\u8c03\u6574\u4e00\u4e9b\u5934\u6587\u4ef6\u7684\u5f15\u5165)\u3002 \u5728 lab3 \u4e2d\u9700\u8981\u540c\u5b66\u9700\u8981\u6dfb\u52a0\u5e76\u4fee\u6539 arch/riscv/include/proc.h arch/riscv/kernel/proc.c \u4e24\u4e2a\u6587\u4ef6\u3002 \u672c\u6b21\u5b9e\u9a8c\u9700\u8981\u5b9e\u73b0\u4e24\u79cd\u4e0d\u540c\u7684\u8c03\u5ea6\u7b97\u6cd5, \u5982\u4f55\u63a7\u5236\u4ee3\u7801\u903b\u8f91\u89c1 4.4","title":"4.1 \u51c6\u5907\u5de5\u7a0b"},{"location":"lab3/#42-proch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // arch/riscv/include/proc.h #include \"types.h\" #define NR_TASKS (1 + 31) // \u7528\u4e8e\u63a7\u5236 \u6700\u5927\u7ebf\u7a0b\u6570\u91cf \uff08idle \u7ebf\u7a0b + 31 \u5185\u6838\u7ebf\u7a0b\uff09 #define TASK_RUNNING 0 // \u4e3a\u4e86\u7b80\u5316\u5b9e\u9a8c, \u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u53ea\u6709\u4e00\u79cd\u72b6\u6001 #define PRIORITY_MIN 1 #define PRIORITY_MAX 10 /* \u7528\u4e8e\u8bb0\u5f55 `\u7ebf\u7a0b` \u7684 `\u5185\u6838\u6808\u4e0e\u7528\u6237\u6808\u6307\u9488` */ /* (lab3\u4e2d\u65e0\u9700\u8003\u8651, \u5728\u8fd9\u91cc\u5f15\u5165\u662f\u4e3a\u4e86\u4e4b\u540e\u5b9e\u9a8c\u7684\u4f7f\u7528) */ struct thread_info { uint64 kernel_sp ; uint64 user_sp ; }; /* \u7ebf\u7a0b\u72b6\u6001\u6bb5\u6570\u636e\u7ed3\u6784 */ struct thread_struct { uint64 ra ; uint64 sp ; uint64 s [ 12 ]; }; /* \u7ebf\u7a0b\u6570\u636e\u7ed3\u6784 */ struct task_struct { struct thread_info * thread_info ; uint64 state ; // \u7ebf\u7a0b\u72b6\u6001 uint64 counter ; // \u8fd0\u884c\u5269\u4f59\u65f6\u95f4 uint64 priority ; // \u8fd0\u884c\u4f18\u5148\u7ea7 1\u6700\u4f4e 10\u6700\u9ad8 uint64 pid ; // \u7ebf\u7a0bid struct thread_struct thread ; }; /* \u7ebf\u7a0b\u521d\u59cb\u5316 \u521b\u5efa NR_TASKS \u4e2a\u7ebf\u7a0b */ void task_init (); /* \u5728\u65f6\u949f\u4e2d\u65ad\u5904\u7406\u4e2d\u88ab\u8c03\u7528 \u7528\u4e8e\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u8c03\u5ea6 */ void do_timer (); /* \u8c03\u5ea6\u7a0b\u5e8f \u9009\u62e9\u51fa\u4e0b\u4e00\u4e2a\u8fd0\u884c\u7684\u7ebf\u7a0b */ void schedule (); /* \u7ebf\u7a0b\u5207\u6362\u5165\u53e3\u51fd\u6570*/ void switch_to ( struct task_struct * next ); /* dummy funciton: \u4e00\u4e2a\u5faa\u73af\u7a0b\u5e8f, \u5faa\u73af\u8f93\u51fa\u81ea\u5df1\u7684 pid \u4ee5\u53ca\u4e00\u4e2a\u81ea\u589e\u7684\u5c40\u90e8\u53d8\u91cf */ void dummy ();","title":"4.2 proc.h \u6570\u636e\u7ed3\u6784\u5b9a\u4e49"},{"location":"lab3/#43","text":"","title":"4.3 \u7ebf\u7a0b\u8c03\u5ea6\u529f\u80fd\u5b9e\u73b0"},{"location":"lab3/#431","text":"\u5728\u521d\u59cb\u5316\u7ebf\u7a0b\u7684\u65f6\u5019, \u6211\u4eec\u53c2\u8003 Linux v0.11\u4e2d\u7684\u5b9e\u73b0 \u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a 4KB \u7684\u7269\u7406\u9875, \u6211\u4eec\u5c06 task_struct \u5b58\u653e\u5728\u8be5\u9875\u7684\u4f4e\u5730\u5740\u90e8\u5206, \u5c06\u7ebf\u7a0b\u7684\u6808\u6307\u9488 sp \u6307\u5411\u8be5\u9875\u7684\u9ad8\u5730\u5740\u3002\u5177\u4f53\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u25c4\u2500\u2500\u2500 High Address \u2502 \u2502 \u2502 stack \u2502 \u2502 \u2502 \u2502 \u2502 sp \u2500\u2500\u25ba\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u25bc \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 4KB Page \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 task_struct \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u25c4\u2500\u2500\u2500 Low Address \u5f53\u6211\u4eec\u7684 OS run \u8d77\u6765\u7684\u65f6\u5019, \u5176\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b idle \u7ebf\u7a0b , \u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u4e3a\u5b83\u8bbe\u8ba1\u597d task_struct \u3002\u6240\u4ee5\u7b2c\u4e00\u6b65\u6211\u4eec\u8981\u4e3a idle \u8bbe\u7f6e task_struct \u3002\u5e76\u5c06 current , task[0] \u90fd\u6307\u5411 idle \u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1, \u6211\u4eec\u5c06 task[1] ~ task[NR_TASKS - 1] , \u5168\u90e8\u521d\u59cb\u5316, \u8fd9\u91cc\u548c idle \u8bbe\u7f6e\u7684\u533a\u522b\u5728\u4e8e\u8981\u4e3a\u8fd9\u4e9b\u7ebf\u7a0b\u8bbe\u7f6e thread_struct \u4e2d\u7684 ra \u548c sp . \u5728 _start \u9002\u5f53\u7684\u4f4d\u7f6e\u8c03\u7528 task_init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //arch/riscv/kernel/proc.c extern void __dummy (); struct task_struct * idle ; // idle process struct task_struct * current ; // \u6307\u5411\u5f53\u524d\u8fd0\u884c\u7ebf\u7a0b\u7684 `task_struct` struct task_struct * task [ NR_TASKS ]; // \u7ebf\u7a0b\u6570\u7ec4, \u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u4fdd\u5b58\u5728\u6b64 void task_init () { // 1. \u8c03\u7528 kalloc() \u4e3a idle \u5206\u914d\u4e00\u4e2a\u7269\u7406\u9875 // 2. \u8bbe\u7f6e state \u4e3a TASK_RUNNING; // 3. \u7531\u4e8e idle \u4e0d\u53c2\u4e0e\u8c03\u5ea6 \u53ef\u4ee5\u5c06\u5176 counter / priority \u8bbe\u7f6e\u4e3a 0 // 4. \u8bbe\u7f6e idle \u7684 pid \u4e3a 0 // 5. \u5c06 current \u548c task[0] \u6307\u5411 idle /* YOUR CODE HERE */ // 1. \u53c2\u8003 idle \u7684\u8bbe\u7f6e, \u4e3a task[1] ~ task[NR_TASKS - 1] \u8fdb\u884c\u521d\u59cb\u5316 // 2. \u5176\u4e2d\u6bcf\u4e2a\u7ebf\u7a0b\u7684 state \u4e3a TASK_RUNNING, counter \u4e3a 0, priority \u4f7f\u7528 rand() \u6765\u8bbe\u7f6e, pid \u4e3a\u8be5\u7ebf\u7a0b\u5728\u7ebf\u7a0b\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 // 3. \u4e3a task[1] ~ task[NR_TASKS - 1] \u8bbe\u7f6e `thread_struct` \u4e2d\u7684 `ra` \u548c `sp`, // 4. \u5176\u4e2d `ra` \u8bbe\u7f6e\u4e3a __dummy \uff08\u89c1 4.3.2\uff09\u7684\u5730\u5740, `sp` \u8bbe\u7f6e\u4e3a \u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u7269\u7406\u9875\u7684\u9ad8\u5730\u5740 /* YOUR CODE HERE */ printk ( \"...proc_init done! \\n \" ); } Debug \u63d0\u793a\uff1a \u4fee\u6539 proc.h \u4e2d\u7684 NR_TASKS \u4e3a\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u503c, \u6bd4\u5982 5, \u8fd9\u6837 \u9664\u53bb task[0] ( idle ), \u53ea\u9700\u8981\u521d\u59cb\u5316 4 \u4e2a\u7ebf\u7a0b, \u65b9\u4fbf\u8c03\u8bd5\u3002 \u6ce8\u610f\u4ee5\u4e0a\u7684\u4fee\u6539\u53ea\u662f\u4e3a\u4e86\u5728\u505a\u5b9e\u9a8c\u7684\u8fc7\u7a0b\u4e2d\u65b9\u4fbf\u8c03\u8bd5, \u6700\u540e\u4e00\u5b9a\u8bb0\u4f4f\u8981\u4fee\u6539\u56de\u53bb\uff01\uff01\uff01","title":"4.3.1 \u7ebf\u7a0b\u521d\u59cb\u5316"},{"location":"lab3/#432-__dummy-dummy","text":"task[1] ~ task[NR_TASKS - 1] \u90fd\u8fd0\u884c\u540c\u4e00\u6bb5\u4ee3\u7801 dummy() \u6211\u4eec\u5728 proc.c \u6dfb\u52a0 dummy() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // arch/riscv/kernel/proc.c void dummy () { uint64 MOD = 1000000007 ; uint64 auto_inc_local_var = 0 ; int last_counter = -1 ; while ( 1 ) { if ( last_counter == -1 || current -> counter != last_counter ) { last_counter = current -> counter ; auto_inc_local_var = ( auto_inc_local_var + 1 ) % MOD ; printk ( \"[PID = %d] is running. auto_inc_local_var = %d \\n \" , current -> pid , auto_inc_local_var ); } } } Debug \u63d0\u793a\uff1a \u53ef\u4ee5\u7528 printk \u6253\u5370\u66f4\u591a\u7684\u4fe1\u606f \u5f53\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6, \u7531\u4e8e\u65f6\u949f\u4e2d\u65ad\u7684\u89e6\u53d1, \u4f1a\u5c06\u5f53\u524d\u8fd0\u884c\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u73af\u5883\u4fdd\u5b58\u5728\u6808\u4e0a\u3002\u5f53\u7ebf\u7a0b\u518d\u6b21\u88ab\u8c03\u5ea6\u65f6, \u4f1a\u5c06\u4e0a\u4e0b\u6587\u4ece\u6808\u4e0a\u6062\u590d, \u4f46\u662f\u5f53\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b, \u6b64\u65f6\u7ebf\u7a0b\u7684\u6808\u4e3a\u7a7a, \u5f53\u8fd9\u4e2a\u7ebf\u7a0b\u88ab\u8c03\u5ea6\u65f6, \u662f\u6ca1\u6709\u4e0a\u4e0b\u6587\u9700\u8981\u88ab\u6062\u590d\u7684, \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e3a\u7ebf\u7a0b \u7b2c\u4e00\u6b21\u8c03\u5ea6 \u63d0\u4f9b\u4e00\u4e2a\u7279\u6b8a\u7684\u8fd4\u56de\u51fd\u6570 __dummy \u5728 entry.S \u6dfb\u52a0 __dummy \u5728 __dummy \u4e2d\u5c06 sepc \u8bbe\u7f6e\u4e3a dummy() \u7684\u5730\u5740, \u5e76\u4f7f\u7528 sret \u4ece\u4e2d\u65ad\u4e2d\u8fd4\u56de\u3002 __dummy \u4e0e _traps \u7684 restore \u90e8\u5206\u76f8\u6bd4, \u5176\u5b9e\u5c31\u662f\u7701\u7565\u4e86\u4ece\u6808\u4e0a\u6062\u590d\u4e0a\u4e0b\u6587\u7684\u8fc7\u7a0b ( \u4f46\u662f\u624b\u52a8\u8bbe\u7f6e\u4e86 sepc )\u3002 1 2 3 4 5 # arch/riscv/kernel/entry.S .global __dummy __dummy: # YOUR CODE HERE","title":"4.3.2 __dummy \u4e0e dummy \u4ecb\u7ecd"},{"location":"lab3/#433","text":"\u5224\u65ad\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b next \u4e0e\u5f53\u524d\u7684\u7ebf\u7a0b current \u662f\u5426\u4e3a\u540c\u4e00\u4e2a\u7ebf\u7a0b, \u5982\u679c\u662f\u540c\u4e00\u4e2a\u7ebf\u7a0b, \u5219\u65e0\u9700\u505a\u4efb\u4f55\u5904\u7406, \u5426\u5219\u8c03\u7528 __switch_to \u8fdb\u884c\u7ebf\u7a0b\u5207\u6362\u3002 1 2 3 4 5 6 7 // arch/riscv/kernel/proc.c extern void __switch_to ( struct task_struct * prev , struct task_struct * next ); void switch_to ( struct task_struct * next ) { /* YOUR CODE HERE */ } \u5728 entry.S \u4e2d\u5b9e\u73b0\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362 __switch_to : __switch_to \u63a5\u53d7\u4e24\u4e2a task_struct \u6307\u9488\u4f5c\u4e3a\u53c2\u6570 \u4fdd\u5b58\u5f53\u524d\u7ebf\u7a0b\u7684 ra , sp , s0~s11 \u5230\u5f53\u524d\u7ebf\u7a0b\u7684 thread_struct \u4e2d \u5c06\u4e0b\u4e00\u4e2a\u7ebf\u7a0b\u7684 thread_struct \u4e2d\u7684\u76f8\u5173\u6570\u636e\u8f7d\u5165\u5230 ra , sp , s0~s11 \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 # arch/riscv/kernel/entry.S .globl __switch_to __switch_to: # save state to prev process # YOUR CODE HERE # restore state from next process # YOUR CODE HERE ret Debug \u63d0\u793a\uff1a \u53ef\u4ee5\u5c1d\u8bd5\u662f\u5426\u53ef\u4ee5\u4ece idle \u6b63\u786e\u5207\u6362\u5230 process 1","title":"4.3.3 \u5b9e\u73b0\u7ebf\u7a0b\u5207\u6362"},{"location":"lab3/#434","text":"\u5b9e\u73b0 do_timer() , \u5e76\u5728 \u65f6\u949f\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \u4e2d\u8c03\u7528\u3002 1 2 3 4 5 6 7 8 // arch/riscv/kernel/proc.c void do_timer ( void ) { // 1. \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u662f idle \u7ebf\u7a0b \u76f4\u63a5\u8fdb\u884c\u8c03\u5ea6 // 2. \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u662f idle \u5bf9\u5f53\u524d\u7ebf\u7a0b\u7684\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u51cf1 \u82e5\u5269\u4f59\u65f6\u95f4\u4ecd\u7136\u5927\u4e8e0 \u5219\u76f4\u63a5\u8fd4\u56de \u5426\u5219\u8fdb\u884c\u8c03\u5ea6 /* YOUR CODE HERE */ }","title":"4.3.4 \u5b9e\u73b0\u8c03\u5ea6\u5165\u53e3\u51fd\u6570"},{"location":"lab3/#435","text":"\u672c\u6b21\u5b9e\u9a8c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e24\u79cd\u8c03\u5ea6\u7b97\u6cd5\uff1a1.\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\u7b97\u6cd5, 2.\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\u3002","title":"4.3.5 \u5b9e\u73b0\u7ebf\u7a0b\u8c03\u5ea6"},{"location":"lab3/#4351","text":"\u5f53\u9700\u8981\u8fdb\u884c\u8c03\u5ea6\u65f6\u6309\u7167\u4e00\u4e0b\u89c4\u5219\u8fdb\u884c\u8c03\u5ea6\uff1a \u904d\u5386\u7ebf\u7a0b\u6307\u9488\u6570\u7ec4 task (\u4e0d\u5305\u62ec idle , \u5373 task[0] ), \u5728\u6240\u6709\u8fd0\u884c\u72b6\u6001 ( TASK_RUNNING ) \u4e0b\u7684\u7ebf\u7a0b\u8fd0\u884c\u5269\u4f59\u65f6\u95f4 \u6700\u5c11 \u7684\u7ebf\u7a0b\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u6267\u884c\u7684\u7ebf\u7a0b\u3002 \u5982\u679c \u6240\u6709 \u8fd0\u884c\u72b6\u6001\u4e0b\u7684\u7ebf\u7a0b\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u90fd\u4e3a0, \u5219\u5bf9 task[1] ~ task[NR_TASKS-1] \u7684\u8fd0\u884c\u5269\u4f59\u65f6\u95f4\u91cd\u65b0\u8d4b\u503c (\u4f7f\u7528 rand() ) , \u4e4b\u540e\u518d\u91cd\u65b0\u8fdb\u884c\u8c03\u5ea6\u3002 1 2 3 4 5 // arch/riscv/kernel/proc.c void schedule ( void ) { /* YOUR CODE HERE */ } Debug \u63d0\u793a\uff1a\u53ef\u4ee5\u5148\u5c06 NR_TASKS \u6539\u4e3a\u8f83\u5c0f\u7684\u503c, \u8c03\u7528 printk \u5c06\u6240\u6709\u7ebf\u7a0b\u7684\u4fe1\u606f\u6253\u5370\u51fa\u6765\u3002","title":"4.3.5.1 \u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\u7b97\u6cd5"},{"location":"lab3/#4352","text":"\u53c2\u8003 Linux v0.11 \u8c03\u5ea6\u7b97\u6cd5\u5b9e\u73b0 \u5b9e\u73b0\u3002 1 2 3 4 5 // arch/riscv/kernel/proc.c void schedule ( void ) { /* YOUR CODE HERE */ }","title":"4.3.5.2 \u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5"},{"location":"lab3/#44","text":"\u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6, \u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6, \u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539, \u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u7531\u4e8e\u672c\u6b21\u5b9e\u9a8c\u9700\u8981\u5b8c\u6210\u4e24\u4e2a\u8c03\u5ea6\u7b97\u6cd5, \u56e0\u6b64\u9700\u8981\u4e24\u79cd\u8c03\u5ea6\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528 gcc \u2013D \u9009\u9879\u8fdb\u884c\u63a7\u5236\u3002 DSJF \uff08\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\uff09\u3002 DPRIORITY \uff08\u4f18\u5148\u7ea7\u8c03\u5ea6\uff09\u3002 \u5728 proc.c \u4e2d\u4f7f\u7528 #ifdef , #endif \u6765\u63a7\u5236\u4ee3\u7801\u3002 \u4fee\u6539\u9876\u5c42Makefile\u4e3a CFLAG = ${CF} ${INCLUDE} -DSJF \u6216 CFLAG = ${CF} ${INCLUDE} -DPRIORITY (\u4f5c\u4e1a\u63d0\u4ea4\u7684\u65f6\u5019 Makefile \u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5) \u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6\u8f93\u51fa\u793a\u4f8b (\u4e3a\u4e86\u4fbf\u4e8e\u5c55\u793a, \u8fd9\u91cc\u4e00\u5171\u53ea\u521d\u59cb\u5316\u4e86 4 \u4e2a\u7ebf\u7a0b) \u540c\u5b66\u4eec\u6700\u540e\u63d0\u4ea4\u65f6\u9700\u8981 \u4fdd\u8bc1 NR_TASKS \u4e3a 32 \u4e0d\u53d8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done! ...proc_init done! Hello RISC-V idle process is running! SET [PID = 1 COUNTER = 10] SET [PID = 2 COUNTER = 10] SET [PID = 3 COUNTER = 5] SET [PID = 4 COUNTER = 2] switch to [PID = 4 COUNTER = 2] [PID = 4] is running. auto_inc_local_var = 1 [PID = 4] is running. auto_inc_local_var = 2 switch to [PID = 3 COUNTER = 5] [PID = 3] is running. auto_inc_local_var = 1 ..... [PID = 3] is running. auto_inc_local_var = 5 switch to [PID = 2 COUNTER = 10] [PID = 2] is running. auto_inc_local_var = 1 ... [PID = 2] is running. auto_inc_local_var = 10 switch to [PID = 1 COUNTER = 10] [PID = 1] is running. auto_inc_local_var = 1 ... [PID = 1] is running. auto_inc_local_var = 10 SET [PID = 1 COUNTER = 9] SET [PID = 2 COUNTER = 4] SET [PID = 3 COUNTER = 4] SET [PID = 4 COUNTER = 10] switch to [PID = 3 COUNTER = 4] [PID = 3] is running. auto_inc_local_var = 6 ... [PID = 3] is running. auto_inc_local_var = 9 \u4f18\u5148\u7ea7\u8c03\u5ea6\u8f93\u51fa\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done! ...proc_init done! Hello RISC-V idle process is running! SET [PID = 1 PRIORITY = 1 COUNTER = 1] SET [PID = 2 PRIORITY = 4 COUNTER = 4] SET [PID = 3 PRIORITY = 10 COUNTER = 10] SET [PID = 4 PRIORITY = 4 COUNTER = 4] switch to [PID = 3 PRIORITY = 10 COUNTER = 10] [PID = 3] is running. auto_inc_local_var = 1 ... [PID = 3] is running. auto_inc_local_var = 10 switch to [PID = 4 PRIORITY = 4 COUNTER = 4] [PID = 4] is running. auto_inc_local_var = 1 ... [PID = 4] is running. auto_inc_local_var = 4 switch to [PID = 2 PRIORITY = 4 COUNTER = 4] [PID = 2] is running. auto_inc_local_var = 1 ... [PID = 2] is running. auto_inc_local_var = 4 switch to [PID = 1 PRIORITY = 1 COUNTER = 1] [PID = 1] is running. auto_inc_local_var = 1 SET [PID = 1 PRIORITY = 1 COUNTER = 1] SET [PID = 2 PRIORITY = 4 COUNTER = 4] SET [PID = 3 PRIORITY = 10 COUNTER = 10] SET [PID = 4 PRIORITY = 4 COUNTER = 4] switch to [PID = 3 PRIORITY = 10 COUNTER = 10] [PID = 3] is running. auto_inc_local_var = 11 ...","title":"4.4 \u7f16\u8bd1\u53ca\u6d4b\u8bd5"},{"location":"lab3/#_1","text":"\u5728 RV64 \u4e2d\u4e00\u5171\u7528 32 \u4e2a\u901a\u7528\u5bc4\u5b58\u5668, \u4e3a\u4ec0\u4e48 context_switch \u4e2d\u53ea\u4fdd\u5b58\u4e8614\u4e2a? \u5f53\u7ebf\u7a0b\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6, \u5176 ra \u6240\u4ee3\u8868\u7684\u8fd4\u56de\u70b9\u662f __dummy \u3002\u90a3\u4e48\u5728\u4e4b\u540e\u7684\u7ebf\u7a0b\u8c03\u7528\u4e2d context_switch \u4e2d, ra \u4fdd\u5b58/\u6062\u590d\u7684\u51fd\u6570\u8fd4\u56de\u70b9\u662f\u4ec0\u4e48\u5462? \u8bf7\u540c\u5b66\u7528 gdb \u5c1d\u8bd5\u8ffd\u8e2a\u4e00\u6b21\u5b8c\u6574\u7684\u7ebf\u7a0b\u5207\u6362\u6d41\u7a0b, \u5e76\u5173\u6ce8\u6bcf\u4e00\u6b21 ra \u7684\u53d8\u6362 (\u9700\u8981\u622a\u56fe)\u3002 \u8fd0\u884c\u8bfe\u5802 demo \u7684 hello-lkm \u4ee3\u7801, \u56de\u7b54\u4e0b\u5217\u95ee\u9898: a. \u5bf9\u8fd0\u884c\u7ed3\u679c\u8fdb\u884c\u622a\u56fe, \u5c55\u793a\u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u7ebf\u7a0b\u54ea\u4e9b\u6570\u636e share, \u54ea\u4e9b\u4e0d share b. \u5b89\u88c5 lkm \u548c remove lkm \u7684\u547d\u4ee4\u5206\u522b\u662f\u4ec0\u4e48? \u5bf9\u5185\u6838\u8fdb\u884c\u4e86\u54ea\u4e9b\u6539\u52a8? c. \u4f7f\u7528\u54ea\u4e2a\u5185\u6838\u51fd\u6570\u53ef\u4ee5\u8f93\u51fa\u5230\u5185\u6838 log? \u7279\u522b\u5730\uff0c\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 WSL2 \u4e0a\u7684 Ubuntu 22.04 \uff0c\u7531\u4e8e\u5b98\u65b9\u548c\u6d59\u5927\u6e90\u4e2d\u90fd\u6ca1\u6709\u7ed9\u51fa\u5bf9\u5e94\u7248\u672c\u7684 linux-headers \uff0c\u6240\u4ee5\u9700\u8981\u6211\u4eec\u4ece Linux \u6e90\u7801\u5f00\u59cb\u7f16\u8bd1 kernel module\u3002\u4f60\u53ef\u4ee5\u4ece\u5fae\u8f6f\u7684\u5b98\u65b9 WSL2 Kernel Repository \u4e2d\u83b7\u53d6\u5230\u4f60\u6b63\u5728\u4f7f\u7528\u7684 WSL2 \u5185\u6838\u7248\u672c\u5bf9\u5e94\u7684\u6e90\u7801\u3002 \u4f8b\u5982\u6211\u901a\u8fc7 uname -r \u5f97\u5230\u7684\u7ed3\u679c\u662f 5.10.16.3-microsoft-standard-WSL2 \uff0c\u5c31\u9700\u8981\u4ece\u8fd9\u4e2a Repo \u7684 tags \u4e2d\u627e\u5230 linux-msft-wsl-5.10.16.3 \u7684\u6e90\u7801\u5e76\u4e0b\u8f7d\u89e3\u538b\u3002 \u5728\u7f16\u8bd1 lkm \u4e4b\u524d\uff0c\u9700\u8981\u9996\u5148\u7f16\u8bd1 Linux \u5185\u6838\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 zcat /proc/config.gz > .config \u6765\u5c06\u5f53\u524d\u8fd0\u884c\u7684\u5185\u6838\u7684\u914d\u7f6e\u76f4\u63a5\u590d\u5236\u5230\u5185\u6838\u4ed3\u5e93\u4e2d\uff0c\u7136\u540e\u76f4\u63a5\u8fdb\u884c make \u3002\u5982\u679c\u5728\u7f16\u8bd1\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u4e86\u90e8\u5206\u9009\u9879\u6ca1\u6709\u914d\u7f6e\u7684\u63d0\u793a\uff0c\u53ef\u4ee5\u4e00\u76f4\u6572\u56de\u8f66\u6765\u9009\u62e9\u9ed8\u8ba4\u9009\u9879\u3002 \u5728\u7f16\u8bd1\u5b8c\u6210\u4ee5\u540e\uff0c\u4f60\u9700\u8981\u9605\u8bfb\u6211\u4eec\u7ed9\u51fa\u7684 lkm \u7684 Makefile \u6765\u7406\u89e3\u5176\u5177\u4f53\u884c\u4e3a\uff0c\u5e76\u5c06\u7f16\u8bd1\u8fdb\u884c\u7684\u76ee\u5f55\u6307\u5b9a\u4e3a\u6211\u4eec\u521a\u521a\u7684\u5185\u6838\u76ee\u5f55\uff08\u5373\u662f\u521a\u521a\u6211\u4eec\u89e3\u538b\u5b8c\u6210\u7684\u540d\u4e3a WSL2-Linux-Kernel-linux-msft-wsl-5.10.16.3 \uff0c\u5e76\u8fdb\u884c\u4e86\u5185\u6838\u7f16\u8bd1\u7684\u76ee\u5f55\uff09\uff0c\u6ce8\u610f\u4e0d\u7528\u5e26\u4e0a\u540e\u9762\u7684 build \u5b50\u76ee\u5f55\u8def\u5f84\uff0c\u5373\u53ef\u5b8c\u6210\u7f16\u8bd1\u3002","title":"\u601d\u8003\u9898"},{"location":"lab3/#_2","text":"\u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u4f5c\u4e1a\u63d0\u4ea4"},{"location":"lab4/","text":"Lab 4: RV64 \u865a\u62df\u5185\u5b58\u7ba1\u7406 1 \u5b9e\u9a8c\u76ee\u7684 \u5b66\u4e60\u865a\u62df\u5185\u5b58\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u5b9e\u73b0\u7269\u7406\u5730\u5740\u5230\u865a\u62df\u5730\u5740\u7684\u5207\u6362\u3002 \u4e86\u89e3 RISC-V \u67b6\u6784\u4e2d SV39 \u5206\u9875\u6a21\u5f0f\uff0c\u5b9e\u73b0\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\uff0c\u5e76\u5bf9\u4e0d\u540c\u7684\u6bb5\u8fdb\u884c\u76f8\u5e94\u7684\u6743\u9650\u8bbe\u7f6e\u3002 2 \u5b9e\u9a8c\u73af\u5883 Environment in previous labs 3 \u80cc\u666f\u77e5\u8bc6 3.0 \u524d\u8a00 \u5728 lab3 \u4e2d\u6211\u4eec\u8d4b\u4e88\u4e86 OS \u5bf9\u591a\u4e2a\u7ebf\u7a0b\u8c03\u5ea6\u4ee5\u53ca\u5e76\u53d1\u6267\u884c\u7684\u80fd\u529b\uff0c\u7531\u4e8e\u76ee\u524d\u8fd9\u4e9b\u7ebf\u7a0b\u90fd\u662f\u5185\u6838\u7ebf\u7a0b\uff0c\u56e0\u6b64\u4ed6\u4eec\u53ef\u4ee5\u5171\u4eab\u8fd0\u884c\u7a7a\u95f4\uff0c\u5373\u8fd0\u884c\u4e0d\u540c\u7ebf\u7a0b\u5bf9\u7a7a\u95f4\u7684\u4fee\u6539\u662f\u76f8\u4e92\u53ef\u89c1\u7684\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u9700\u8981\u7ebf\u7a0b\u76f8\u4e92 \u9694\u79bb \uff0c\u4ee5\u53ca\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u66f4\u52a0 \u9ad8\u6548 \u7684\u4f7f\u7528\u5185\u5b58\uff0c\u5c31\u5fc5\u987b\u5f15\u5165 \u865a\u62df\u5185\u5b58 \u8fd9\u4e2a\u6982\u5ff5\u3002 \u865a\u62df\u5185\u5b58\u53ef\u4ee5\u4e3a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u63d0\u4f9b\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5236\u9020\u4e00\u79cd\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u90fd\u662f\u72ec\u7acb\u7684\u5047\u8c61\u3002\u540c\u65f6\u865a\u62df\u5185\u5b58\u5230\u7269\u7406\u5185\u5b58\u7684\u6620\u5c04\u4e5f\u5305\u542b\u4e86\u5bf9\u5185\u5b58\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u65b9\u4fbf Kernel \u5b8c\u6210\u6743\u9650\u68c0\u67e5\u3002 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5173\u6ce8 OS \u5982\u4f55 \u5f00\u542f\u865a\u62df\u5730\u5740 \u4ee5\u53ca\u901a\u8fc7\u8bbe\u7f6e\u9875\u8868\u6765\u5b9e\u73b0 \u5730\u5740\u6620\u5c04 \u548c \u6743\u9650\u63a7\u5236 \u3002 3.1 Kernel \u7684\u865a\u62df\u5185\u5b58\u5e03\u5c40 1 2 3 4 5 6 7 8 9 10 11 12 13 start_address end_address 0x0 0x3fffffffff \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2518 \u2193 256G \u2193 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 User Space \u2502 ... \u2502 Kernel Space \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 256G \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 0xffffffc000000000 0xffffffffffffffff start_address end_address \u901a\u8fc7\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u770b\u5230 RV64 \u5c06 0x0000004000000000 \u4ee5\u4e0b\u7684\u865a\u62df\u7a7a\u95f4\u4f5c\u4e3a user space \u3002\u5c06 0xffffffc000000000 \u53ca\u4ee5\u4e0a\u7684\u865a\u62df\u7a7a\u95f4\u4f5c\u4e3a kernel space \u3002\u7531\u4e8e\u6211\u4eec\u8fd8\u672a\u5f15\u5165\u7528\u6237\u6001\u7a0b\u5e8f\uff0c\u76ee\u524d\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 kernel space \u3002 \u5177\u4f53\u7684\u865a\u62df\u5185\u5b58\u5e03\u5c40\u53ef\u4ee5 \u53c2\u8003\u8fd9\u91cc \u3002 \u5728 RISC-V Linux Kernel Space \u4e2d\u6709\u4e00\u6bb5\u533a\u57df\u88ab\u79f0\u4e3a direct mapping area \uff0c\u4e3a\u4e86\u65b9\u4fbf kernel \u53ef\u4ee5\u9ad8\u6548\u7387\u7684\u8bbf\u95ee RAM\uff0ckernel \u4f1a\u9884\u5148\u628a\u6240\u6709\u7269\u7406\u5185\u5b58\u90fd\u6620\u5c04\u81f3\u8fd9\u4e00\u5757\u533a\u57df ( PA + OFFSET == VA )\uff0c \u8fd9\u79cd\u6620\u5c04\u4e5f\u88ab\u79f0\u4e3a linear mapping \u3002\u5728 RISC-V Linux Kernel \u4e2d\u8fd9\u4e00\u6bb5\u533a\u57df\u4e3a 0xffffffe000000000 ~ 0xffffffff00000000 , \u5171 124 GB \u3002 3.2 RISC-V Virtual-Memory System (Sv39) 3.2.1 satp Register\uff08Supervisor Address Translation and Protection Register\uff09 1 2 3 4 63 60 59 44 43 0 --------------------------------------------------------------------- | MODE | ASID | PPN | --------------------------------------------------------------------- MODE \u5b57\u6bb5\u7684\u53d6\u503c\u5982\u4e0b\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 RV 64 ---------------------------------------------------------- | Value | Name | Description | |----------------------------------------------------------| | 0 | Bare | No translation or protection | | 1 - 7 | --- | Reserved for standard use | | 8 | Sv39 | Page - based 39 bit virtual addressing | <-- \u6211\u4eec\u4f7f\u7528\u7684mode | 9 | Sv48 | Page - based 48 bit virtual addressing | | 10 | Sv57 | Page - based 57 bit virtual addressing | | 11 | Sv64 | Page - based 64 bit virtual addressing | | 12 - 13 | --- | Reserved for standard use | | 14 - 15 | --- | Reserved for standard use | ----------------------------------------------------------- ASID ( Address Space Identifier ) \uff1a \u6b64\u6b21\u5b9e\u9a8c\u4e2d\u76f4\u63a5\u7f6e 0 \u5373\u53ef\u3002 PPN ( Physical Page Number ) \uff1a\u9876\u7ea7\u9875\u8868\u7684\u7269\u7406\u9875\u53f7\u3002\u6211\u4eec\u7684\u7269\u7406\u9875\u7684\u5927\u5c0f\u4e3a 4KB\uff0c PA >> 12 == PPN\u3002 \u5177\u4f53\u4ecb\u7ecd\u8bf7\u9605\u8bfb RISC-V Privileged Spec 4.1.10 \u3002 3.2.2 RISC-V Sv39 Virtual Address and Physical Address 1 2 3 4 5 38 30 29 21 20 12 11 0 --------------------------------------------------------------------- | VPN [ 2 ] | VPN [ 1 ] | VPN [ 0 ] | page offset | --------------------------------------------------------------------- Sv39 virtual address 1 2 3 4 5 55 30 29 21 20 12 11 0 ----------------------------------------------------------------------------- | PPN [ 2 ] | PPN [ 1 ] | PPN [ 0 ] | page offset | ----------------------------------------------------------------------------- Sv39 physical address * Sv39 \u6a21\u5f0f\u5b9a\u4e49\u7269\u7406\u5730\u5740\u6709 56 \u4f4d\uff0c\u865a\u62df\u5730\u5740\u6709 64 \u4f4d\u3002\u4f46\u662f\uff0c\u865a\u62df\u5730\u5740\u7684 64 \u4f4d\u53ea\u6709\u4f4e 39 \u4f4d\u6709\u6548\u3002\u901a\u8fc7\u865a\u62df\u5185\u5b58\u5e03\u5c40\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176 63-39 \u4f4d\u4e3a 0 \u65f6\u4ee3\u8868 user space address\uff0c \u4e3a 1 \u65f6 \u4ee3\u8868 kernel space address\u3002 * Sv39 \u652f\u6301\u4e09\u7ea7\u9875\u8868\u7ed3\u6784\uff0cVPN 2-0 \u5206\u522b\u4ee3\u8868\u6bcf\u7ea7\u9875\u8868\u7684 \u865a\u62df\u9875\u53f7 \uff0cPPN 2-0 \u5206\u522b\u4ee3\u8868\u6bcf\u7ea7\u9875\u8868\u7684 \u7269\u7406\u9875\u53f7 \u3002\u7269\u7406\u5730\u5740\u548c\u865a\u62df\u5730\u5740\u7684\u4f4e12\u4f4d\u8868\u793a\u9875\u5185\u504f\u79fb\uff08page offset\uff09\u3002 * \u5177\u4f53\u4ecb\u7ecd\u8bf7\u9605\u8bfb RISC-V Privileged Spec 4.4.1 \u3002 3.2.3 RISC-V Sv39 Page Table Entry 1 2 3 4 5 6 7 8 9 10 11 12 13 14 63 54 53 28 27 19 18 10 9 8 7 6 5 4 3 2 1 0 ----------------------------------------------------------------------- | Reserved | PPN [ 2 ] | PPN [ 1 ] | PPN [ 0 ] | RSW | D | A | G | U | X | W | R | V | ----------------------------------------------------------------------- | | | | | | | | | | | | | | | | | ` ---- V - Valid | | | | | | | ` ------ R - Readable | | | | | | ` -------- W - Writable | | | | | ` ---------- X - Executable | | | | ` ------------ U - User | | | ` -------------- G - Global | | ` ---------------- A - Accessed | ` ------------------ D - Dirty ( 0 in page directory ) ` ---------------------- Reserved for supervisor software 0 \uff5e 9 bit: protection bits V : \u6709\u6548\u4f4d\uff0c\u5f53 V = 0, \u8bbf\u95ee\u8be5 PTE \u4f1a\u4ea7\u751f Pagefault\u3002 R : R = 1 \u8be5\u9875\u53ef\u8bfb\u3002 W : W = 1 \u8be5\u9875\u53ef\u5199\u3002 X : X = 1 \u8be5\u9875\u53ef\u6267\u884c\u3002 U , G , A , D , RSW \u672c\u6b21\u5b9e\u9a8c\u4e2d\u8bbe\u7f6e\u4e3a 0 \u5373\u53ef\u3002 \u5177\u4f53\u4ecb\u7ecd\u8bf7\u9605\u8bfb RISC-V Privileged Spec 4.4.1 3.2.4 RISC-V Address Translation \u865a\u62df\u5730\u5740\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\u6d41\u7a0b\u56fe\u5982\u4e0b\uff0c\u5177\u4f53\u63cf\u8ff0\u89c1 RISC-V Privileged Spec 4.3.2 : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 Virtual Address Physical Address 9 9 9 12 55 12 11 0 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 VPN[2] \u2502 VPN[1] \u2502 VPN[0] \u2502 OFFSET \u2502 \u2502 PPN \u2502 OFFSET \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u25b2 \u25b2 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502511 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 511 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 44 10 \u2502 \u2502 \u2502 \u2502 \u2502 511 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u25ba\u2502 PPN \u2502 flags \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 44 10 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u25ba\u2502 PPN \u2502 flags \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 44 10 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u25ba\u2502 PPN \u2502 flags \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25b2 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510 \u2502 0 \u2502 \u2502 \u2502 satp \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 4 \u5b9e\u9a8c\u6b65\u9aa4 4.1 \u51c6\u5907\u5de5\u7a0b \u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab3 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u9700\u8981\u4fee\u6539 defs.h , \u5728 defs.h \u6dfb\u52a0 \u5982\u4e0b\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 #define OPENSBI_SIZE (0x200000) #define VM_START (0xffffffe000000000) #define VM_END (0xffffffff00000000) #define VM_SIZE (VM_END - VM_START) #define PA2VA_OFFSET (VM_START - PHY_START) \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u4ee3\u7801: vmlinux.lds.S , Makefile \u3002\u5e76\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u8fd9\u4e9b\u6587\u4ef6\u6b63\u786e\u653e\u7f6e\u3002 1 2 3 4 5 6 . \u2514\u2500\u2500 arch \u2514\u2500\u2500 riscv \u2514\u2500\u2500 kernel \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 vmlinux.lds.S \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 vmlinux.lds.S \u6a21\u7248\u751f\u6210 vmlinux.lds \u6587\u4ef6\u3002\u94fe\u63a5\u811a\u672c\u4e2d\u7684 ramv \u4ee3\u8868 VMA ( Virtual Memory Address ) \u5373\u865a\u62df\u5730\u5740\uff0c ram \u5219\u4ee3\u8868 LMA ( Load Memory Address ) , \u5373\u6211\u4eec OS image \u88ab load \u7684\u5730\u5740\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7269\u7406\u5730\u5740\u3002\u4f7f\u7528\u4ee5\u4e0a\u7684 vmlinux.lds \u8fdb\u884c\u7f16\u8bd1\u4e4b\u540e\uff0c\u5f97\u5230\u7684 System.map \u4ee5\u53ca vmlinux \u91c7\u7528\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u65b9\u4fbf\u4e4b\u540e Debug\u3002 4.2 \u5f00\u542f\u865a\u62df\u5185\u5b58\u6620\u5c04\u3002 \u5728 RISC-V \u4e2d\u5f00\u542f\u865a\u62df\u5730\u5740\u88ab\u5206\u4e3a\u4e86\u4e24\u6b65\uff1a setup_vm \u4ee5\u53ca setup_vm_final \uff0c\u4e0b\u9762\u5c06\u4ecb\u7ecd\u76f8\u5173\u7684\u5177\u4f53\u5b9e\u73b0\u3002 4.2.1 setup_vm \u7684\u5b9e\u73b0 \u5c06 0x80000000 \u5f00\u59cb\u7684 1GB \u533a\u57df\u8fdb\u884c\u4e24\u6b21\u6620\u5c04\uff0c\u5176\u4e2d\u4e00\u6b21\u662f\u7b49\u503c\u6620\u5c04 ( PA == VA ) \uff0c\u53e6\u4e00\u6b21\u662f\u5c06\u5176\u6620\u5c04\u81f3\u9ad8\u5730\u5740 ( PA + PV2VA_OFFSET == VA )\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Physical Address ------------------------------------------- | OpenSBI | Kernel | ------------------------------------------- ^ 0x80000000 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | Virtual Address \u2193 \u2193 ----------------------------------------------------------------------------------------------- | OpenSBI | Kernel | | OpenSBI | Kernel | ----------------------------------------------------------------------------------------------- ^ ^ 0x80000000 0xffffffe000000000 \u5b8c\u6210\u4e0a\u8ff0\u6620\u5c04\u4e4b\u540e\uff0c\u901a\u8fc7 relocate \u51fd\u6570\uff0c\u5b8c\u6210\u5bf9 satp \u7684\u8bbe\u7f6e\uff0c\u4ee5\u53ca\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u3002 \u81f3\u6b64\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u865a\u62df\u5730\u5740\u7684\u5f00\u542f\uff0c\u4e4b\u540e\u6211\u4eec\u8fd0\u884c\u7684\u4ee3\u7801\u4e5f\u90fd\u5c06\u5728\u865a\u62df\u5730\u5740\u4e0a\u8fd0\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // arch/riscv/kernel/vm.c /* early_pgtbl: \u7528\u4e8e setup_vm \u8fdb\u884c 1GB \u7684 \u6620\u5c04\u3002 */ unsigned long early_pgtbl [ 512 ] __attribute__ (( __aligned__ ( 0x1000 ))); void setup_vm ( void ) { /* 1. \u7531\u4e8e\u662f\u8fdb\u884c 1GB \u7684\u6620\u5c04 \u8fd9\u91cc\u4e0d\u9700\u8981\u4f7f\u7528\u591a\u7ea7\u9875\u8868 2. \u5c06 va \u7684 64bit \u4f5c\u4e3a\u5982\u4e0b\u5212\u5206\uff1a | high bit | 9 bit | 30 bit | high bit \u53ef\u4ee5\u5ffd\u7565 \u4e2d\u95f49 bit \u4f5c\u4e3a early_pgtbl \u7684 index \u4f4e 30 bit \u4f5c\u4e3a \u9875\u5185\u504f\u79fb \u8fd9\u91cc\u6ce8\u610f\u5230 30 = 9 + 9 + 12\uff0c \u5373\u6211\u4eec\u53ea\u4f7f\u7528\u6839\u9875\u8868\uff0c \u6839\u9875\u8868\u7684\u6bcf\u4e2a entry \u90fd\u5bf9\u5e94 1GB \u7684\u533a\u57df\u3002 3. Page Table Entry \u7684\u6743\u9650 V | R | W | X \u4f4d\u8bbe\u7f6e\u4e3a 1 */ } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # head.S _start: call setup_vm call relocate ... j start_kernel relocate: # set ra = ra + PA2VA_OFFSET # set sp = sp + PA2VA_OFFSET (If you have set the sp before) ###################### # YOUR CODE HERE # ###################### # set satp with early_pgtbl ###################### # YOUR CODE HERE # ###################### # flush tlb sfence.vma zero , zero # flush icache fence.i ret .section .bss.stack .globl boot_stack boot_stack: ... Hint 1: sfence.vma \u6307\u4ee4\u7528\u4e8e\u5237\u65b0 TLB Hint 2: fence.i \u6307\u4ee4\u7528\u4e8e\u5237\u65b0 icache Hint 3: \u5728 set satp \u524d\uff0c\u6211\u4eec\u53ea\u53ef\u4ee5\u4f7f\u7528 \u7269\u7406\u5730\u5740 \u6765\u6253\u65ad\u70b9\u3002\u8bbe\u7f6e satp \u4e4b\u540e\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528\u865a\u62df\u5730\u5740\u6253\u65ad\u70b9\uff0c\u540c\u65f6\u4e4b\u524d\u8bbe\u7f6e\u7684\u7269\u7406\u5730\u5740\u65ad\u70b9\u4e5f\u4f1a\u5931\u6548\uff0c\u9700\u8981\u5220\u9664 4.2.2 setup_vm_final \u7684\u5b9e\u73b0 \u7531\u4e8e setup_vm_final \u4e2d\u9700\u8981\u7533\u8bf7\u9875\u9762\u7684\u63a5\u53e3\uff0c \u5e94\u8be5\u5728\u5176\u4e4b\u524d\u5b8c\u6210\u5185\u5b58\u7ba1\u7406\u521d\u59cb\u5316\uff0c \u53ef\u80fd\u9700\u8981\u4fee\u6539 mm.c \u4e2d\u7684\u4ee3\u7801\uff0cmm.c \u4e2d\u521d\u59cb\u5316\u7684\u51fd\u6570\u63a5\u6536\u7684\u8d77\u59cb\u7ed3\u675f\u5730\u5740\u9700\u8981\u8c03\u6574\u4e3a\u865a\u62df\u5730\u5740\u3002 \u5bf9 \u6240\u6709\u7269\u7406\u5185\u5b58 (128M) \u8fdb\u884c\u6620\u5c04\uff0c\u5e76\u8bbe\u7f6e\u6b63\u786e\u7684\u6743\u9650\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Physical Address PHY_START PHY_END \u2193 \u2193 -------------------------------------------------------- | OpenSBI | Kernel | | -------------------------------------------------------- ^ ^ 0x80000000 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | | VM_START | Virtual Address \u2193 \u2193 ---------------------------------------------------------------------------------------------------- | OpenSBI | Kernel | | ----------------------------------------------------------------------------------------------------- ^ 0xffffffe000000000 \u4e0d\u518d\u9700\u8981\u8fdb\u884c\u7b49\u503c\u6620\u5c04 \u4e0d\u518d\u9700\u8981\u5c06 OpenSBI \u7684\u6620\u5c04\u81f3\u9ad8\u5730\u5740\uff0c\u56e0\u4e3a OpenSBI \u8fd0\u884c\u5728 M \u6001\uff0c \u76f4\u63a5\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740\u3002 \u91c7\u7528\u4e09\u7ea7\u9875\u8868\u6620\u5c04\u3002 \u5728 head.S \u4e2d \u9002\u5f53\u7684\u4f4d\u7f6e\u8c03\u7528 setup_vm_final \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // arch/riscv/kernel/vm.c /* swapper_pg_dir: kernel pagetable \u6839\u76ee\u5f55\uff0c \u5728 setup_vm_final \u8fdb\u884c\u6620\u5c04\u3002 */ unsigned long swapper_pg_dir [ 512 ] __attribute__ (( __aligned__ ( 0x1000 ))); void setup_vm_final ( void ) { memset ( swapper_pg_dir , 0x0 , PGSIZE ); // No OpenSBI mapping required // mapping kernel text X|-|R|V create_mapping (...); // mapping kernel rodata -|-|R|V create_mapping (...); // mapping other memory -|W|R|V create_mapping (...); // set satp with swapper_pg_dir YOUR CODE HERE // flush TLB asm volatile ( \"sfence.vma zero, zero\" ); // flush icache asm volatile ( \"fence.i\" ) return ; } /* \u521b\u5efa\u591a\u7ea7\u9875\u8868\u6620\u5c04\u5173\u7cfb */ create_mapping ( uint64 * pgtbl , uint64 va , uint64 pa , uint64 sz , int perm ) { /* pgtbl \u4e3a\u6839\u9875\u8868\u7684\u57fa\u5730\u5740 va, pa \u4e3a\u9700\u8981\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\u3001\u7269\u7406\u5730\u5740 sz \u4e3a\u6620\u5c04\u7684\u5927\u5c0f perm \u4e3a\u6620\u5c04\u7684\u8bfb\u5199\u6743\u9650 \u521b\u5efa\u591a\u7ea7\u9875\u8868\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 kalloc() \u6765\u83b7\u53d6\u4e00\u9875\u4f5c\u4e3a\u9875\u8868\u76ee\u5f55 \u53ef\u4ee5\u4f7f\u7528 V bit \u6765\u5224\u65ad\u9875\u8868\u9879\u662f\u5426\u5b58\u5728 */ } 4.3 \u7f16\u8bd1\u53ca\u6d4b\u8bd5 \u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6\uff0c\u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539\uff0c\u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u8f93\u51fa\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____ | _ \\_ _ | | | | | _ __ ___ _ __ | ( ___ | | _ ) || | | | | | '_ \\ / _ \\ ' _ \\ \\_ __ \\| _ < | | | | __ | | | _ ) | __/ | | | ____ ) | | _ ) || | _ \\_ ___/ | .__/ \\_ __ | _ | | _ | _____/ | ____/_____ | | | | _ | ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done ! ...proc_init done ! Hello RISC-V idle process is running! switch to [ PID = 28 COUNTER = 1 ] [ PID = 28 ] is running! thread space begin at 0xffffffe007fa2000 switch to [ PID = 12 COUNTER = 1 ] [ PID = 12 ] is running! thread space begin at 0xffffffe007fb2000 switch to [ PID = 14 COUNTER = 2 ] [ PID = 14 ] is running! thread space begin at 0xffffffe007fb0000 [ PID = 14 ] is running! thread space begin at 0xffffffe007fb0000 switch to [ PID = 9 COUNTER = 2 ] [ PID = 9 ] is running! thread space begin at 0xffffffe007fb5000 [ PID = 9 ] is running! thread space begin at 0xffffffe007fb5000 switch to [ PID = 2 COUNTER = 2 ] [ PID = 2 ] is running! thread space begin at 0xffffffe007fbc000 [ PID = 2 ] is running! thread space begin at 0xffffffe007fbc000 switch to [ PID = 1 COUNTER = 2 ] [ PID = 1 ] is running! thread space begin at 0xffffffe007fbd000 [ PID = 1 ] is running! thread space begin at 0xffffffe007fbd000 switch to [ PID = 29 COUNTER = 3 ] [ PID = 29 ] is running! thread space begin at 0xffffffe007fa1000 [ PID = 29 ] is running! thread space begin at 0xffffffe007fa1000 [ PID = 29 ] is running! thread space begin at 0xffffffe007fa1000 switch to [ PID = 11 COUNTER = 3 ] [ PID = 11 ] is running! thread space begin at 0xffffffe007fb3000 ... \u601d\u8003\u9898 \u9a8c\u8bc1 .text , .rodata \u6bb5\u7684\u5c5e\u6027\u662f\u5426\u6210\u529f\u8bbe\u7f6e\uff0c\u7ed9\u51fa\u622a\u56fe\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u5728 setup_vm \u4e2d\u9700\u8981\u505a\u7b49\u503c\u6620\u5c04? \u5728 Linux \u4e2d\uff0c\u662f\u4e0d\u9700\u8981\u505a\u7b49\u503c\u6620\u5c04\u7684\u3002\u8bf7\u63a2\u7d22\u4e00\u4e0b\u4e0d\u5728 setup_vm \u4e2d\u505a\u7b49\u503c\u6620\u5c04\u7684\u65b9\u6cd5\u3002 \u4f5c\u4e1a\u63d0\u4ea4 \u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\uff0c\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u5b9e\u9a8c\u6307\u5bfc\u56db"},{"location":"lab4/#lab-4-rv64","text":"","title":"Lab 4: RV64 \u865a\u62df\u5185\u5b58\u7ba1\u7406"},{"location":"lab4/#1","text":"\u5b66\u4e60\u865a\u62df\u5185\u5b58\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u5b9e\u73b0\u7269\u7406\u5730\u5740\u5230\u865a\u62df\u5730\u5740\u7684\u5207\u6362\u3002 \u4e86\u89e3 RISC-V \u67b6\u6784\u4e2d SV39 \u5206\u9875\u6a21\u5f0f\uff0c\u5b9e\u73b0\u865a\u62df\u5730\u5740\u5230\u7269\u7406\u5730\u5740\u7684\u6620\u5c04\uff0c\u5e76\u5bf9\u4e0d\u540c\u7684\u6bb5\u8fdb\u884c\u76f8\u5e94\u7684\u6743\u9650\u8bbe\u7f6e\u3002","title":"1 \u5b9e\u9a8c\u76ee\u7684"},{"location":"lab4/#2","text":"Environment in previous labs","title":"2 \u5b9e\u9a8c\u73af\u5883"},{"location":"lab4/#3","text":"","title":"3 \u80cc\u666f\u77e5\u8bc6"},{"location":"lab4/#30","text":"\u5728 lab3 \u4e2d\u6211\u4eec\u8d4b\u4e88\u4e86 OS \u5bf9\u591a\u4e2a\u7ebf\u7a0b\u8c03\u5ea6\u4ee5\u53ca\u5e76\u53d1\u6267\u884c\u7684\u80fd\u529b\uff0c\u7531\u4e8e\u76ee\u524d\u8fd9\u4e9b\u7ebf\u7a0b\u90fd\u662f\u5185\u6838\u7ebf\u7a0b\uff0c\u56e0\u6b64\u4ed6\u4eec\u53ef\u4ee5\u5171\u4eab\u8fd0\u884c\u7a7a\u95f4\uff0c\u5373\u8fd0\u884c\u4e0d\u540c\u7ebf\u7a0b\u5bf9\u7a7a\u95f4\u7684\u4fee\u6539\u662f\u76f8\u4e92\u53ef\u89c1\u7684\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u9700\u8981\u7ebf\u7a0b\u76f8\u4e92 \u9694\u79bb \uff0c\u4ee5\u53ca\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u66f4\u52a0 \u9ad8\u6548 \u7684\u4f7f\u7528\u5185\u5b58\uff0c\u5c31\u5fc5\u987b\u5f15\u5165 \u865a\u62df\u5185\u5b58 \u8fd9\u4e2a\u6982\u5ff5\u3002 \u865a\u62df\u5185\u5b58\u53ef\u4ee5\u4e3a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u63d0\u4f9b\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5236\u9020\u4e00\u79cd\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u90fd\u662f\u72ec\u7acb\u7684\u5047\u8c61\u3002\u540c\u65f6\u865a\u62df\u5185\u5b58\u5230\u7269\u7406\u5185\u5b58\u7684\u6620\u5c04\u4e5f\u5305\u542b\u4e86\u5bf9\u5185\u5b58\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u65b9\u4fbf Kernel \u5b8c\u6210\u6743\u9650\u68c0\u67e5\u3002 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5173\u6ce8 OS \u5982\u4f55 \u5f00\u542f\u865a\u62df\u5730\u5740 \u4ee5\u53ca\u901a\u8fc7\u8bbe\u7f6e\u9875\u8868\u6765\u5b9e\u73b0 \u5730\u5740\u6620\u5c04 \u548c \u6743\u9650\u63a7\u5236 \u3002","title":"3.0 \u524d\u8a00"},{"location":"lab4/#31-kernel","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 start_address end_address 0x0 0x3fffffffff \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2518 \u250c\u2500\u2500\u2500\u2500\u2500\u2518 \u2193 256G \u2193 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 User Space \u2502 ... \u2502 Kernel Space \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2191 256G \u2191 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 0xffffffc000000000 0xffffffffffffffff start_address end_address \u901a\u8fc7\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u770b\u5230 RV64 \u5c06 0x0000004000000000 \u4ee5\u4e0b\u7684\u865a\u62df\u7a7a\u95f4\u4f5c\u4e3a user space \u3002\u5c06 0xffffffc000000000 \u53ca\u4ee5\u4e0a\u7684\u865a\u62df\u7a7a\u95f4\u4f5c\u4e3a kernel space \u3002\u7531\u4e8e\u6211\u4eec\u8fd8\u672a\u5f15\u5165\u7528\u6237\u6001\u7a0b\u5e8f\uff0c\u76ee\u524d\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 kernel space \u3002 \u5177\u4f53\u7684\u865a\u62df\u5185\u5b58\u5e03\u5c40\u53ef\u4ee5 \u53c2\u8003\u8fd9\u91cc \u3002 \u5728 RISC-V Linux Kernel Space \u4e2d\u6709\u4e00\u6bb5\u533a\u57df\u88ab\u79f0\u4e3a direct mapping area \uff0c\u4e3a\u4e86\u65b9\u4fbf kernel \u53ef\u4ee5\u9ad8\u6548\u7387\u7684\u8bbf\u95ee RAM\uff0ckernel \u4f1a\u9884\u5148\u628a\u6240\u6709\u7269\u7406\u5185\u5b58\u90fd\u6620\u5c04\u81f3\u8fd9\u4e00\u5757\u533a\u57df ( PA + OFFSET == VA )\uff0c \u8fd9\u79cd\u6620\u5c04\u4e5f\u88ab\u79f0\u4e3a linear mapping \u3002\u5728 RISC-V Linux Kernel \u4e2d\u8fd9\u4e00\u6bb5\u533a\u57df\u4e3a 0xffffffe000000000 ~ 0xffffffff00000000 , \u5171 124 GB \u3002","title":"3.1 Kernel \u7684\u865a\u62df\u5185\u5b58\u5e03\u5c40"},{"location":"lab4/#32-risc-v-virtual-memory-system-sv39","text":"","title":"3.2 RISC-V Virtual-Memory System (Sv39)"},{"location":"lab4/#321-satp-registersupervisor-address-translation-and-protection-register","text":"1 2 3 4 63 60 59 44 43 0 --------------------------------------------------------------------- | MODE | ASID | PPN | --------------------------------------------------------------------- MODE \u5b57\u6bb5\u7684\u53d6\u503c\u5982\u4e0b\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 RV 64 ---------------------------------------------------------- | Value | Name | Description | |----------------------------------------------------------| | 0 | Bare | No translation or protection | | 1 - 7 | --- | Reserved for standard use | | 8 | Sv39 | Page - based 39 bit virtual addressing | <-- \u6211\u4eec\u4f7f\u7528\u7684mode | 9 | Sv48 | Page - based 48 bit virtual addressing | | 10 | Sv57 | Page - based 57 bit virtual addressing | | 11 | Sv64 | Page - based 64 bit virtual addressing | | 12 - 13 | --- | Reserved for standard use | | 14 - 15 | --- | Reserved for standard use | ----------------------------------------------------------- ASID ( Address Space Identifier ) \uff1a \u6b64\u6b21\u5b9e\u9a8c\u4e2d\u76f4\u63a5\u7f6e 0 \u5373\u53ef\u3002 PPN ( Physical Page Number ) \uff1a\u9876\u7ea7\u9875\u8868\u7684\u7269\u7406\u9875\u53f7\u3002\u6211\u4eec\u7684\u7269\u7406\u9875\u7684\u5927\u5c0f\u4e3a 4KB\uff0c PA >> 12 == PPN\u3002 \u5177\u4f53\u4ecb\u7ecd\u8bf7\u9605\u8bfb RISC-V Privileged Spec 4.1.10 \u3002","title":"3.2.1 satp Register\uff08Supervisor Address Translation and Protection Register\uff09"},{"location":"lab4/#322-risc-v-sv39-virtual-address-and-physical-address","text":"1 2 3 4 5 38 30 29 21 20 12 11 0 --------------------------------------------------------------------- | VPN [ 2 ] | VPN [ 1 ] | VPN [ 0 ] | page offset | --------------------------------------------------------------------- Sv39 virtual address 1 2 3 4 5 55 30 29 21 20 12 11 0 ----------------------------------------------------------------------------- | PPN [ 2 ] | PPN [ 1 ] | PPN [ 0 ] | page offset | ----------------------------------------------------------------------------- Sv39 physical address * Sv39 \u6a21\u5f0f\u5b9a\u4e49\u7269\u7406\u5730\u5740\u6709 56 \u4f4d\uff0c\u865a\u62df\u5730\u5740\u6709 64 \u4f4d\u3002\u4f46\u662f\uff0c\u865a\u62df\u5730\u5740\u7684 64 \u4f4d\u53ea\u6709\u4f4e 39 \u4f4d\u6709\u6548\u3002\u901a\u8fc7\u865a\u62df\u5185\u5b58\u5e03\u5c40\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176 63-39 \u4f4d\u4e3a 0 \u65f6\u4ee3\u8868 user space address\uff0c \u4e3a 1 \u65f6 \u4ee3\u8868 kernel space address\u3002 * Sv39 \u652f\u6301\u4e09\u7ea7\u9875\u8868\u7ed3\u6784\uff0cVPN 2-0 \u5206\u522b\u4ee3\u8868\u6bcf\u7ea7\u9875\u8868\u7684 \u865a\u62df\u9875\u53f7 \uff0cPPN 2-0 \u5206\u522b\u4ee3\u8868\u6bcf\u7ea7\u9875\u8868\u7684 \u7269\u7406\u9875\u53f7 \u3002\u7269\u7406\u5730\u5740\u548c\u865a\u62df\u5730\u5740\u7684\u4f4e12\u4f4d\u8868\u793a\u9875\u5185\u504f\u79fb\uff08page offset\uff09\u3002 * \u5177\u4f53\u4ecb\u7ecd\u8bf7\u9605\u8bfb RISC-V Privileged Spec 4.4.1 \u3002","title":"3.2.2 RISC-V Sv39 Virtual Address and Physical Address"},{"location":"lab4/#323-risc-v-sv39-page-table-entry","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 63 54 53 28 27 19 18 10 9 8 7 6 5 4 3 2 1 0 ----------------------------------------------------------------------- | Reserved | PPN [ 2 ] | PPN [ 1 ] | PPN [ 0 ] | RSW | D | A | G | U | X | W | R | V | ----------------------------------------------------------------------- | | | | | | | | | | | | | | | | | ` ---- V - Valid | | | | | | | ` ------ R - Readable | | | | | | ` -------- W - Writable | | | | | ` ---------- X - Executable | | | | ` ------------ U - User | | | ` -------------- G - Global | | ` ---------------- A - Accessed | ` ------------------ D - Dirty ( 0 in page directory ) ` ---------------------- Reserved for supervisor software 0 \uff5e 9 bit: protection bits V : \u6709\u6548\u4f4d\uff0c\u5f53 V = 0, \u8bbf\u95ee\u8be5 PTE \u4f1a\u4ea7\u751f Pagefault\u3002 R : R = 1 \u8be5\u9875\u53ef\u8bfb\u3002 W : W = 1 \u8be5\u9875\u53ef\u5199\u3002 X : X = 1 \u8be5\u9875\u53ef\u6267\u884c\u3002 U , G , A , D , RSW \u672c\u6b21\u5b9e\u9a8c\u4e2d\u8bbe\u7f6e\u4e3a 0 \u5373\u53ef\u3002 \u5177\u4f53\u4ecb\u7ecd\u8bf7\u9605\u8bfb RISC-V Privileged Spec 4.4.1","title":"3.2.3 RISC-V Sv39 Page Table Entry"},{"location":"lab4/#324-risc-v-address-translation","text":"\u865a\u62df\u5730\u5740\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\u6d41\u7a0b\u56fe\u5982\u4e0b\uff0c\u5177\u4f53\u63cf\u8ff0\u89c1 RISC-V Privileged Spec 4.3.2 : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 Virtual Address Physical Address 9 9 9 12 55 12 11 0 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 VPN[2] \u2502 VPN[1] \u2502 VPN[0] \u2502 OFFSET \u2502 \u2502 PPN \u2502 OFFSET \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u25b2 \u25b2 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502511 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 511 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 44 10 \u2502 \u2502 \u2502 \u2502 \u2502 511 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u25ba\u2502 PPN \u2502 flags \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 44 10 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u25ba\u2502 PPN \u2502 flags \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 44 10 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u25ba\u2502 PPN \u2502 flags \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25b2 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 0 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2514\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510 \u2502 0 \u2502 \u2502 \u2502 satp \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"3.2.4 RISC-V Address Translation"},{"location":"lab4/#4","text":"","title":"4 \u5b9e\u9a8c\u6b65\u9aa4"},{"location":"lab4/#41","text":"\u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab3 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u9700\u8981\u4fee\u6539 defs.h , \u5728 defs.h \u6dfb\u52a0 \u5982\u4e0b\u5185\u5bb9\uff1a 1 2 3 4 5 6 7 #define OPENSBI_SIZE (0x200000) #define VM_START (0xffffffe000000000) #define VM_END (0xffffffff00000000) #define VM_SIZE (VM_END - VM_START) #define PA2VA_OFFSET (VM_START - PHY_START) \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u4ee3\u7801: vmlinux.lds.S , Makefile \u3002\u5e76\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5c06\u8fd9\u4e9b\u6587\u4ef6\u6b63\u786e\u653e\u7f6e\u3002 1 2 3 4 5 6 . \u2514\u2500\u2500 arch \u2514\u2500\u2500 riscv \u2514\u2500\u2500 kernel \u251c\u2500\u2500 Makefile \u2514\u2500\u2500 vmlinux.lds.S \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7 vmlinux.lds.S \u6a21\u7248\u751f\u6210 vmlinux.lds \u6587\u4ef6\u3002\u94fe\u63a5\u811a\u672c\u4e2d\u7684 ramv \u4ee3\u8868 VMA ( Virtual Memory Address ) \u5373\u865a\u62df\u5730\u5740\uff0c ram \u5219\u4ee3\u8868 LMA ( Load Memory Address ) , \u5373\u6211\u4eec OS image \u88ab load \u7684\u5730\u5740\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u7269\u7406\u5730\u5740\u3002\u4f7f\u7528\u4ee5\u4e0a\u7684 vmlinux.lds \u8fdb\u884c\u7f16\u8bd1\u4e4b\u540e\uff0c\u5f97\u5230\u7684 System.map \u4ee5\u53ca vmlinux \u91c7\u7528\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u65b9\u4fbf\u4e4b\u540e Debug\u3002","title":"4.1 \u51c6\u5907\u5de5\u7a0b"},{"location":"lab4/#42","text":"\u5728 RISC-V \u4e2d\u5f00\u542f\u865a\u62df\u5730\u5740\u88ab\u5206\u4e3a\u4e86\u4e24\u6b65\uff1a setup_vm \u4ee5\u53ca setup_vm_final \uff0c\u4e0b\u9762\u5c06\u4ecb\u7ecd\u76f8\u5173\u7684\u5177\u4f53\u5b9e\u73b0\u3002","title":"4.2 \u5f00\u542f\u865a\u62df\u5185\u5b58\u6620\u5c04\u3002"},{"location":"lab4/#421-setup_vm","text":"\u5c06 0x80000000 \u5f00\u59cb\u7684 1GB \u533a\u57df\u8fdb\u884c\u4e24\u6b21\u6620\u5c04\uff0c\u5176\u4e2d\u4e00\u6b21\u662f\u7b49\u503c\u6620\u5c04 ( PA == VA ) \uff0c\u53e6\u4e00\u6b21\u662f\u5c06\u5176\u6620\u5c04\u81f3\u9ad8\u5730\u5740 ( PA + PV2VA_OFFSET == VA )\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Physical Address ------------------------------------------- | OpenSBI | Kernel | ------------------------------------------- ^ 0x80000000 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | Virtual Address \u2193 \u2193 ----------------------------------------------------------------------------------------------- | OpenSBI | Kernel | | OpenSBI | Kernel | ----------------------------------------------------------------------------------------------- ^ ^ 0x80000000 0xffffffe000000000 \u5b8c\u6210\u4e0a\u8ff0\u6620\u5c04\u4e4b\u540e\uff0c\u901a\u8fc7 relocate \u51fd\u6570\uff0c\u5b8c\u6210\u5bf9 satp \u7684\u8bbe\u7f6e\uff0c\u4ee5\u53ca\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u3002 \u81f3\u6b64\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u865a\u62df\u5730\u5740\u7684\u5f00\u542f\uff0c\u4e4b\u540e\u6211\u4eec\u8fd0\u884c\u7684\u4ee3\u7801\u4e5f\u90fd\u5c06\u5728\u865a\u62df\u5730\u5740\u4e0a\u8fd0\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // arch/riscv/kernel/vm.c /* early_pgtbl: \u7528\u4e8e setup_vm \u8fdb\u884c 1GB \u7684 \u6620\u5c04\u3002 */ unsigned long early_pgtbl [ 512 ] __attribute__ (( __aligned__ ( 0x1000 ))); void setup_vm ( void ) { /* 1. \u7531\u4e8e\u662f\u8fdb\u884c 1GB \u7684\u6620\u5c04 \u8fd9\u91cc\u4e0d\u9700\u8981\u4f7f\u7528\u591a\u7ea7\u9875\u8868 2. \u5c06 va \u7684 64bit \u4f5c\u4e3a\u5982\u4e0b\u5212\u5206\uff1a | high bit | 9 bit | 30 bit | high bit \u53ef\u4ee5\u5ffd\u7565 \u4e2d\u95f49 bit \u4f5c\u4e3a early_pgtbl \u7684 index \u4f4e 30 bit \u4f5c\u4e3a \u9875\u5185\u504f\u79fb \u8fd9\u91cc\u6ce8\u610f\u5230 30 = 9 + 9 + 12\uff0c \u5373\u6211\u4eec\u53ea\u4f7f\u7528\u6839\u9875\u8868\uff0c \u6839\u9875\u8868\u7684\u6bcf\u4e2a entry \u90fd\u5bf9\u5e94 1GB \u7684\u533a\u57df\u3002 3. Page Table Entry \u7684\u6743\u9650 V | R | W | X \u4f4d\u8bbe\u7f6e\u4e3a 1 */ } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # head.S _start: call setup_vm call relocate ... j start_kernel relocate: # set ra = ra + PA2VA_OFFSET # set sp = sp + PA2VA_OFFSET (If you have set the sp before) ###################### # YOUR CODE HERE # ###################### # set satp with early_pgtbl ###################### # YOUR CODE HERE # ###################### # flush tlb sfence.vma zero , zero # flush icache fence.i ret .section .bss.stack .globl boot_stack boot_stack: ... Hint 1: sfence.vma \u6307\u4ee4\u7528\u4e8e\u5237\u65b0 TLB Hint 2: fence.i \u6307\u4ee4\u7528\u4e8e\u5237\u65b0 icache Hint 3: \u5728 set satp \u524d\uff0c\u6211\u4eec\u53ea\u53ef\u4ee5\u4f7f\u7528 \u7269\u7406\u5730\u5740 \u6765\u6253\u65ad\u70b9\u3002\u8bbe\u7f6e satp \u4e4b\u540e\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528\u865a\u62df\u5730\u5740\u6253\u65ad\u70b9\uff0c\u540c\u65f6\u4e4b\u524d\u8bbe\u7f6e\u7684\u7269\u7406\u5730\u5740\u65ad\u70b9\u4e5f\u4f1a\u5931\u6548\uff0c\u9700\u8981\u5220\u9664","title":"4.2.1 setup_vm \u7684\u5b9e\u73b0"},{"location":"lab4/#422-setup_vm_final","text":"\u7531\u4e8e setup_vm_final \u4e2d\u9700\u8981\u7533\u8bf7\u9875\u9762\u7684\u63a5\u53e3\uff0c \u5e94\u8be5\u5728\u5176\u4e4b\u524d\u5b8c\u6210\u5185\u5b58\u7ba1\u7406\u521d\u59cb\u5316\uff0c \u53ef\u80fd\u9700\u8981\u4fee\u6539 mm.c \u4e2d\u7684\u4ee3\u7801\uff0cmm.c \u4e2d\u521d\u59cb\u5316\u7684\u51fd\u6570\u63a5\u6536\u7684\u8d77\u59cb\u7ed3\u675f\u5730\u5740\u9700\u8981\u8c03\u6574\u4e3a\u865a\u62df\u5730\u5740\u3002 \u5bf9 \u6240\u6709\u7269\u7406\u5185\u5b58 (128M) \u8fdb\u884c\u6620\u5c04\uff0c\u5e76\u8bbe\u7f6e\u6b63\u786e\u7684\u6743\u9650\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Physical Address PHY_START PHY_END \u2193 \u2193 -------------------------------------------------------- | OpenSBI | Kernel | | -------------------------------------------------------- ^ ^ 0x80000000 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 | | | VM_START | Virtual Address \u2193 \u2193 ---------------------------------------------------------------------------------------------------- | OpenSBI | Kernel | | ----------------------------------------------------------------------------------------------------- ^ 0xffffffe000000000 \u4e0d\u518d\u9700\u8981\u8fdb\u884c\u7b49\u503c\u6620\u5c04 \u4e0d\u518d\u9700\u8981\u5c06 OpenSBI \u7684\u6620\u5c04\u81f3\u9ad8\u5730\u5740\uff0c\u56e0\u4e3a OpenSBI \u8fd0\u884c\u5728 M \u6001\uff0c \u76f4\u63a5\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740\u3002 \u91c7\u7528\u4e09\u7ea7\u9875\u8868\u6620\u5c04\u3002 \u5728 head.S \u4e2d \u9002\u5f53\u7684\u4f4d\u7f6e\u8c03\u7528 setup_vm_final \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // arch/riscv/kernel/vm.c /* swapper_pg_dir: kernel pagetable \u6839\u76ee\u5f55\uff0c \u5728 setup_vm_final \u8fdb\u884c\u6620\u5c04\u3002 */ unsigned long swapper_pg_dir [ 512 ] __attribute__ (( __aligned__ ( 0x1000 ))); void setup_vm_final ( void ) { memset ( swapper_pg_dir , 0x0 , PGSIZE ); // No OpenSBI mapping required // mapping kernel text X|-|R|V create_mapping (...); // mapping kernel rodata -|-|R|V create_mapping (...); // mapping other memory -|W|R|V create_mapping (...); // set satp with swapper_pg_dir YOUR CODE HERE // flush TLB asm volatile ( \"sfence.vma zero, zero\" ); // flush icache asm volatile ( \"fence.i\" ) return ; } /* \u521b\u5efa\u591a\u7ea7\u9875\u8868\u6620\u5c04\u5173\u7cfb */ create_mapping ( uint64 * pgtbl , uint64 va , uint64 pa , uint64 sz , int perm ) { /* pgtbl \u4e3a\u6839\u9875\u8868\u7684\u57fa\u5730\u5740 va, pa \u4e3a\u9700\u8981\u6620\u5c04\u7684\u865a\u62df\u5730\u5740\u3001\u7269\u7406\u5730\u5740 sz \u4e3a\u6620\u5c04\u7684\u5927\u5c0f perm \u4e3a\u6620\u5c04\u7684\u8bfb\u5199\u6743\u9650 \u521b\u5efa\u591a\u7ea7\u9875\u8868\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 kalloc() \u6765\u83b7\u53d6\u4e00\u9875\u4f5c\u4e3a\u9875\u8868\u76ee\u5f55 \u53ef\u4ee5\u4f7f\u7528 V bit \u6765\u5224\u65ad\u9875\u8868\u9879\u662f\u5426\u5b58\u5728 */ }","title":"4.2.2 setup_vm_final \u7684\u5b9e\u73b0"},{"location":"lab4/#43","text":"\u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6\uff0c\u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539\uff0c\u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u8f93\u51fa\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____ | _ \\_ _ | | | | | _ __ ___ _ __ | ( ___ | | _ ) || | | | | | '_ \\ / _ \\ ' _ \\ \\_ __ \\| _ < | | | | __ | | | _ ) | __/ | | | ____ ) | | _ ) || | _ \\_ ___/ | .__/ \\_ __ | _ | | _ | _____/ | ____/_____ | | | | _ | ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done ! ...proc_init done ! Hello RISC-V idle process is running! switch to [ PID = 28 COUNTER = 1 ] [ PID = 28 ] is running! thread space begin at 0xffffffe007fa2000 switch to [ PID = 12 COUNTER = 1 ] [ PID = 12 ] is running! thread space begin at 0xffffffe007fb2000 switch to [ PID = 14 COUNTER = 2 ] [ PID = 14 ] is running! thread space begin at 0xffffffe007fb0000 [ PID = 14 ] is running! thread space begin at 0xffffffe007fb0000 switch to [ PID = 9 COUNTER = 2 ] [ PID = 9 ] is running! thread space begin at 0xffffffe007fb5000 [ PID = 9 ] is running! thread space begin at 0xffffffe007fb5000 switch to [ PID = 2 COUNTER = 2 ] [ PID = 2 ] is running! thread space begin at 0xffffffe007fbc000 [ PID = 2 ] is running! thread space begin at 0xffffffe007fbc000 switch to [ PID = 1 COUNTER = 2 ] [ PID = 1 ] is running! thread space begin at 0xffffffe007fbd000 [ PID = 1 ] is running! thread space begin at 0xffffffe007fbd000 switch to [ PID = 29 COUNTER = 3 ] [ PID = 29 ] is running! thread space begin at 0xffffffe007fa1000 [ PID = 29 ] is running! thread space begin at 0xffffffe007fa1000 [ PID = 29 ] is running! thread space begin at 0xffffffe007fa1000 switch to [ PID = 11 COUNTER = 3 ] [ PID = 11 ] is running! thread space begin at 0xffffffe007fb3000 ...","title":"4.3 \u7f16\u8bd1\u53ca\u6d4b\u8bd5"},{"location":"lab4/#_1","text":"\u9a8c\u8bc1 .text , .rodata \u6bb5\u7684\u5c5e\u6027\u662f\u5426\u6210\u529f\u8bbe\u7f6e\uff0c\u7ed9\u51fa\u622a\u56fe\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u5728 setup_vm \u4e2d\u9700\u8981\u505a\u7b49\u503c\u6620\u5c04? \u5728 Linux \u4e2d\uff0c\u662f\u4e0d\u9700\u8981\u505a\u7b49\u503c\u6620\u5c04\u7684\u3002\u8bf7\u63a2\u7d22\u4e00\u4e0b\u4e0d\u5728 setup_vm \u4e2d\u505a\u7b49\u503c\u6620\u5c04\u7684\u65b9\u6cd5\u3002","title":"\u601d\u8003\u9898"},{"location":"lab4/#_2","text":"\u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\uff0c\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u4f5c\u4e1a\u63d0\u4ea4"},{"location":"lab5/","text":"Lab 5: RV64 \u7528\u6237\u6001\u7a0b\u5e8f 1 \u5b9e\u9a8c\u76ee\u7684 \u521b\u5efa\u7528\u6237\u6001\u8fdb\u7a0b\uff0c\u5e76\u8bbe\u7f6e sstatus \u6765\u5b8c\u6210\u5185\u6838\u6001\u8f6c\u6362\u81f3\u7528\u6237\u6001\u3002 \u6b63\u786e\u8bbe\u7f6e\u7528\u6237\u8fdb\u7a0b\u7684 \u7528\u6237\u6001\u6808 \u548c \u5185\u6838\u6001\u6808 \uff0c \u5e76\u5728\u5f02\u5e38\u5904\u7406\u65f6\u6b63\u786e\u5207\u6362\u3002 \u8865\u5145\u5f02\u5e38\u5904\u7406\u903b\u8f91\uff0c\u5b8c\u6210\u6307\u5b9a\u7684\u7cfb\u7edf\u8c03\u7528\uff08 SYS_WRITE, SYS_GETPID \uff09\u529f\u80fd\u3002 2 \u5b9e\u9a8c\u73af\u5883 Docker in Lab0 3 \u80cc\u666f\u77e5\u8bc6 3.0 \u524d\u8a00 \u5728 lab4 \u4e2d\uff0c\u6211\u4eec\u5f00\u542f\u865a\u62df\u5185\u5b58\uff0c\u8fd9\u4e3a\u8fdb\u7a0b\u95f4\u5730\u5740\u7a7a\u95f4\u76f8\u4e92\u9694\u79bb\u6253\u4e0b\u4e86\u57fa\u7840\u3002\u4e4b\u524d\u7684\u5b9e\u9a8c\u4e2d\u6211\u4eec\u53ea\u521b\u5efa\u4e86\u5185\u6838\u7ebf\u7a0b\uff0c\u4ed6\u4eec\u5171\u7528\u4e86\u5730\u5740\u7a7a\u95f4 \uff08\u5171\u7528\u4e00\u4e2a \u5185\u6838\u9875\u8868 swapper_pg_dir \uff09\u3002\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u6211\u4eec\u5c06\u5f15\u5165\u7528\u6237\u6001\u8fdb\u7a0b\u3002\u5f53\u542f\u52a8\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5185\u6838\u5c06\u4e3a\u8be5\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e13\u7528\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7b49\u8d44\u6e90\u3002\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u66f4\u6539\u5c5e\u4e8e\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u72ec\u7acb\u8fd0\u884c\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u540c\u65f6\uff0c\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e5f\u53d7\u5230\u9650\u5236\uff0c\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u65e0\u6cd5\u8bbf\u95ee\u5185\u6838\u7684\u865a\u62df\u5730\u5740\uff0c\u9632\u6b62\u5e94\u7528\u7a0b\u5e8f\u4fee\u6539\u5173\u952e\u64cd\u4f5c\u7cfb\u7edf\u6570\u636e\u3002\u5f53\u7528\u6237\u6001\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u5173\u952e\u8d44\u6e90\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7528\u6237\u6001\u7a0b\u5e8f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u7684\u4e92\u52a8\u3002 3.1 User \u6a21\u5f0f\u57fa\u7840\u4ecb\u7ecd \u5904\u7406\u5668\u5177\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff1a\u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f\u3002\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\uff0c\u6267\u884c\u4ee3\u7801\u5bf9\u5e95\u5c42\u786c\u4ef6\u5177\u6709\u5b8c\u6574\u4e14\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u4efb\u4f55 CPU \u6307\u4ee4\u5e76\u5f15\u7528\u4efb\u4f55\u5185\u5b58\u5730\u5740\u3002\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\uff0c\u6267\u884c\u4ee3\u7801\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u786c\u4ef6\uff0c\u5fc5\u987b\u59d4\u6258\u7ed9\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u624d\u80fd\u8bbf\u95ee\u786c\u4ef6\u6216\u5185\u5b58\u3002\u5904\u7406\u5668\u6839\u636e\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u7c7b\u578b\u5728\u4e24\u79cd\u6a21\u5f0f\u4e4b\u95f4\u5207\u6362\u3002\u5e94\u7528\u7a0b\u5e8f\u4ee5\u7528\u6237\u6a21\u5f0f\u8fd0\u884c\uff0c\u800c\u6838\u5fc3\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u4ef6\u4ee5\u5185\u6838\u6a21\u5f0f\u8fd0\u884c\u3002 3.2 \u7cfb\u7edf\u8c03\u7528\u7ea6\u5b9a \u7cfb\u7edf\u8c03\u7528\u662f\u7528\u6237\u6001\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u5185\u6838\u670d\u52a1\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u5728 RISC-V \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 ecall \u6307\u4ee4\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002\u5f53\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6\u5904\u7406\u5668\u4f1a\u63d0\u5347\u7279\u6743\u6a21\u5f0f\uff0c\u8df3\u8f6c\u5230\u5f02\u5e38\u5904\u7406\u51fd\u6570\u5904\u7406\u8fd9\u6761\u7cfb\u7edf\u8c03\u7528\u3002 Linux \u4e2d RISC-V \u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u5728 include/uapi/asm-generic/unistd.h \u4e2d\u627e\u5230\uff0c syscall(2) \u624b\u518c\u9875\u4e0a\u5bf9RISC-V\u67b6\u6784\u4e0a\u7684\u8c03\u7528\u8bf4\u660e\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u4f7f\u7528 a0 - a5 \uff0c\u7cfb\u7edf\u8c03\u7528\u53f7\u4f7f\u7528 a7 \uff0c \u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\u4f1a\u88ab\u4fdd\u5b58\u5230 a0, a1 \u4e2d\u3002 3.3 sstatus[SUM] PTE[U] \u5f53\u9875\u8868\u9879 PTE[U] \u7f6e 0 \u65f6\uff0c\u8be5\u9875\u8868\u9879\u5bf9\u5e94\u7684\u5185\u5b58\u9875\u4e3a\u5185\u6838\u9875\uff0c\u8fd0\u884c\u5728 U-Mode \u4e0b\u7684\u4ee3\u7801 \u65e0\u6cd5\u8bbf\u95ee \u3002\u5f53\u9875\u8868\u9879 PTE[U] \u7f6e 1 \u65f6\uff0c\u8be5\u9875\u8868\u9879\u5bf9\u5e94\u7684\u5185\u5b58\u9875\u4e3a\u7528\u6237\u9875\uff0c\u8fd0\u884c\u5728 S-Mode \u4e0b\u7684\u4ee3\u7801 \u65e0\u6cd5\u8bbf\u95ee \u3002\u5982\u679c\u60f3\u8ba9 S \u7279\u6743\u7ea7\u4e0b\u7684\u7a0b\u5e8f\u80fd\u591f\u8bbf\u95ee\u7528\u6237\u9875\uff0c\u9700\u8981\u5bf9 sstatus[SUM] \u4f4d\u7f6e 1 \u3002\u4f46\u662f\u65e0\u8bba\u4ec0\u4e48\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9875\u4e2d\u7684\u6307\u4ee4\u5bf9\u4e8e S-Mode \u800c\u8a00\u90fd\u662f \u65e0\u6cd5\u6267\u884c \u7684\u3002 3.4 \u7528\u6237\u6001\u6808\u4e0e\u5185\u6838\u6001\u6808 \u5f53\u7528\u6237\u6001\u7a0b\u5e8f\u5728\u7528\u6237\u6001\u8fd0\u884c\u65f6\uff0c\u5176\u4f7f\u7528\u7684\u6808\u4e3a \u7528\u6237\u6001\u6808 \uff0c\u5f53\u8c03\u7528 SYSCALL\u65f6\u5019\uff0c\u9677\u5165\u5185\u6838\u5904\u7406\u65f6\u4f7f\u7528\u7684\u6808\u4e3a \u5185\u6838\u6001\u6808 \uff0c\u56e0\u6b64\u9700\u8981\u533a\u5206\u7528\u6237\u6001\u6808\u548c\u5185\u6838\u6001\u6808\uff0c\u5e76\u5728\u5f02\u5e38\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u6808\u8fdb\u884c\u5207\u6362\u3002 3.5 ELF \u7a0b\u5e8f ELF, short for Executable and Linkable Format. \u662f\u5f53\u4eca\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u683c\u5f0f\u3002\u4f8b\u5982\u5f53\u6211\u4eec\u8fd0\u884c gcc <some-name>.c \u540e\u4ea7\u751f\u7684 a.out \u8f93\u51fa\u6587\u4ef6\u7684\u683c\u5f0f\u5c31\u662f ELF\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ cat hello.c #include <stdio.h> int main() { printf(\"hello, world\\n\"); return 0; } $ gcc hello.c $ file a.out a.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=dd33139196142abd22542134c20d85c571a78b0c, for GNU/Linux 3.2.0, not stripped \u5c06\u7a0b\u5e8f\u5c01\u88c5\u6210 ELF \u683c\u5f0f\u7684\u91cd\u8981\u610f\u4e49\u662f\uff0c\u5728\u5176\u4e2d\u53ef\u4ee5\u5305\u542b\u5982\u4f55\u5c06\u7a0b\u5e8f\u6b63\u786e\u5730\u52a0\u8f7d\u5165\u5185\u5b58\u7684 metadata\uff0c\u5e76\u4e14\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u7531 loader \u6765\u5c06\u52a8\u6001\u94fe\u63a5\u5728\u7a0b\u5e8f\u4e0a\u7684\u52a8\u6001\u94fe\u63a5\u5e93(shared library)\u6b63\u786e\u5730\u4ece\u78c1\u76d8\u6216\u5185\u5b58\u4e2d\u52a0\u8f7d(load)\uff0c\u4ee5\u53ca\uff0cELF \u6587\u4ef6\u4e2d\u5305\u542b\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f\u53ef\u4ee5\u8ba9\u8be5\u7a0b\u5e8f\u7ee7\u7eed\u548c\u522b\u7684\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u548c\u5e93\u518d\u6b21\u94fe\u63a5\uff0c\u6784\u6210\u65b0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u4e3a\u4e86\u7b80\u5316\u5b9e\u9a8c\u6b65\u9aa4\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6d89\u53ca\u94fe\u63a5\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u5185\u5bb9\u3002 4 \u5b9e\u9a8c\u6b65\u9aa4 4.1 \u51c6\u5907\u5de5\u7a0b \u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab4 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u9700\u8981\u4fee\u6539 vmlinux.lds.S \uff0c\u5c06\u7528\u6237\u6001\u7a0b\u5e8f uapp \u52a0\u8f7d\u81f3 .data \u6bb5\u3002\u6309\u5982\u4e0b\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ... .data : ALIGN(0x1000){ _sdata = .; *(.sdata .sdata*) *(.data .data.*) _edata = .; . = ALIGN(0x1000); uapp_start = .; *(.uapp .uapp*) uapp_end = .; . = ALIGN(0x1000); } >ramv AT>ram ... \u9700\u8981\u4fee\u6539 defs.h \uff0c\u5728 defs.h \u6dfb\u52a0 \u5982\u4e0b\u5185\u5bb9\uff1a 1 2 #define USER_START (0x0000000000000000) // user space start virtual address #define USER_END (0x0000004000000000) // user space end virtual address \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002\u5e76\u6309\u7167\u4e0b\u9762\u7684\u4f4d\u7f6e\u6765\u653e\u7f6e\u8fd9\u4e9b\u65b0\u6587\u4ef6\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 mm \u4e2d\u6dfb\u52a0\u4e86 buddy system \uff0c\u4f46\u662f\u4e5f\u4fdd\u8bc1\u4e86\u539f\u6765\u8c03\u7528\u7684 kalloc \u548c kfree \u7684\u517c\u5bb9\u3002\u4f60\u5e94\u8be5\u65e0\u9700\u4fee\u6539\u539f\u5148\u4f7f\u7528\u4e86 kalloc \u7684\u76f8\u5173\u4ee3\u7801\uff0c\u5982\u679c\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\u53ef\u4ee5\u8054\u7cfb\u52a9\u6559\u3002\u4e3a\u4e86\u51cf\u5c0f\u5927\u5bb6\u7684\u5de5\u4f5c\u91cf\uff0c\u6211\u4eec\u66ff\u5927\u5bb6\u5b9e\u73b0\u4e86 Buddy System\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u6765\u7ba1\u7406\u5185\u5b58\uff1a 1 2 3 4 5 6 // \u5206\u914d page_cnt \u4e2a\u9875\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd4\u56de\u5206\u914d\u5185\u5b58\u7684\u5730\u5740\u3002\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u5728\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e0a\u90fd\u662f\u8fde\u7eed\u7684 uint64_t alloc_pages ( uint64_t page_cnt ); // \u76f8\u5f53\u4e8e alloc_pages(1); uint64_t alloc_page (); // \u91ca\u653e\u4ece addr \u5f00\u59cb\u7684\u4e4b\u524d\u6309\u5206\u914d\u7684\u5185\u5b58 void free_pages ( uint64_t addr ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 . \u251c\u2500\u2500 arch \u2502 \u2514\u2500\u2500 riscv \u2502 \u2514\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 include \u2502 \u2514\u2500\u2500 mm.h \u2502 \u2514\u2500\u2500 stdint.h \u2502 \u2514\u2500\u2500 kernel \u2502 \u2514\u2500\u2500 mm.c \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 elf.h (this is copied from newlib) \u2514\u2500\u2500 user \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 getpid.c \u251c\u2500\u2500 link.lds \u251c\u2500\u2500 printf.c \u251c\u2500\u2500 start.S \u251c\u2500\u2500 stddef.h \u251c\u2500\u2500 stdio.h \u251c\u2500\u2500 syscall.h \u2514\u2500\u2500 uapp.S \u4fee\u6539 \u6839\u76ee\u5f55 \u4e0b\u7684 Makefile, \u5c06 user \u7eb3\u5165\u5de5\u7a0b\u7ba1\u7406\u3002 \u5728\u6839\u76ee\u5f55\u4e0b make \u4f1a\u751f\u6210 user/uapp.o user/uapp.elf user/uapp.bin \uff0c\u4ee5\u53ca\u6211\u4eec\u6700\u7ec8\u6d4b\u8bd5\u4f7f\u7528\u7684 ELF \u53ef\u6267\u884c\u6587\u4ef6 user/uapp \u3002 \u901a\u8fc7 objdump \u6211\u4eec\u53ef\u4ee5\u770b\u5230 uapp \u4f7f\u7528 ecall \u6765\u8c03\u7528 SYSCALL (\u5728 U-Mode \u4e0b\u4f7f\u7528 ecall \u4f1a\u89e6\u53d1environment-call-from-U-mode\u5f02\u5e38)\u3002\u4ece\u800c\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u5904\u5728 S-Mode \u7684 OS\uff0c \u7531\u5185\u6838\u6765\u5904\u7406\u76f8\u5173\u5f02\u5e38\u3002 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u4f1a\u5c06\u7528\u6237\u6001\u7a0b\u5e8f strip \u6210\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u8fd0\u884c\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u7a0b\u5e8f\u8fd0\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u4f4d\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5f00\u59cb\u4f4d\u7f6e, \u4e5f\u5c31\u662f\u8bf4 uapp_start \u5904\u7684\u6307\u4ee4 \u5c31\u662f\u6211\u4eec\u8981\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002\u6211\u4eec\u5c06\u8fd0\u884c\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f5c\u4e3a\u7b2c\u4e00\u6b65\uff0c\u5728\u786e\u8ba4\u7528\u6237\u6001\u7684\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u80fd\u591f\u8fd0\u884c\u540e\uff0c\u6211\u4eec\u518d\u5c06\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u7684\u7528\u6237\u7a0b\u5e8f\u6587\u4ef6\u6362\u4e3a ELF \u6765\u8fdb\u884c\u6267\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0000000000000004 <getpid>: 4: fe010113 addi sp,sp,-32 8: 00813c23 sd s0,24(sp) c: 02010413 addi s0,sp,32 10: fe843783 ld a5,-24(s0) 14: 0ac00893 li a7,172 18: 00000073 ecall <- SYS_GETPID ... 00000000000000d8 <vprintfmt>: ... 60c: 00070513 mv a0,a4 610: 00068593 mv a1,a3 614: 00060613 mv a2,a2 618: 00000073 ecall <- SYS_WRITE ... 4.2 \u521b\u5efa\u7528\u6237\u6001\u8fdb\u7a0b \u672c\u6b21\u5b9e\u9a8c\u53ea\u9700\u8981\u521b\u5efa 4 \u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\uff0c\u4fee\u6539 proc.h \u4e2d\u7684 NR_TASKS \u5373\u53ef\u3002 \u7531\u4e8e\u521b\u5efa\u7528\u6237\u6001\u8fdb\u7a0b\u8981\u5bf9 sepc sstatus sscratch \u505a\u8bbe\u7f6e\uff0c\u6211\u4eec\u5c06\u5176\u52a0\u5165 thread_struct \u4e2d\u3002 \u7531\u4e8e\u591a\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u9700\u8981\u4fdd\u8bc1\u76f8\u5bf9\u9694\u79bb\uff0c\u56e0\u6b64\u4e0d\u53ef\u4ee5\u5171\u7528\u9875\u8868\u3002\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u90fd\u521b\u5efa\u4e00\u4e2a\u9875\u8868\u3002\u4fee\u6539 task_struct \u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // proc.h typedef unsigned long * pagetable_t ; struct thread_struct { uint64_t ra ; uint64_t sp ; uint64_t s [ 12 ]; uint64_t sepc , sstatus , sscratch ; }; struct task_struct { struct thread_info * thread_info ; uint64_t state ; uint64_t counter ; uint64_t priority ; uint64_t pid ; struct thread_struct thread ; pagetable_t pgd ; }; \u4fee\u6539 task_init \u5bf9\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\uff0c\u5176\u62e5\u6709\u4e24\u4e2a stack\uff1a U-Mode Stack \u4ee5\u53ca S-Mode Stack \uff0c \u5176\u4e2d S-Mode Stack \u5728 lab3 \u4e2d\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 alloc_page \u63a5\u53e3\u7533\u8bf7\u4e00\u4e2a\u7a7a\u7684\u9875\u9762\u6765\u4f5c\u4e3a U-Mode Stack \u3002 \u4e3a\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u521b\u5efa\u81ea\u5df1\u7684\u9875\u8868 \u5e76\u5c06 uapp \u6240\u5728\u9875\u9762\uff0c\u4ee5\u53ca U-Mode Stack \u505a\u76f8\u5e94\u7684\u6620\u5c04\uff0c\u540c\u65f6\u4e3a\u4e86\u907f\u514d U-Mode \u548c S-Mode \u5207\u6362\u7684\u65f6\u5019\u5207\u6362\u9875\u8868\uff0c\u6211\u4eec\u4e5f\u5c06\u5185\u6838\u9875\u8868 \uff08 swapper_pg_dir \uff09 \u590d\u5236\u5230\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u3002\u6ce8\u610f\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6709\u90e8\u5206\u6570\u636e\u4e0d\u5728\u6808\u4e0a\uff0c\u800c\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5c31\u5df2\u7ecf\u88ab\u5206\u914d\u4e86\u7a7a\u95f4\uff08\u6bd4\u5982\u6211\u4eec\u7684 uapp \u4e2d\u7684 counter \u53d8\u91cf\uff09\uff0c\u6240\u4ee5\u4e8c\u8fdb\u5236\u6587\u4ef6\u9700\u8981\u5148\u88ab \u62f7\u8d1d \u5230\u4e00\u5757\u67d0\u4e2a\u8fdb\u7a0b\u4e13\u7528\u7684\u5185\u5b58\u4e4b\u540e\u518d\u8fdb\u884c\u6620\u5c04\uff0c\u9632\u6b62\u6240\u6709\u7684\u8fdb\u7a0b\u5171\u4eab\u6570\u636e\uff0c\u9020\u6210\u671f\u671b\u5916\u7684\u8fdb\u7a0b\u95f4\u76f8\u4e92\u5f71\u54cd\u3002 \u5bf9\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u6211\u4eec\u9700\u8981\u5c06 sepc \u4fee\u6539\u4e3a USER_START \uff0c\u914d\u7f6e\u4fee\u6539\u597d sstatus \u4e2d\u7684 SPP \uff08 \u4f7f\u5f97 sret \u8fd4\u56de\u81f3 U-Mode \uff09\uff0c SPIE \uff08 sret \u4e4b\u540e\u5f00\u542f\u4e2d\u65ad \uff09\uff0c SUM \uff08 S-Mode \u53ef\u4ee5\u8bbf\u95ee User \u9875\u9762 \uff09\uff0c sscratch \u8bbe\u7f6e\u4e3a U-Mode \u7684 sp\uff0c\u5176\u503c\u4e3a USER_END \uff08\u5373 U-Mode Stack \u88ab\u653e\u7f6e\u5728 user space \u7684\u6700\u540e\u4e00\u4e2a\u9875\u9762\uff09\u3002 \u4fee\u6539 __switch_to\uff0c \u9700\u8981\u52a0\u5165 \u4fdd\u5b58/\u6062\u590d sepc sstatus sscratch \u4ee5\u53ca \u5207\u6362\u9875\u8868\u7684\u903b\u8f91\u3002 \u5728\u5207\u6362\u4e86\u9875\u8868\u4e4b\u540e\uff0c\u9700\u8981\u901a\u8fc7 fence.i \u548c vma.fence \u6765\u5237\u65b0 TLB \u548c ICache\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 PHY_START PHY_END new allocated memory allocated space end \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 PA \u2502 \u2502 \u2502 uapp (copied from uapp_start) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u25b2 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 (map) \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 VA \u2502 UAPP \u2502 \u2502u mode stack\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u25b2 \u2502 \u2502 USER_START USER_END 4.3 \u4fee\u6539\u4e2d\u65ad\u5165\u53e3/\u8fd4\u56de\u903b\u8f91 ( _trap ) \u4ee5\u53ca\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \uff08 trap_handler \uff09 \u4e0e ARM \u67b6\u6784\u4e0d\u540c\u7684\u662f\uff0cRISC-V \u4e2d\u53ea\u6709\u4e00\u4e2a\u6808\u6307\u9488\u5bc4\u5b58\u5668( sp )\uff0c\u56e0\u6b64\u9700\u8981\u6211\u4eec\u6765\u5b8c\u6210\u7528\u6237\u6808\u4e0e\u5185\u6838\u6808\u7684\u5207\u6362\u3002 \u7531\u4e8e\u6211\u4eec\u7684\u7528\u6237\u6001\u8fdb\u7a0b\u8fd0\u884c\u5728 U-Mode \u4e0b\uff0c \u4f7f\u7528\u7684\u8fd0\u884c\u6808\u4e5f\u662f U-Mode Stack \uff0c \u56e0\u6b64\u5f53\u89e6\u53d1\u5f02\u5e38\u65f6\uff0c \u6211\u4eec\u9996\u5148\u8981\u5bf9\u6808\u8fdb\u884c\u5207\u6362 \uff08 U-Mode Stack -> S-Mode Stack \uff09\u3002\u540c\u7406 \u8ba9\u6211\u4eec\u5b8c\u6210\u4e86\u5f02\u5e38\u5904\u7406\uff0c \u4ece S-Mode \u8fd4\u56de\u81f3 U-Mode \uff0c \u4e5f\u9700\u8981\u8fdb\u884c\u6808\u5207\u6362 \uff08 S-Mode Stack -> U-Mode Stack \uff09\u3002 \u4fee\u6539 __dummy \u3002\u5728 4.2 \u4e2d \u6211\u4eec\u521d\u59cb\u5316\u65f6\uff0c thread_struct.sp \u4fdd\u5b58\u4e86 S-Mode sp \uff0c thread_struct.sscratch \u4fdd\u5b58\u4e86 U-Mode sp \uff0c \u56e0\u6b64\u5728 S-Mode -> U->Mode \u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ea4\u6362\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u7684\u503c\u5373\u53ef\u3002 \u4fee\u6539 _trap \u3002\u540c\u7406 \u5728 _trap \u7684\u9996\u5c3e\u6211\u4eec\u90fd\u9700\u8981\u505a\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 \u6ce8\u610f\u5982\u679c\u662f \u5185\u6838\u7ebf\u7a0b( \u6ca1\u6709 U-Mode Stack ) \u89e6\u53d1\u4e86\u5f02\u5e38\uff0c\u5219\u4e0d\u9700\u8981\u8fdb\u884c\u5207\u6362\u3002\uff08\u5185\u6838\u7ebf\u7a0b\u7684 sp \u6c38\u8fdc\u6307\u5411\u7684 S-Mode Stack\uff0c sscratch \u4e3a 0\uff09 uapp \u4f7f\u7528 ecall \u4f1a\u4ea7\u751f ECALL_FROM_U_MODE exception \u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728 trap_handler \u91cc\u9762\u8fdb\u884c\u6355\u83b7\u3002\u4fee\u6539 trap_handler \u5982\u4e0b\uff1a 1 2 3 void trap_handler ( uint64_t scause , uint64_t sepc , struct pt_regs * regs ) { ... } \u8fd9\u91cc\u9700\u8981\u89e3\u91ca\u65b0\u589e\u52a0\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570 regs \uff0c \u5728 _trap \u4e2d\u6211\u4eec\u5c06\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 \u8fde\u7eed \u7684\u4fdd\u5b58\u5728 S-Mode Stack\u4e0a\uff0c \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e00\u6bb5\u770b\u505a\u4e00\u4e2a\u53eb\u505a pt_regs \u7684\u7ed3\u6784\u4f53\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u53d6\u5230\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u7684\u503c\uff08 \u6bd4\u5982 syscall \u4e2d\u6211\u4eec\u9700\u8981\u4ece a0 ~ a7 \u5bc4\u5b58\u5668\u4e2d\u53d6\u5230\u53c2\u6570 \uff09\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u503c\u4e5f\u53ef\u4ee5\u6309\u9700\u6dfb\u52a0\uff0c\u540c\u65f6\u9700\u8981\u5728 _trap \u4e2d\u5b58\u5165\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u503c\u4ee5\u4f9b\u4f7f\u7528\uff0c \u793a\u4f8b\u5982\u4e0b\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 High Addr \u2500\u2500\u2500\u25ba \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 sstatus \u2502 \u2502 \u2502 \u2502 sepc \u2502 \u2502 \u2502 \u2502 x31 \u2502 \u2502 \u2502 \u2502 . \u2502 \u2502 . \u2502 \u2502 . \u2502 \u2502 \u2502 \u2502 x1 \u2502 \u2502 \u2502 \u2502 x0 \u2502 sp (pt_regs) \u2500\u2500\u25ba \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Low Addr \u2500\u2500\u2500\u25ba \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u8bf7\u540c\u5b66\u81ea\u5df1\u8865\u5145 struct pt_regs \u7684\u5b9a\u4e49\uff0c \u4ee5\u53ca\u5728 trap_handler \u4e2d\u8865\u5145\u5904\u7406 SYSCALL \u7684\u903b\u8f91\u3002 4.4 \u6dfb\u52a0\u7cfb\u7edf\u8c03\u7528 \u672c\u6b21\u5b9e\u9a8c\u8981\u6c42\u7684\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u539f\u578b\u4ee5\u53ca\u5177\u4f53\u529f\u80fd\u5982\u4e0b\uff1a 64 \u53f7\u7cfb\u7edf\u8c03\u7528 sys_write(unsigned int fd, const char* buf, size_t count) \u8be5\u8c03\u7528\u5c06\u7528\u6237\u6001\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff0c\u6b64\u5904fd\u4e3a\u6807\u51c6\u8f93\u51fa\uff081\uff09\uff0cbuf\u4e3a\u7528\u6237\u9700\u8981\u6253\u5370\u7684\u8d77\u59cb\u5730\u5740\uff0ccount\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u8fd4\u56de\u6253\u5370\u7684\u5b57\u7b26\u6570\u3002( \u5177\u4f53\u89c1 user/printf.c ) 172 \u53f7\u7cfb\u7edf\u8c03\u7528 sys_getpid() \u8be5\u8c03\u7528\u4ececurrent\u4e2d\u83b7\u53d6\u5f53\u524d\u7684pid\u653e\u5165a0\u4e2d\u8fd4\u56de\uff0c\u65e0\u53c2\u6570\u3002\uff08 \u5177\u4f53\u89c1 user/getpid.c \uff09 \u589e\u52a0 syscall.c syscall.h \u6587\u4ef6\uff0c \u5e76\u5728\u5176\u4e2d\u5b9e\u73b0 getpid \u4ee5\u53ca write \u903b\u8f91\u3002 \u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u53c2\u6570\u653e\u7f6e\u5728 a0 \u4e2d (\u4e0d\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u5bc4\u5b58\u5668\uff0c \u5e94\u8be5\u4fee\u6539 regs \u4e2d\u4fdd\u5b58\u7684\u5185\u5bb9)\u3002 \u9488\u5bf9\u7cfb\u7edf\u8c03\u7528\u8fd9\u4e00\u7c7b\u5f02\u5e38\uff0c \u6211\u4eec\u9700\u8981\u624b\u52a8\u5c06 sepc + 4 \uff08 sepc \u8bb0\u5f55\u7684\u662f\u89e6\u53d1\u5f02\u5e38\u7684\u6307\u4ee4\u5730\u5740\uff0c \u7531\u4e8e\u7cfb\u7edf\u8c03\u7528\u8fd9\u7c7b\u5f02\u5e38\u5904\u7406\u5b8c\u6210\u4e4b\u540e\uff0c \u6211\u4eec\u5e94\u8be5\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u7684\u6307\u4ee4\uff0c\u56e0\u6b64\u9700\u8981\u6211\u4eec\u624b\u52a8\u4fee\u6539 sepc \u7684\u5730\u5740\uff0c\u4f7f\u5f97 sret \u4e4b\u540e \u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\uff09\u3002 4.5 \u4fee\u6539 head.S \u4ee5\u53ca start_kernel \u5728\u4e4b\u524d\u7684 lab \u4e2d\uff0c \u5728 OS boot \u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u7b49\u5f85\u4e00\u4e2a\u65f6\u95f4\u7247\uff0c\u624d\u4f1a\u8fdb\u884c\u8c03\u5ea6\u3002\u6211\u4eec\u73b0\u5728\u66f4\u6539\u4e3a OS boot \u5b8c\u6210\u4e4b\u540e\u7acb\u5373\u8c03\u5ea6 uapp \u8fd0\u884c\u3002 \u5728 start_kernel \u4e2d\u8c03\u7528 schedule() \u6ce8\u610f\u653e\u7f6e\u5728 test() \u4e4b\u524d\u3002 \u5c06 head.S \u4e2d enable interrupt sstatus.SIE \u903b\u8f91\u6ce8\u91ca\uff0c\u786e\u4fdd schedule \u8fc7\u7a0b\u4e0d\u53d7\u4e2d\u65ad\u5f71\u54cd\u3002 4.6 \u6d4b\u8bd5\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6 \u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6\uff0c\u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539\uff0c\u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u8f93\u51fa\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done! ...proc_init done! [S-MODE] Hello RISC-V [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* ... 4.7 \u6dfb\u52a0 ELF \u652f\u6301 ELF Header ELF \u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u5230\u5185\u5b58\u6240\u9700\u7684\u4fe1\u606f\u3002\u5f53\u6211\u4eec\u901a\u8fc7 readelf \u6765\u67e5\u770b\u4e00\u4e2a ELF \u53ef\u6267\u884c\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u5230\u88ab\u5305\u542b\u5728 ELF Header \u4e2d\u7684\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 $ readelf -a uapp ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: RISC-V Version: 0x1 Entry point address: 0x100e8 Start of program headers: 64 (bytes into file) Start of section headers: 3200 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 3 Size of section headers: 64 (bytes) Number of section headers: 9 Section header string table index: 8 Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .text PROGBITS 00000000000100e8 000000e8 00000000000006fc 0000000000000000 AX 0 0 4 [ 2] .rodata PROGBITS 00000000000107e8 000007e8 0000000000000078 0000000000000000 A 0 0 8 [ 3] .bss NOBITS 0000000000011860 00000860 00000000000003f0 0000000000000000 WA 0 0 8 [ 4] .comment PROGBITS 0000000000000000 00000860 000000000000002b 0000000000000001 MS 0 0 1 [ 5] .riscv.attributes RISCV_ATTRIBUTE 0000000000000000 0000088b 000000000000002e 0000000000000000 0 0 1 [ 6] .symtab SYMTAB 0000000000000000 000008c0 00000000000002d0 0000000000000018 7 17 8 [ 7] .strtab STRTAB 0000000000000000 00000b90 00000000000000a1 0000000000000000 0 0 1 [ 8] .shstrtab STRTAB 0000000000000000 00000c31 0000000000000049 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), D (mbind), p (processor specific) There are no section groups in this file. Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flags Align RISCV_ATTRIBUT 0x000000000000088b 0x0000000000000000 0x0000000000000000 0x000000000000002e 0x0000000000000000 R 0x1 LOAD 0x00000000000000e8 0x00000000000100e8 0x00000000000100e8 0x0000000000000778 0x0000000000001b68 RWE 0x8 GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 RW 0x10 Section to Segment mapping: Segment Sections... 00 .riscv.attributes 01 .text .rodata .bss 02 There is no dynamic section in this file. There are no relocations in this file. The decoding of unwind sections for machine type RISC-V is not currently supported. Symbol table '.symtab' contains 30 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000000100e8 0 SECTION LOCAL DEFAULT 1 .text 2: 00000000000107e8 0 SECTION LOCAL DEFAULT 2 .rodata 3: 0000000000011860 0 SECTION LOCAL DEFAULT 3 .bss 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 .comment 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 .riscv.attributes 6: 0000000000000000 0 FILE LOCAL DEFAULT ABS start.o 7: 00000000000100e8 0 NOTYPE LOCAL DEFAULT 1 $x 8: 0000000000000000 0 FILE LOCAL DEFAULT ABS getpid.c 9: 00000000000100ec 52 FUNC LOCAL DEFAULT 1 getpid 10: 00000000000100ec 0 NOTYPE LOCAL DEFAULT 1 $x 11: 0000000000010120 0 NOTYPE LOCAL DEFAULT 1 $x 12: 0000000000000000 0 FILE LOCAL DEFAULT ABS printf.c 13: 000000000001017c 0 NOTYPE LOCAL DEFAULT 1 $x 14: 00000000000101d4 1412 FUNC LOCAL DEFAULT 1 vprintfmt 15: 00000000000101d4 0 NOTYPE LOCAL DEFAULT 1 $x 16: 0000000000010758 0 NOTYPE LOCAL DEFAULT 1 $x 17: 0000000000010758 140 FUNC GLOBAL DEFAULT 1 printf 18: 0000000000012060 0 NOTYPE GLOBAL DEFAULT ABS __global_pointer$ 19: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 2 __SDATA_BEGIN__ 20: 0000000000011860 4 OBJECT GLOBAL DEFAULT 3 tail 21: 00000000000100e8 0 NOTYPE GLOBAL DEFAULT 1 _start 22: 0000000000011868 1000 OBJECT GLOBAL DEFAULT 3 buffer 23: 0000000000011c50 0 NOTYPE GLOBAL DEFAULT 3 __BSS_END__ 24: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 3 __bss_start 25: 0000000000010120 92 FUNC GLOBAL DEFAULT 1 main 26: 000000000001017c 88 FUNC GLOBAL DEFAULT 1 putc 27: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 2 __DATA_BEGIN__ 28: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 2 _edata 29: 0000000000011c50 0 NOTYPE GLOBAL DEFAULT 3 _end No version information found in this file. Attribute Section: riscv File Attributes Tag_RISCV_arch: \"rv64i2p0_m2p0_a2p0_f2p0_d2p0\" \u5176\u4e2d\u5305\u542b\u4e86\u4e24\u79cd\u5c06\u7a0b\u5e8f\u5206\u5757\u7684\u7c92\u5ea6\uff0cSegment\uff08\u6bb5\uff09\u548c Section\uff08\u8282\uff09\uff0c\u6211\u4eec\u4ee5\u6bb5\u4e3a\u7c92\u5ea6\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u8fdb\u5185\u5b58\u4e2d\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7ed9\u51fa\u7684\u6837\u4f8b\u7a0b\u5e8f\u5305\u542b\u4e86\u4e09\u4e2a\u6bb5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u5173\u6ce8 Type \u4e3a LOAD \u7684\u6bb5\uff0cLOAD \u8868\u793a\u4ed6\u4eec\u9700\u8981\u5728\u5f00\u59cb\u8fd0\u884c\u524d\u88ab\u52a0\u8f7d\u8fdb\u5185\u5b58\u4e2d\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u521d\u59cb\u5316\u8fdb\u7a0b\u7684\u65f6\u5019\u9700\u8981\u6267\u884c\u7684\u5de5\u4f5c\u3002 \u800c\u201c\u8282\u201d\u4ee3\u8868\u4e86\u66f4\u7ec6\u5206\u7684\u8bed\u4e49\uff0c\u6bd4\u5982 .text \u4e00\u822c\u5305\u542b\u4e86\u7a0b\u5e8f\u7684\u6307\u4ee4\uff0c .rodata \u662f\u53ea\u8bfb\u7684\u5168\u5c40\u53d8\u91cf\u7b49\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c Google \u6765\u5b66\u4e60\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002 \u6240\u4ee5\u4ee3\u7801\u600e\u4e48\u5199\uff1f \u9996\u5148\u6211\u4eec\u9700\u8981\u5c06 uapp.S \u4e2d\u7684 payload \u7ed9\u6362\u6210\u6211\u4eec\u7684 ELF \u6587\u4ef6\u3002 1 2 3 4 /* user/uapp.S */ . section . uapp . incbin \"uapp\" \u8fd9\u65f6\u5019\u4ece uapp_start \u5f00\u59cb\u7684\u6570\u636e\u5c31\u53d8\u6210\u4e86\u540d\u4e3a uapp \u7684 ELF \u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4 uapp_start \u5904 32-bit \u7684\u6570\u636e\u4e0d\u518d\u662f\u6211\u4eec\u9700\u8981\u6267\u884c\u7b2c\u4e00\u6761\u6307\u4ee4\u4e86\uff0c\u800c\u662f ELF Header \u7684\u5f00\u59cb\u3002 \u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4f60\u5bf9 task_init \u4e2d\u7684\u521d\u59cb\u5316\u6b65\u9aa4\u8fdb\u884c\u4fee\u6539\u3002\u6211\u4eec\u7ed9\u51fa\u4e86 ELF \u76f8\u5173\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\uff08 elf.h \uff09\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\u4f60\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u7684\u7ed3\u6784\u4f53\u6216\u8005\u57df\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Elf64_Ehdr // \u4f60\u53ef\u4ee5\u5c06 uapp_start \u5f3a\u5236\u8f6c\u5316\u4e3a\u6539\u7c7b\u578b\u7684\u6307\u9488\uff0c \u7136\u540e\u628a\u90a3\u4e00\u5757\u5185\u5b58\u5f53\u6210\u6b64\u7c7b\u7ed3\u6784\u4f53\u6765\u8bfb\u5176\u4e2d\u7684\u6570\u636e\uff0c\u5176\u4e2d\u5305\u62ec\uff1a e_ident // Magic Number, \u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u57df\u6765\u68c0\u6d4b\u81ea\u5df1\u662f\u4e0d\u662f\u771f\u7684\u6b63\u5728\u8bfb\u4e00\u4e2a Ehdr, \u503c\u4e00\u5b9a\u662f 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 e_entry // \u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u88ab\u5b58\u50a8\u7684\u7528\u6237\u6001\u865a\u62df\u5730\u5740 e_phnum // ELF \u6587\u4ef6\u5305\u542b\u7684 Segment \u7684\u6570\u91cf e_phoff // ELF \u6587\u4ef6\u5305\u542b\u7684 Segment \u6570\u7ec4\u76f8\u5bf9\u4e8e Ehdr \u7684\u504f\u79fb\u91cf Elf64_Phdr // \u5b58\u50a8\u4e86\u7a0b\u5e8f\u5404\u4e2a Segment \u76f8\u5173\u7684 metadata // \u4f60\u53ef\u4ee5\u5c06 uapp_start + e_phoff \u5f3a\u5236\u8f6c\u5316\u4e3a\u6b64\u7c7b\u578b\uff0c\u5c31\u4f1a\u6307\u5411\u7b2c\u4e00\u4e2a Phdr, // uapp_start + e_phoff + 1 * sizeof(Elf64_Phdr), \u5219\u6307\u5411\u7b2c\u4e8c\u4e2a\u2018 p_filesz // Segment \u5728\u6587\u4ef6\u4e2d\u5360\u7684\u5927\u5c0f p_memsz // Segment \u5728\u5185\u5b58\u4e2d\u5360\u7684\u5927\u5c0f p_vaddr // Segment \u8d77\u59cb\u7684\u7528\u6237\u6001\u865a\u62df\u5730\u5740 p_offset // Segment \u5728\u6587\u4ef6\u4e2d\u76f8\u5bf9\u4e8e Ehdr \u7684\u504f\u79fb\u91cf p_type // Segment \u7684\u7c7b\u578b p_flags // Segment \u7684\u6743\u9650\uff08\u5305\u62ec\u4e86\u8bfb\u3001\u5199\u548c\u6267\u884c\uff09 \u8fd9\u91cc\u6709\u4e0d\u5c11\u4f8b\u5b50\u53ef\u4ee5\u4e3e\uff0c\u4e3a\u4e86\u907f\u514d\u540c\u5b66\u4eec\u5728\u5b9e\u9a8c\u4e2d\u82b1\u592a\u591a\u65f6\u95f4\uff0c\u6211\u4eec\u544a\u8bc9\u5927\u5bb6\u53ef\u4ee5\u600e\u4e48\u627e\u5230\u5b9e\u9a8c\u4e2d\u8fd9\u4e9b\u76f8\u5173\u53d8\u91cf\u88ab\u5b58\u5728\u4e86\u54ea\u91cc\uff1a Elf64_Ehdr* ehdr = (Elf64_Ehdr*)uapp_start \uff0c\u4ece\u5730\u5740 uapp_start \u5f00\u59cb\uff0c\u4fbf\u662f\u6211\u4eec\u8981\u627e\u7684 Ehdr. Elf64_Phdr* phdrs = (Elf64_Phdr*)(uapp_start + ehdr->phoff) \uff0c\u662f\u4e00\u4e2a Phdr \u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a Elf64_Phdr . phdrs[ehdr->phnum - 1] \u662f\u6700\u540e\u4e00\u4e2a Phdr. phdrs[0].p_type == PT_LOAD \uff0c\u8bf4\u660e\u8fd9\u4e2a Segment \u7684\u7c7b\u578b\u662f LOAD\uff0c\u9700\u8981\u5728\u521d\u59cb\u5316\u65f6\u88ab\u52a0\u8f7d\u8fdb\u5185\u5b58\u3002 (void*)(uapp_start + phdrs[1].p_offset) \u5c06\u4f1a\u6307\u5411\u7b2c\u4e8c\u4e2a\u6bb5\u4e2d\u7684\u5185\u5bb9\u7684\u5f00\u5934. \u5269\u4e0b\u7684\u57df\u7684\u7528\u6cd5\u6211\u4eec\u5e0c\u671b\u540c\u5b66\u4eec\u901a\u8fc7\u9605\u8bfb man elf \u547d\u4ee4\u548c\u4f7f\u7528 Google \uff08\u6ce8\u610f\u4e0d\u662f\u767e\u5ea6\uff09\u6765\u83b7\u53d6\u3002\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7684\u4ee3\u7801\u6765\u5c06\u7a0b\u5e8f load \u8fdb\u5165\u5185\u5b58\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 static uint64_t load_program ( struct task_struct * task ) { Elf64_Ehdr * ehdr = ( Elf64_Ehdr * ) uapp_start ; uint64_t phdr_start = ( uint64_t ) ehdr + ehdr -> e_phoff ; int phdr_cnt = ehdr -> e_phnum ; Elf64_Phdr * phdr ; int load_phdr_cnt = 0 ; for ( int i = 0 ; i < phdr_cnt ; i ++ ) { phdr = ( Elf64_Phdr * )( phdr_start + sizeof ( Elf64_Phdr ) * i ); if ( phdr -> p_type == PT_LOAD ) { // do mapping // code... } } // allocate user stack and do mapping // code... // following code has been written for you // set user stack ...; // pc for the user program task -> thread . sepc = ehdr -> e_entry ; // sstatus bits set task -> thread . sstatus = ...; // user stack for user program task -> thread . sscratch = ...; } 5. \u601d\u8003\u9898 \u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u4f7f\u7528\u7684\u7528\u6237\u6001\u7ebf\u7a0b\u548c\u5185\u6838\u6001\u7ebf\u7a0b\u7684\u5bf9\u5e94\u5173\u7cfb\u662f\u600e\u6837\u7684\uff1f\uff08\u4e00\u5bf9\u4e00\uff0c\u4e00\u5bf9\u591a\uff0c\u591a\u5bf9\u4e00\u8fd8\u662f\u591a\u5bf9\u591a\uff09 \u4e3a\u4ec0\u4e48 Phdr \u4e2d\uff0c p_filesz \u548c p_memsz \u662f\u4e0d\u4e00\u6837\u5927\u7684\uff1f \u4f5c\u4e1a\u63d0\u4ea4 \u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u5b9e\u9a8c\u6307\u5bfc\u4e94"},{"location":"lab5/#lab-5-rv64","text":"","title":"Lab 5: RV64 \u7528\u6237\u6001\u7a0b\u5e8f"},{"location":"lab5/#1","text":"\u521b\u5efa\u7528\u6237\u6001\u8fdb\u7a0b\uff0c\u5e76\u8bbe\u7f6e sstatus \u6765\u5b8c\u6210\u5185\u6838\u6001\u8f6c\u6362\u81f3\u7528\u6237\u6001\u3002 \u6b63\u786e\u8bbe\u7f6e\u7528\u6237\u8fdb\u7a0b\u7684 \u7528\u6237\u6001\u6808 \u548c \u5185\u6838\u6001\u6808 \uff0c \u5e76\u5728\u5f02\u5e38\u5904\u7406\u65f6\u6b63\u786e\u5207\u6362\u3002 \u8865\u5145\u5f02\u5e38\u5904\u7406\u903b\u8f91\uff0c\u5b8c\u6210\u6307\u5b9a\u7684\u7cfb\u7edf\u8c03\u7528\uff08 SYS_WRITE, SYS_GETPID \uff09\u529f\u80fd\u3002","title":"1 \u5b9e\u9a8c\u76ee\u7684"},{"location":"lab5/#2","text":"Docker in Lab0","title":"2 \u5b9e\u9a8c\u73af\u5883"},{"location":"lab5/#3","text":"","title":"3 \u80cc\u666f\u77e5\u8bc6"},{"location":"lab5/#30","text":"\u5728 lab4 \u4e2d\uff0c\u6211\u4eec\u5f00\u542f\u865a\u62df\u5185\u5b58\uff0c\u8fd9\u4e3a\u8fdb\u7a0b\u95f4\u5730\u5740\u7a7a\u95f4\u76f8\u4e92\u9694\u79bb\u6253\u4e0b\u4e86\u57fa\u7840\u3002\u4e4b\u524d\u7684\u5b9e\u9a8c\u4e2d\u6211\u4eec\u53ea\u521b\u5efa\u4e86\u5185\u6838\u7ebf\u7a0b\uff0c\u4ed6\u4eec\u5171\u7528\u4e86\u5730\u5740\u7a7a\u95f4 \uff08\u5171\u7528\u4e00\u4e2a \u5185\u6838\u9875\u8868 swapper_pg_dir \uff09\u3002\u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\u6211\u4eec\u5c06\u5f15\u5165\u7528\u6237\u6001\u8fdb\u7a0b\u3002\u5f53\u542f\u52a8\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5185\u6838\u5c06\u4e3a\u8be5\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e13\u7528\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7b49\u8d44\u6e90\u3002\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684\uff0c\u6240\u4ee5\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u66f4\u6539\u5c5e\u4e8e\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u72ec\u7acb\u8fd0\u884c\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u540c\u65f6\uff0c\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u8bbf\u95ee\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e5f\u53d7\u5230\u9650\u5236\uff0c\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u65e0\u6cd5\u8bbf\u95ee\u5185\u6838\u7684\u865a\u62df\u5730\u5740\uff0c\u9632\u6b62\u5e94\u7528\u7a0b\u5e8f\u4fee\u6539\u5173\u952e\u64cd\u4f5c\u7cfb\u7edf\u6570\u636e\u3002\u5f53\u7528\u6237\u6001\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u5173\u952e\u8d44\u6e90\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u6765\u5b8c\u6210\u7528\u6237\u6001\u7a0b\u5e8f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u95f4\u7684\u4e92\u52a8\u3002","title":"3.0 \u524d\u8a00"},{"location":"lab5/#31-user","text":"\u5904\u7406\u5668\u5177\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u6a21\u5f0f\uff1a\u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f\u3002\u5728\u5185\u6838\u6a21\u5f0f\u4e0b\uff0c\u6267\u884c\u4ee3\u7801\u5bf9\u5e95\u5c42\u786c\u4ef6\u5177\u6709\u5b8c\u6574\u4e14\u4e0d\u53d7\u9650\u5236\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u4efb\u4f55 CPU \u6307\u4ee4\u5e76\u5f15\u7528\u4efb\u4f55\u5185\u5b58\u5730\u5740\u3002\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\uff0c\u6267\u884c\u4ee3\u7801\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u786c\u4ef6\uff0c\u5fc5\u987b\u59d4\u6258\u7ed9\u7cfb\u7edf\u63d0\u4f9b\u7684\u63a5\u53e3\u624d\u80fd\u8bbf\u95ee\u786c\u4ef6\u6216\u5185\u5b58\u3002\u5904\u7406\u5668\u6839\u636e\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u7c7b\u578b\u5728\u4e24\u79cd\u6a21\u5f0f\u4e4b\u95f4\u5207\u6362\u3002\u5e94\u7528\u7a0b\u5e8f\u4ee5\u7528\u6237\u6a21\u5f0f\u8fd0\u884c\uff0c\u800c\u6838\u5fc3\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u4ef6\u4ee5\u5185\u6838\u6a21\u5f0f\u8fd0\u884c\u3002","title":"3.1 User \u6a21\u5f0f\u57fa\u7840\u4ecb\u7ecd"},{"location":"lab5/#32","text":"\u7cfb\u7edf\u8c03\u7528\u662f\u7528\u6237\u6001\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u5185\u6838\u670d\u52a1\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u5728 RISC-V \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 ecall \u6307\u4ee4\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u3002\u5f53\u6267\u884c\u8fd9\u6761\u6307\u4ee4\u65f6\u5904\u7406\u5668\u4f1a\u63d0\u5347\u7279\u6743\u6a21\u5f0f\uff0c\u8df3\u8f6c\u5230\u5f02\u5e38\u5904\u7406\u51fd\u6570\u5904\u7406\u8fd9\u6761\u7cfb\u7edf\u8c03\u7528\u3002 Linux \u4e2d RISC-V \u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u53ef\u4ee5\u5728 include/uapi/asm-generic/unistd.h \u4e2d\u627e\u5230\uff0c syscall(2) \u624b\u518c\u9875\u4e0a\u5bf9RISC-V\u67b6\u6784\u4e0a\u7684\u8c03\u7528\u8bf4\u660e\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u7cfb\u7edf\u8c03\u7528\u53c2\u6570\u4f7f\u7528 a0 - a5 \uff0c\u7cfb\u7edf\u8c03\u7528\u53f7\u4f7f\u7528 a7 \uff0c \u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\u4f1a\u88ab\u4fdd\u5b58\u5230 a0, a1 \u4e2d\u3002","title":"3.2 \u7cfb\u7edf\u8c03\u7528\u7ea6\u5b9a"},{"location":"lab5/#33-sstatussum-pteu","text":"\u5f53\u9875\u8868\u9879 PTE[U] \u7f6e 0 \u65f6\uff0c\u8be5\u9875\u8868\u9879\u5bf9\u5e94\u7684\u5185\u5b58\u9875\u4e3a\u5185\u6838\u9875\uff0c\u8fd0\u884c\u5728 U-Mode \u4e0b\u7684\u4ee3\u7801 \u65e0\u6cd5\u8bbf\u95ee \u3002\u5f53\u9875\u8868\u9879 PTE[U] \u7f6e 1 \u65f6\uff0c\u8be5\u9875\u8868\u9879\u5bf9\u5e94\u7684\u5185\u5b58\u9875\u4e3a\u7528\u6237\u9875\uff0c\u8fd0\u884c\u5728 S-Mode \u4e0b\u7684\u4ee3\u7801 \u65e0\u6cd5\u8bbf\u95ee \u3002\u5982\u679c\u60f3\u8ba9 S \u7279\u6743\u7ea7\u4e0b\u7684\u7a0b\u5e8f\u80fd\u591f\u8bbf\u95ee\u7528\u6237\u9875\uff0c\u9700\u8981\u5bf9 sstatus[SUM] \u4f4d\u7f6e 1 \u3002\u4f46\u662f\u65e0\u8bba\u4ec0\u4e48\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u9875\u4e2d\u7684\u6307\u4ee4\u5bf9\u4e8e S-Mode \u800c\u8a00\u90fd\u662f \u65e0\u6cd5\u6267\u884c \u7684\u3002","title":"3.3 sstatus[SUM] PTE[U]"},{"location":"lab5/#34","text":"\u5f53\u7528\u6237\u6001\u7a0b\u5e8f\u5728\u7528\u6237\u6001\u8fd0\u884c\u65f6\uff0c\u5176\u4f7f\u7528\u7684\u6808\u4e3a \u7528\u6237\u6001\u6808 \uff0c\u5f53\u8c03\u7528 SYSCALL\u65f6\u5019\uff0c\u9677\u5165\u5185\u6838\u5904\u7406\u65f6\u4f7f\u7528\u7684\u6808\u4e3a \u5185\u6838\u6001\u6808 \uff0c\u56e0\u6b64\u9700\u8981\u533a\u5206\u7528\u6237\u6001\u6808\u548c\u5185\u6838\u6001\u6808\uff0c\u5e76\u5728\u5f02\u5e38\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u6808\u8fdb\u884c\u5207\u6362\u3002","title":"3.4 \u7528\u6237\u6001\u6808\u4e0e\u5185\u6838\u6001\u6808"},{"location":"lab5/#35-elf","text":"ELF, short for Executable and Linkable Format. \u662f\u5f53\u4eca\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u683c\u5f0f\u3002\u4f8b\u5982\u5f53\u6211\u4eec\u8fd0\u884c gcc <some-name>.c \u540e\u4ea7\u751f\u7684 a.out \u8f93\u51fa\u6587\u4ef6\u7684\u683c\u5f0f\u5c31\u662f ELF\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ cat hello.c #include <stdio.h> int main() { printf(\"hello, world\\n\"); return 0; } $ gcc hello.c $ file a.out a.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=dd33139196142abd22542134c20d85c571a78b0c, for GNU/Linux 3.2.0, not stripped \u5c06\u7a0b\u5e8f\u5c01\u88c5\u6210 ELF \u683c\u5f0f\u7684\u91cd\u8981\u610f\u4e49\u662f\uff0c\u5728\u5176\u4e2d\u53ef\u4ee5\u5305\u542b\u5982\u4f55\u5c06\u7a0b\u5e8f\u6b63\u786e\u5730\u52a0\u8f7d\u5165\u5185\u5b58\u7684 metadata\uff0c\u5e76\u4e14\u5728\u8fd0\u884c\u65f6\u53ef\u4ee5\u7531 loader \u6765\u5c06\u52a8\u6001\u94fe\u63a5\u5728\u7a0b\u5e8f\u4e0a\u7684\u52a8\u6001\u94fe\u63a5\u5e93(shared library)\u6b63\u786e\u5730\u4ece\u78c1\u76d8\u6216\u5185\u5b58\u4e2d\u52a0\u8f7d(load)\uff0c\u4ee5\u53ca\uff0cELF \u6587\u4ef6\u4e2d\u5305\u542b\u7684\u91cd\u5b9a\u4f4d\u4fe1\u606f\u53ef\u4ee5\u8ba9\u8be5\u7a0b\u5e8f\u7ee7\u7eed\u548c\u522b\u7684\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u548c\u5e93\u518d\u6b21\u94fe\u63a5\uff0c\u6784\u6210\u65b0\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u4e3a\u4e86\u7b80\u5316\u5b9e\u9a8c\u6b65\u9aa4\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\uff0c\u6240\u4ee5\u4e0d\u4f1a\u6d89\u53ca\u94fe\u63a5\u52a8\u6001\u94fe\u63a5\u5e93\u7684\u5185\u5bb9\u3002","title":"3.5 ELF \u7a0b\u5e8f"},{"location":"lab5/#4","text":"","title":"4 \u5b9e\u9a8c\u6b65\u9aa4"},{"location":"lab5/#41","text":"\u6b64\u6b21\u5b9e\u9a8c\u57fa\u4e8e lab4 \u540c\u5b66\u6240\u5b9e\u73b0\u7684\u4ee3\u7801\u8fdb\u884c\u3002 \u9700\u8981\u4fee\u6539 vmlinux.lds.S \uff0c\u5c06\u7528\u6237\u6001\u7a0b\u5e8f uapp \u52a0\u8f7d\u81f3 .data \u6bb5\u3002\u6309\u5982\u4e0b\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ... .data : ALIGN(0x1000){ _sdata = .; *(.sdata .sdata*) *(.data .data.*) _edata = .; . = ALIGN(0x1000); uapp_start = .; *(.uapp .uapp*) uapp_end = .; . = ALIGN(0x1000); } >ramv AT>ram ... \u9700\u8981\u4fee\u6539 defs.h \uff0c\u5728 defs.h \u6dfb\u52a0 \u5982\u4e0b\u5185\u5bb9\uff1a 1 2 #define USER_START (0x0000000000000000) // user space start virtual address #define USER_END (0x0000004000000000) // user space end virtual address \u4ece repo \u540c\u6b65\u4ee5\u4e0b\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002\u5e76\u6309\u7167\u4e0b\u9762\u7684\u4f4d\u7f6e\u6765\u653e\u7f6e\u8fd9\u4e9b\u65b0\u6587\u4ef6\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 mm \u4e2d\u6dfb\u52a0\u4e86 buddy system \uff0c\u4f46\u662f\u4e5f\u4fdd\u8bc1\u4e86\u539f\u6765\u8c03\u7528\u7684 kalloc \u548c kfree \u7684\u517c\u5bb9\u3002\u4f60\u5e94\u8be5\u65e0\u9700\u4fee\u6539\u539f\u5148\u4f7f\u7528\u4e86 kalloc \u7684\u76f8\u5173\u4ee3\u7801\uff0c\u5982\u679c\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\u53ef\u4ee5\u8054\u7cfb\u52a9\u6559\u3002\u4e3a\u4e86\u51cf\u5c0f\u5927\u5bb6\u7684\u5de5\u4f5c\u91cf\uff0c\u6211\u4eec\u66ff\u5927\u5bb6\u5b9e\u73b0\u4e86 Buddy System\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u6765\u7ba1\u7406\u5185\u5b58\uff1a 1 2 3 4 5 6 // \u5206\u914d page_cnt \u4e2a\u9875\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fd4\u56de\u5206\u914d\u5185\u5b58\u7684\u5730\u5740\u3002\u4fdd\u8bc1\u5206\u914d\u7684\u5185\u5b58\u5728\u865a\u62df\u5730\u5740\u548c\u7269\u7406\u5730\u5740\u4e0a\u90fd\u662f\u8fde\u7eed\u7684 uint64_t alloc_pages ( uint64_t page_cnt ); // \u76f8\u5f53\u4e8e alloc_pages(1); uint64_t alloc_page (); // \u91ca\u653e\u4ece addr \u5f00\u59cb\u7684\u4e4b\u524d\u6309\u5206\u914d\u7684\u5185\u5b58 void free_pages ( uint64_t addr ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 . \u251c\u2500\u2500 arch \u2502 \u2514\u2500\u2500 riscv \u2502 \u2514\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 include \u2502 \u2514\u2500\u2500 mm.h \u2502 \u2514\u2500\u2500 stdint.h \u2502 \u2514\u2500\u2500 kernel \u2502 \u2514\u2500\u2500 mm.c \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 elf.h (this is copied from newlib) \u2514\u2500\u2500 user \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 getpid.c \u251c\u2500\u2500 link.lds \u251c\u2500\u2500 printf.c \u251c\u2500\u2500 start.S \u251c\u2500\u2500 stddef.h \u251c\u2500\u2500 stdio.h \u251c\u2500\u2500 syscall.h \u2514\u2500\u2500 uapp.S \u4fee\u6539 \u6839\u76ee\u5f55 \u4e0b\u7684 Makefile, \u5c06 user \u7eb3\u5165\u5de5\u7a0b\u7ba1\u7406\u3002 \u5728\u6839\u76ee\u5f55\u4e0b make \u4f1a\u751f\u6210 user/uapp.o user/uapp.elf user/uapp.bin \uff0c\u4ee5\u53ca\u6211\u4eec\u6700\u7ec8\u6d4b\u8bd5\u4f7f\u7528\u7684 ELF \u53ef\u6267\u884c\u6587\u4ef6 user/uapp \u3002 \u901a\u8fc7 objdump \u6211\u4eec\u53ef\u4ee5\u770b\u5230 uapp \u4f7f\u7528 ecall \u6765\u8c03\u7528 SYSCALL (\u5728 U-Mode \u4e0b\u4f7f\u7528 ecall \u4f1a\u89e6\u53d1environment-call-from-U-mode\u5f02\u5e38)\u3002\u4ece\u800c\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u5904\u5728 S-Mode \u7684 OS\uff0c \u7531\u5185\u6838\u6765\u5904\u7406\u76f8\u5173\u5f02\u5e38\u3002 \u5728\u672c\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u4f1a\u5c06\u7528\u6237\u6001\u7a0b\u5e8f strip \u6210\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u8fd0\u884c\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u7a0b\u5e8f\u8fd0\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u4f4d\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5f00\u59cb\u4f4d\u7f6e, \u4e5f\u5c31\u662f\u8bf4 uapp_start \u5904\u7684\u6307\u4ee4 \u5c31\u662f\u6211\u4eec\u8981\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u3002\u6211\u4eec\u5c06\u8fd0\u884c\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f5c\u4e3a\u7b2c\u4e00\u6b65\uff0c\u5728\u786e\u8ba4\u7528\u6237\u6001\u7684\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6\u80fd\u591f\u8fd0\u884c\u540e\uff0c\u6211\u4eec\u518d\u5c06\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u7684\u7528\u6237\u7a0b\u5e8f\u6587\u4ef6\u6362\u4e3a ELF \u6765\u8fdb\u884c\u6267\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0000000000000004 <getpid>: 4: fe010113 addi sp,sp,-32 8: 00813c23 sd s0,24(sp) c: 02010413 addi s0,sp,32 10: fe843783 ld a5,-24(s0) 14: 0ac00893 li a7,172 18: 00000073 ecall <- SYS_GETPID ... 00000000000000d8 <vprintfmt>: ... 60c: 00070513 mv a0,a4 610: 00068593 mv a1,a3 614: 00060613 mv a2,a2 618: 00000073 ecall <- SYS_WRITE ...","title":"4.1 \u51c6\u5907\u5de5\u7a0b"},{"location":"lab5/#42","text":"\u672c\u6b21\u5b9e\u9a8c\u53ea\u9700\u8981\u521b\u5efa 4 \u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\uff0c\u4fee\u6539 proc.h \u4e2d\u7684 NR_TASKS \u5373\u53ef\u3002 \u7531\u4e8e\u521b\u5efa\u7528\u6237\u6001\u8fdb\u7a0b\u8981\u5bf9 sepc sstatus sscratch \u505a\u8bbe\u7f6e\uff0c\u6211\u4eec\u5c06\u5176\u52a0\u5165 thread_struct \u4e2d\u3002 \u7531\u4e8e\u591a\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u9700\u8981\u4fdd\u8bc1\u76f8\u5bf9\u9694\u79bb\uff0c\u56e0\u6b64\u4e0d\u53ef\u4ee5\u5171\u7528\u9875\u8868\u3002\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u90fd\u521b\u5efa\u4e00\u4e2a\u9875\u8868\u3002\u4fee\u6539 task_struct \u5982\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // proc.h typedef unsigned long * pagetable_t ; struct thread_struct { uint64_t ra ; uint64_t sp ; uint64_t s [ 12 ]; uint64_t sepc , sstatus , sscratch ; }; struct task_struct { struct thread_info * thread_info ; uint64_t state ; uint64_t counter ; uint64_t priority ; uint64_t pid ; struct thread_struct thread ; pagetable_t pgd ; }; \u4fee\u6539 task_init \u5bf9\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\uff0c\u5176\u62e5\u6709\u4e24\u4e2a stack\uff1a U-Mode Stack \u4ee5\u53ca S-Mode Stack \uff0c \u5176\u4e2d S-Mode Stack \u5728 lab3 \u4e2d\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 alloc_page \u63a5\u53e3\u7533\u8bf7\u4e00\u4e2a\u7a7a\u7684\u9875\u9762\u6765\u4f5c\u4e3a U-Mode Stack \u3002 \u4e3a\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u521b\u5efa\u81ea\u5df1\u7684\u9875\u8868 \u5e76\u5c06 uapp \u6240\u5728\u9875\u9762\uff0c\u4ee5\u53ca U-Mode Stack \u505a\u76f8\u5e94\u7684\u6620\u5c04\uff0c\u540c\u65f6\u4e3a\u4e86\u907f\u514d U-Mode \u548c S-Mode \u5207\u6362\u7684\u65f6\u5019\u5207\u6362\u9875\u8868\uff0c\u6211\u4eec\u4e5f\u5c06\u5185\u6838\u9875\u8868 \uff08 swapper_pg_dir \uff09 \u590d\u5236\u5230\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u9875\u8868\u4e2d\u3002\u6ce8\u610f\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6709\u90e8\u5206\u6570\u636e\u4e0d\u5728\u6808\u4e0a\uff0c\u800c\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5c31\u5df2\u7ecf\u88ab\u5206\u914d\u4e86\u7a7a\u95f4\uff08\u6bd4\u5982\u6211\u4eec\u7684 uapp \u4e2d\u7684 counter \u53d8\u91cf\uff09\uff0c\u6240\u4ee5\u4e8c\u8fdb\u5236\u6587\u4ef6\u9700\u8981\u5148\u88ab \u62f7\u8d1d \u5230\u4e00\u5757\u67d0\u4e2a\u8fdb\u7a0b\u4e13\u7528\u7684\u5185\u5b58\u4e4b\u540e\u518d\u8fdb\u884c\u6620\u5c04\uff0c\u9632\u6b62\u6240\u6709\u7684\u8fdb\u7a0b\u5171\u4eab\u6570\u636e\uff0c\u9020\u6210\u671f\u671b\u5916\u7684\u8fdb\u7a0b\u95f4\u76f8\u4e92\u5f71\u54cd\u3002 \u5bf9\u6bcf\u4e2a\u7528\u6237\u6001\u8fdb\u7a0b\u6211\u4eec\u9700\u8981\u5c06 sepc \u4fee\u6539\u4e3a USER_START \uff0c\u914d\u7f6e\u4fee\u6539\u597d sstatus \u4e2d\u7684 SPP \uff08 \u4f7f\u5f97 sret \u8fd4\u56de\u81f3 U-Mode \uff09\uff0c SPIE \uff08 sret \u4e4b\u540e\u5f00\u542f\u4e2d\u65ad \uff09\uff0c SUM \uff08 S-Mode \u53ef\u4ee5\u8bbf\u95ee User \u9875\u9762 \uff09\uff0c sscratch \u8bbe\u7f6e\u4e3a U-Mode \u7684 sp\uff0c\u5176\u503c\u4e3a USER_END \uff08\u5373 U-Mode Stack \u88ab\u653e\u7f6e\u5728 user space \u7684\u6700\u540e\u4e00\u4e2a\u9875\u9762\uff09\u3002 \u4fee\u6539 __switch_to\uff0c \u9700\u8981\u52a0\u5165 \u4fdd\u5b58/\u6062\u590d sepc sstatus sscratch \u4ee5\u53ca \u5207\u6362\u9875\u8868\u7684\u903b\u8f91\u3002 \u5728\u5207\u6362\u4e86\u9875\u8868\u4e4b\u540e\uff0c\u9700\u8981\u901a\u8fc7 fence.i \u548c vma.fence \u6765\u5237\u65b0 TLB \u548c ICache\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 PHY_START PHY_END new allocated memory allocated space end \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 PA \u2502 \u2502 \u2502 uapp (copied from uapp_start) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u25b2 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 (map) \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 VA \u2502 UAPP \u2502 \u2502u mode stack\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25b2 \u25b2 \u2502 \u2502 USER_START USER_END","title":"4.2 \u521b\u5efa\u7528\u6237\u6001\u8fdb\u7a0b"},{"location":"lab5/#43-_trap-trap_handler","text":"\u4e0e ARM \u67b6\u6784\u4e0d\u540c\u7684\u662f\uff0cRISC-V \u4e2d\u53ea\u6709\u4e00\u4e2a\u6808\u6307\u9488\u5bc4\u5b58\u5668( sp )\uff0c\u56e0\u6b64\u9700\u8981\u6211\u4eec\u6765\u5b8c\u6210\u7528\u6237\u6808\u4e0e\u5185\u6838\u6808\u7684\u5207\u6362\u3002 \u7531\u4e8e\u6211\u4eec\u7684\u7528\u6237\u6001\u8fdb\u7a0b\u8fd0\u884c\u5728 U-Mode \u4e0b\uff0c \u4f7f\u7528\u7684\u8fd0\u884c\u6808\u4e5f\u662f U-Mode Stack \uff0c \u56e0\u6b64\u5f53\u89e6\u53d1\u5f02\u5e38\u65f6\uff0c \u6211\u4eec\u9996\u5148\u8981\u5bf9\u6808\u8fdb\u884c\u5207\u6362 \uff08 U-Mode Stack -> S-Mode Stack \uff09\u3002\u540c\u7406 \u8ba9\u6211\u4eec\u5b8c\u6210\u4e86\u5f02\u5e38\u5904\u7406\uff0c \u4ece S-Mode \u8fd4\u56de\u81f3 U-Mode \uff0c \u4e5f\u9700\u8981\u8fdb\u884c\u6808\u5207\u6362 \uff08 S-Mode Stack -> U-Mode Stack \uff09\u3002 \u4fee\u6539 __dummy \u3002\u5728 4.2 \u4e2d \u6211\u4eec\u521d\u59cb\u5316\u65f6\uff0c thread_struct.sp \u4fdd\u5b58\u4e86 S-Mode sp \uff0c thread_struct.sscratch \u4fdd\u5b58\u4e86 U-Mode sp \uff0c \u56e0\u6b64\u5728 S-Mode -> U->Mode \u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ea4\u6362\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u7684\u503c\u5373\u53ef\u3002 \u4fee\u6539 _trap \u3002\u540c\u7406 \u5728 _trap \u7684\u9996\u5c3e\u6211\u4eec\u90fd\u9700\u8981\u505a\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 \u6ce8\u610f\u5982\u679c\u662f \u5185\u6838\u7ebf\u7a0b( \u6ca1\u6709 U-Mode Stack ) \u89e6\u53d1\u4e86\u5f02\u5e38\uff0c\u5219\u4e0d\u9700\u8981\u8fdb\u884c\u5207\u6362\u3002\uff08\u5185\u6838\u7ebf\u7a0b\u7684 sp \u6c38\u8fdc\u6307\u5411\u7684 S-Mode Stack\uff0c sscratch \u4e3a 0\uff09 uapp \u4f7f\u7528 ecall \u4f1a\u4ea7\u751f ECALL_FROM_U_MODE exception \u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728 trap_handler \u91cc\u9762\u8fdb\u884c\u6355\u83b7\u3002\u4fee\u6539 trap_handler \u5982\u4e0b\uff1a 1 2 3 void trap_handler ( uint64_t scause , uint64_t sepc , struct pt_regs * regs ) { ... } \u8fd9\u91cc\u9700\u8981\u89e3\u91ca\u65b0\u589e\u52a0\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570 regs \uff0c \u5728 _trap \u4e2d\u6211\u4eec\u5c06\u5bc4\u5b58\u5668\u7684\u5185\u5bb9 \u8fde\u7eed \u7684\u4fdd\u5b58\u5728 S-Mode Stack\u4e0a\uff0c \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e00\u6bb5\u770b\u505a\u4e00\u4e2a\u53eb\u505a pt_regs \u7684\u7ed3\u6784\u4f53\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u53d6\u5230\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u7684\u503c\uff08 \u6bd4\u5982 syscall \u4e2d\u6211\u4eec\u9700\u8981\u4ece a0 ~ a7 \u5bc4\u5b58\u5668\u4e2d\u53d6\u5230\u53c2\u6570 \uff09\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e2d\u7684\u503c\u4e5f\u53ef\u4ee5\u6309\u9700\u6dfb\u52a0\uff0c\u540c\u65f6\u9700\u8981\u5728 _trap \u4e2d\u5b58\u5165\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u503c\u4ee5\u4f9b\u4f7f\u7528\uff0c \u793a\u4f8b\u5982\u4e0b\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 High Addr \u2500\u2500\u2500\u25ba \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 sstatus \u2502 \u2502 \u2502 \u2502 sepc \u2502 \u2502 \u2502 \u2502 x31 \u2502 \u2502 \u2502 \u2502 . \u2502 \u2502 . \u2502 \u2502 . \u2502 \u2502 \u2502 \u2502 x1 \u2502 \u2502 \u2502 \u2502 x0 \u2502 sp (pt_regs) \u2500\u2500\u25ba \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Low Addr \u2500\u2500\u2500\u25ba \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u8bf7\u540c\u5b66\u81ea\u5df1\u8865\u5145 struct pt_regs \u7684\u5b9a\u4e49\uff0c \u4ee5\u53ca\u5728 trap_handler \u4e2d\u8865\u5145\u5904\u7406 SYSCALL \u7684\u903b\u8f91\u3002","title":"4.3 \u4fee\u6539\u4e2d\u65ad\u5165\u53e3/\u8fd4\u56de\u903b\u8f91 ( _trap ) \u4ee5\u53ca\u4e2d\u65ad\u5904\u7406\u51fd\u6570 \uff08 trap_handler \uff09"},{"location":"lab5/#44","text":"\u672c\u6b21\u5b9e\u9a8c\u8981\u6c42\u7684\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u539f\u578b\u4ee5\u53ca\u5177\u4f53\u529f\u80fd\u5982\u4e0b\uff1a 64 \u53f7\u7cfb\u7edf\u8c03\u7528 sys_write(unsigned int fd, const char* buf, size_t count) \u8be5\u8c03\u7528\u5c06\u7528\u6237\u6001\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff0c\u6b64\u5904fd\u4e3a\u6807\u51c6\u8f93\u51fa\uff081\uff09\uff0cbuf\u4e3a\u7528\u6237\u9700\u8981\u6253\u5370\u7684\u8d77\u59cb\u5730\u5740\uff0ccount\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u8fd4\u56de\u6253\u5370\u7684\u5b57\u7b26\u6570\u3002( \u5177\u4f53\u89c1 user/printf.c ) 172 \u53f7\u7cfb\u7edf\u8c03\u7528 sys_getpid() \u8be5\u8c03\u7528\u4ececurrent\u4e2d\u83b7\u53d6\u5f53\u524d\u7684pid\u653e\u5165a0\u4e2d\u8fd4\u56de\uff0c\u65e0\u53c2\u6570\u3002\uff08 \u5177\u4f53\u89c1 user/getpid.c \uff09 \u589e\u52a0 syscall.c syscall.h \u6587\u4ef6\uff0c \u5e76\u5728\u5176\u4e2d\u5b9e\u73b0 getpid \u4ee5\u53ca write \u903b\u8f91\u3002 \u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u53c2\u6570\u653e\u7f6e\u5728 a0 \u4e2d (\u4e0d\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u5bc4\u5b58\u5668\uff0c \u5e94\u8be5\u4fee\u6539 regs \u4e2d\u4fdd\u5b58\u7684\u5185\u5bb9)\u3002 \u9488\u5bf9\u7cfb\u7edf\u8c03\u7528\u8fd9\u4e00\u7c7b\u5f02\u5e38\uff0c \u6211\u4eec\u9700\u8981\u624b\u52a8\u5c06 sepc + 4 \uff08 sepc \u8bb0\u5f55\u7684\u662f\u89e6\u53d1\u5f02\u5e38\u7684\u6307\u4ee4\u5730\u5740\uff0c \u7531\u4e8e\u7cfb\u7edf\u8c03\u7528\u8fd9\u7c7b\u5f02\u5e38\u5904\u7406\u5b8c\u6210\u4e4b\u540e\uff0c \u6211\u4eec\u5e94\u8be5\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u7684\u6307\u4ee4\uff0c\u56e0\u6b64\u9700\u8981\u6211\u4eec\u624b\u52a8\u4fee\u6539 sepc \u7684\u5730\u5740\uff0c\u4f7f\u5f97 sret \u4e4b\u540e \u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\uff09\u3002","title":"4.4 \u6dfb\u52a0\u7cfb\u7edf\u8c03\u7528"},{"location":"lab5/#45-heads-start_kernel","text":"\u5728\u4e4b\u524d\u7684 lab \u4e2d\uff0c \u5728 OS boot \u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u7b49\u5f85\u4e00\u4e2a\u65f6\u95f4\u7247\uff0c\u624d\u4f1a\u8fdb\u884c\u8c03\u5ea6\u3002\u6211\u4eec\u73b0\u5728\u66f4\u6539\u4e3a OS boot \u5b8c\u6210\u4e4b\u540e\u7acb\u5373\u8c03\u5ea6 uapp \u8fd0\u884c\u3002 \u5728 start_kernel \u4e2d\u8c03\u7528 schedule() \u6ce8\u610f\u653e\u7f6e\u5728 test() \u4e4b\u524d\u3002 \u5c06 head.S \u4e2d enable interrupt sstatus.SIE \u903b\u8f91\u6ce8\u91ca\uff0c\u786e\u4fdd schedule \u8fc7\u7a0b\u4e0d\u53d7\u4e2d\u65ad\u5f71\u54cd\u3002","title":"4.5 \u4fee\u6539 head.S \u4ee5\u53ca start_kernel"},{"location":"lab5/#46","text":"\u7531\u4e8e\u52a0\u5165\u4e86\u4e00\u4e9b\u65b0\u7684 .c \u6587\u4ef6\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u4e00\u4e9bMakefile\u6587\u4ef6\uff0c\u8bf7\u540c\u5b66\u81ea\u5df1\u5c1d\u8bd5\u4fee\u6539\uff0c\u4f7f\u9879\u76ee\u53ef\u4ee5\u7f16\u8bd1\u5e76\u8fd0\u884c\u3002 \u8f93\u51fa\u793a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 OpenSBI v0.9 ____ _____ ____ _____ / __ \\ / ____| _ \\_ _| | | | |_ __ ___ _ __ | (___ | |_) || | | | | | '_ \\ / _ \\ '_ \\ \\___ \\| _ < | | | |__| | |_) | __/ | | |____) | |_) || |_ \\____/| .__/ \\___|_| |_|_____/|____/_____| | | |_| ... Boot HART MIDELEG : 0x0000000000000222 Boot HART MEDELEG : 0x000000000000b109 ...mm_init done! ...proc_init done! [S-MODE] Hello RISC-V [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 4, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 3, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 2, sp is 0000003fffffffe0, this is print No.* [U-MODE] pid: 1, sp is 0000003fffffffe0, this is print No.* ...","title":"4.6 \u6d4b\u8bd5\u7eaf\u4e8c\u8fdb\u5236\u6587\u4ef6"},{"location":"lab5/#47-elf","text":"","title":"4.7 \u6dfb\u52a0 ELF \u652f\u6301"},{"location":"lab5/#elf-header","text":"ELF \u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u5230\u5185\u5b58\u6240\u9700\u7684\u4fe1\u606f\u3002\u5f53\u6211\u4eec\u901a\u8fc7 readelf \u6765\u67e5\u770b\u4e00\u4e2a ELF \u53ef\u6267\u884c\u6587\u4ef6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u5230\u88ab\u5305\u542b\u5728 ELF Header \u4e2d\u7684\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 $ readelf -a uapp ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: RISC-V Version: 0x1 Entry point address: 0x100e8 Start of program headers: 64 (bytes into file) Start of section headers: 3200 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 3 Size of section headers: 64 (bytes) Number of section headers: 9 Section header string table index: 8 Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .text PROGBITS 00000000000100e8 000000e8 00000000000006fc 0000000000000000 AX 0 0 4 [ 2] .rodata PROGBITS 00000000000107e8 000007e8 0000000000000078 0000000000000000 A 0 0 8 [ 3] .bss NOBITS 0000000000011860 00000860 00000000000003f0 0000000000000000 WA 0 0 8 [ 4] .comment PROGBITS 0000000000000000 00000860 000000000000002b 0000000000000001 MS 0 0 1 [ 5] .riscv.attributes RISCV_ATTRIBUTE 0000000000000000 0000088b 000000000000002e 0000000000000000 0 0 1 [ 6] .symtab SYMTAB 0000000000000000 000008c0 00000000000002d0 0000000000000018 7 17 8 [ 7] .strtab STRTAB 0000000000000000 00000b90 00000000000000a1 0000000000000000 0 0 1 [ 8] .shstrtab STRTAB 0000000000000000 00000c31 0000000000000049 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), D (mbind), p (processor specific) There are no section groups in this file. Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flags Align RISCV_ATTRIBUT 0x000000000000088b 0x0000000000000000 0x0000000000000000 0x000000000000002e 0x0000000000000000 R 0x1 LOAD 0x00000000000000e8 0x00000000000100e8 0x00000000000100e8 0x0000000000000778 0x0000000000001b68 RWE 0x8 GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 RW 0x10 Section to Segment mapping: Segment Sections... 00 .riscv.attributes 01 .text .rodata .bss 02 There is no dynamic section in this file. There are no relocations in this file. The decoding of unwind sections for machine type RISC-V is not currently supported. Symbol table '.symtab' contains 30 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000000100e8 0 SECTION LOCAL DEFAULT 1 .text 2: 00000000000107e8 0 SECTION LOCAL DEFAULT 2 .rodata 3: 0000000000011860 0 SECTION LOCAL DEFAULT 3 .bss 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 .comment 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 .riscv.attributes 6: 0000000000000000 0 FILE LOCAL DEFAULT ABS start.o 7: 00000000000100e8 0 NOTYPE LOCAL DEFAULT 1 $x 8: 0000000000000000 0 FILE LOCAL DEFAULT ABS getpid.c 9: 00000000000100ec 52 FUNC LOCAL DEFAULT 1 getpid 10: 00000000000100ec 0 NOTYPE LOCAL DEFAULT 1 $x 11: 0000000000010120 0 NOTYPE LOCAL DEFAULT 1 $x 12: 0000000000000000 0 FILE LOCAL DEFAULT ABS printf.c 13: 000000000001017c 0 NOTYPE LOCAL DEFAULT 1 $x 14: 00000000000101d4 1412 FUNC LOCAL DEFAULT 1 vprintfmt 15: 00000000000101d4 0 NOTYPE LOCAL DEFAULT 1 $x 16: 0000000000010758 0 NOTYPE LOCAL DEFAULT 1 $x 17: 0000000000010758 140 FUNC GLOBAL DEFAULT 1 printf 18: 0000000000012060 0 NOTYPE GLOBAL DEFAULT ABS __global_pointer$ 19: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 2 __SDATA_BEGIN__ 20: 0000000000011860 4 OBJECT GLOBAL DEFAULT 3 tail 21: 00000000000100e8 0 NOTYPE GLOBAL DEFAULT 1 _start 22: 0000000000011868 1000 OBJECT GLOBAL DEFAULT 3 buffer 23: 0000000000011c50 0 NOTYPE GLOBAL DEFAULT 3 __BSS_END__ 24: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 3 __bss_start 25: 0000000000010120 92 FUNC GLOBAL DEFAULT 1 main 26: 000000000001017c 88 FUNC GLOBAL DEFAULT 1 putc 27: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 2 __DATA_BEGIN__ 28: 0000000000011860 0 NOTYPE GLOBAL DEFAULT 2 _edata 29: 0000000000011c50 0 NOTYPE GLOBAL DEFAULT 3 _end No version information found in this file. Attribute Section: riscv File Attributes Tag_RISCV_arch: \"rv64i2p0_m2p0_a2p0_f2p0_d2p0\" \u5176\u4e2d\u5305\u542b\u4e86\u4e24\u79cd\u5c06\u7a0b\u5e8f\u5206\u5757\u7684\u7c92\u5ea6\uff0cSegment\uff08\u6bb5\uff09\u548c Section\uff08\u8282\uff09\uff0c\u6211\u4eec\u4ee5\u6bb5\u4e3a\u7c92\u5ea6\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u8fdb\u5185\u5b58\u4e2d\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u7ed9\u51fa\u7684\u6837\u4f8b\u7a0b\u5e8f\u5305\u542b\u4e86\u4e09\u4e2a\u6bb5\uff0c\u8fd9\u91cc\u6211\u4eec\u53ea\u5173\u6ce8 Type \u4e3a LOAD \u7684\u6bb5\uff0cLOAD \u8868\u793a\u4ed6\u4eec\u9700\u8981\u5728\u5f00\u59cb\u8fd0\u884c\u524d\u88ab\u52a0\u8f7d\u8fdb\u5185\u5b58\u4e2d\uff0c\u8fd9\u662f\u6211\u4eec\u5728\u521d\u59cb\u5316\u8fdb\u7a0b\u7684\u65f6\u5019\u9700\u8981\u6267\u884c\u7684\u5de5\u4f5c\u3002 \u800c\u201c\u8282\u201d\u4ee3\u8868\u4e86\u66f4\u7ec6\u5206\u7684\u8bed\u4e49\uff0c\u6bd4\u5982 .text \u4e00\u822c\u5305\u542b\u4e86\u7a0b\u5e8f\u7684\u6307\u4ee4\uff0c .rodata \u662f\u53ea\u8bfb\u7684\u5168\u5c40\u53d8\u91cf\u7b49\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c Google \u6765\u5b66\u4e60\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002","title":"ELF Header"},{"location":"lab5/#_1","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u5c06 uapp.S \u4e2d\u7684 payload \u7ed9\u6362\u6210\u6211\u4eec\u7684 ELF \u6587\u4ef6\u3002 1 2 3 4 /* user/uapp.S */ . section . uapp . incbin \"uapp\" \u8fd9\u65f6\u5019\u4ece uapp_start \u5f00\u59cb\u7684\u6570\u636e\u5c31\u53d8\u6210\u4e86\u540d\u4e3a uapp \u7684 ELF \u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4 uapp_start \u5904 32-bit \u7684\u6570\u636e\u4e0d\u518d\u662f\u6211\u4eec\u9700\u8981\u6267\u884c\u7b2c\u4e00\u6761\u6307\u4ee4\u4e86\uff0c\u800c\u662f ELF Header \u7684\u5f00\u59cb\u3002 \u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4f60\u5bf9 task_init \u4e2d\u7684\u521d\u59cb\u5316\u6b65\u9aa4\u8fdb\u884c\u4fee\u6539\u3002\u6211\u4eec\u7ed9\u51fa\u4e86 ELF \u76f8\u5173\u7684\u7ed3\u6784\u4f53\u5b9a\u4e49\uff08 elf.h \uff09\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\u4f60\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u7684\u7ed3\u6784\u4f53\u6216\u8005\u57df\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Elf64_Ehdr // \u4f60\u53ef\u4ee5\u5c06 uapp_start \u5f3a\u5236\u8f6c\u5316\u4e3a\u6539\u7c7b\u578b\u7684\u6307\u9488\uff0c \u7136\u540e\u628a\u90a3\u4e00\u5757\u5185\u5b58\u5f53\u6210\u6b64\u7c7b\u7ed3\u6784\u4f53\u6765\u8bfb\u5176\u4e2d\u7684\u6570\u636e\uff0c\u5176\u4e2d\u5305\u62ec\uff1a e_ident // Magic Number, \u4f60\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u57df\u6765\u68c0\u6d4b\u81ea\u5df1\u662f\u4e0d\u662f\u771f\u7684\u6b63\u5728\u8bfb\u4e00\u4e2a Ehdr, \u503c\u4e00\u5b9a\u662f 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 e_entry // \u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u88ab\u5b58\u50a8\u7684\u7528\u6237\u6001\u865a\u62df\u5730\u5740 e_phnum // ELF \u6587\u4ef6\u5305\u542b\u7684 Segment \u7684\u6570\u91cf e_phoff // ELF \u6587\u4ef6\u5305\u542b\u7684 Segment \u6570\u7ec4\u76f8\u5bf9\u4e8e Ehdr \u7684\u504f\u79fb\u91cf Elf64_Phdr // \u5b58\u50a8\u4e86\u7a0b\u5e8f\u5404\u4e2a Segment \u76f8\u5173\u7684 metadata // \u4f60\u53ef\u4ee5\u5c06 uapp_start + e_phoff \u5f3a\u5236\u8f6c\u5316\u4e3a\u6b64\u7c7b\u578b\uff0c\u5c31\u4f1a\u6307\u5411\u7b2c\u4e00\u4e2a Phdr, // uapp_start + e_phoff + 1 * sizeof(Elf64_Phdr), \u5219\u6307\u5411\u7b2c\u4e8c\u4e2a\u2018 p_filesz // Segment \u5728\u6587\u4ef6\u4e2d\u5360\u7684\u5927\u5c0f p_memsz // Segment \u5728\u5185\u5b58\u4e2d\u5360\u7684\u5927\u5c0f p_vaddr // Segment \u8d77\u59cb\u7684\u7528\u6237\u6001\u865a\u62df\u5730\u5740 p_offset // Segment \u5728\u6587\u4ef6\u4e2d\u76f8\u5bf9\u4e8e Ehdr \u7684\u504f\u79fb\u91cf p_type // Segment \u7684\u7c7b\u578b p_flags // Segment \u7684\u6743\u9650\uff08\u5305\u62ec\u4e86\u8bfb\u3001\u5199\u548c\u6267\u884c\uff09 \u8fd9\u91cc\u6709\u4e0d\u5c11\u4f8b\u5b50\u53ef\u4ee5\u4e3e\uff0c\u4e3a\u4e86\u907f\u514d\u540c\u5b66\u4eec\u5728\u5b9e\u9a8c\u4e2d\u82b1\u592a\u591a\u65f6\u95f4\uff0c\u6211\u4eec\u544a\u8bc9\u5927\u5bb6\u53ef\u4ee5\u600e\u4e48\u627e\u5230\u5b9e\u9a8c\u4e2d\u8fd9\u4e9b\u76f8\u5173\u53d8\u91cf\u88ab\u5b58\u5728\u4e86\u54ea\u91cc\uff1a Elf64_Ehdr* ehdr = (Elf64_Ehdr*)uapp_start \uff0c\u4ece\u5730\u5740 uapp_start \u5f00\u59cb\uff0c\u4fbf\u662f\u6211\u4eec\u8981\u627e\u7684 Ehdr. Elf64_Phdr* phdrs = (Elf64_Phdr*)(uapp_start + ehdr->phoff) \uff0c\u662f\u4e00\u4e2a Phdr \u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a Elf64_Phdr . phdrs[ehdr->phnum - 1] \u662f\u6700\u540e\u4e00\u4e2a Phdr. phdrs[0].p_type == PT_LOAD \uff0c\u8bf4\u660e\u8fd9\u4e2a Segment \u7684\u7c7b\u578b\u662f LOAD\uff0c\u9700\u8981\u5728\u521d\u59cb\u5316\u65f6\u88ab\u52a0\u8f7d\u8fdb\u5185\u5b58\u3002 (void*)(uapp_start + phdrs[1].p_offset) \u5c06\u4f1a\u6307\u5411\u7b2c\u4e8c\u4e2a\u6bb5\u4e2d\u7684\u5185\u5bb9\u7684\u5f00\u5934. \u5269\u4e0b\u7684\u57df\u7684\u7528\u6cd5\u6211\u4eec\u5e0c\u671b\u540c\u5b66\u4eec\u901a\u8fc7\u9605\u8bfb man elf \u547d\u4ee4\u548c\u4f7f\u7528 Google \uff08\u6ce8\u610f\u4e0d\u662f\u767e\u5ea6\uff09\u6765\u83b7\u53d6\u3002\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u7684\u4ee3\u7801\u6765\u5c06\u7a0b\u5e8f load \u8fdb\u5165\u5185\u5b58\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 static uint64_t load_program ( struct task_struct * task ) { Elf64_Ehdr * ehdr = ( Elf64_Ehdr * ) uapp_start ; uint64_t phdr_start = ( uint64_t ) ehdr + ehdr -> e_phoff ; int phdr_cnt = ehdr -> e_phnum ; Elf64_Phdr * phdr ; int load_phdr_cnt = 0 ; for ( int i = 0 ; i < phdr_cnt ; i ++ ) { phdr = ( Elf64_Phdr * )( phdr_start + sizeof ( Elf64_Phdr ) * i ); if ( phdr -> p_type == PT_LOAD ) { // do mapping // code... } } // allocate user stack and do mapping // code... // following code has been written for you // set user stack ...; // pc for the user program task -> thread . sepc = ehdr -> e_entry ; // sstatus bits set task -> thread . sstatus = ...; // user stack for user program task -> thread . sscratch = ...; }","title":"\u6240\u4ee5\u4ee3\u7801\u600e\u4e48\u5199\uff1f"},{"location":"lab5/#5","text":"\u6211\u4eec\u5728\u5b9e\u9a8c\u4e2d\u4f7f\u7528\u7684\u7528\u6237\u6001\u7ebf\u7a0b\u548c\u5185\u6838\u6001\u7ebf\u7a0b\u7684\u5bf9\u5e94\u5173\u7cfb\u662f\u600e\u6837\u7684\uff1f\uff08\u4e00\u5bf9\u4e00\uff0c\u4e00\u5bf9\u591a\uff0c\u591a\u5bf9\u4e00\u8fd8\u662f\u591a\u5bf9\u591a\uff09 \u4e3a\u4ec0\u4e48 Phdr \u4e2d\uff0c p_filesz \u548c p_memsz \u662f\u4e0d\u4e00\u6837\u5927\u7684\uff1f","title":"5. \u601d\u8003\u9898"},{"location":"lab5/#_2","text":"\u540c\u5b66\u9700\u8981\u63d0\u4ea4\u5b9e\u9a8c\u62a5\u544a\u4ee5\u53ca\u6574\u4e2a\u5de5\u7a0b\u4ee3\u7801\u3002\u5728\u63d0\u4ea4\u524d\u8bf7\u4f7f\u7528 make clean \u6e05\u9664\u6240\u6709\u6784\u5efa\u4ea7\u7269\u3002","title":"\u4f5c\u4e1a\u63d0\u4ea4"}]}